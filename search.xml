<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客更新脚本测试</title>
      <link href="/2023/10/14/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E8%84%9A%E6%9C%AC%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/10/14/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E8%84%9A%E6%9C%AC%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>通信协议详解</title>
      <link href="/2023/10/11/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/10/11/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="IIC"><a href="#IIC" class="headerlink" title="IIC"></a>IIC</h1><p>​    I2C串行总线一般有两根信号线，一根是双向的数据线SDA，另一根是时钟线SCL。所有接到I2C总线设备上的串行数据SDA都接到总线的SDA上，各设备的时钟线SCL接到总线的SCL上。速率最高400Kbit/s。</p><p>​    IIC总线上可以挂很多设备：多个主设备，多个从设备（外围 设备）。</p><p>​    多主机会产生总线裁决问题。当多个主机同时想占用总线时，企图启动总线传输数据，就叫做总线竞争。I2C通过总线仲裁，以决定哪台主机控制总线。 IIC和CAN一样，都有硬件的仲裁，但是软件IIC仲裁的话，可以在程序执行。</p><p>​    起始条件：SCL线是高电平时，SDA线从高电平向低电平切换。</p><p>​    停止条件：SCL线是高电平时，SDA线从低电平向高电平切换。</p><p>​    每个接到I2C总线上的器件都有唯一的地址。主机与其它器件间的数据传输可以是由主机发送数据到其它器件，这时主机 即为发送器，总线上收数据的器件则为接收器。</p><h2 id="IIC读取一字节数据流程"><a href="#IIC读取一字节数据流程" class="headerlink" title="IIC读取一字节数据流程"></a>IIC读取一字节数据流程</h2><p>​    IIC_Start();                                        // 1起始信号<br>​    IIC_Send_Byte(WRITE_ADDRESS);        // 2发送从设备地址<br>​    IIC_Wait_Ack();                                    // 3等待应答<br>​    IIC_Send_Byte(reg);                         // 4发送寄存器地址<br>​    IIC_Wait_Ack();                                    // 5等待应答<br>​    IIC_Stop();                                            // 6发送停止信号<br>​    IIC_Start();                                        // 7发送起始信号<br>​    IIC_Send_Byte(READ_ADDRESS);        // 8发送读地址<br>​    IIC_Wait_Ack();                                    // 9等待应答<br>​    data=IIC_Read_Byte();                        // 10接收数据<br>​    IIC_NAck();                                            // 11非应答接收  和 应答接收区别就是发不发应答信号。<br>​    IIC_Stop();                                            // 停止</p>]]></content>
      
      
      
        <tags>
            
            <tag> 通信协议详解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之队列</title>
      <link href="/2023/09/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%98%9F%E5%88%97/"/>
      <url>/2023/09/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之栈</title>
      <link href="/2023/09/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%88/"/>
      <url>/2023/09/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之单循环链表</title>
      <link href="/2023/09/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%95%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/09/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%95%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之单链表</title>
      <link href="/2023/09/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/09/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>知识点学习</title>
      <link href="/2023/09/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/09/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="JTAG是什么"><a href="#JTAG是什么" class="headerlink" title="JTAG是什么"></a>JTAG是什么</h1><p><strong>1.JTAG协议</strong></p><p>JTAG(Joint Test Action Group，联合测试工作组)是一种国际标准测试协议（IEEE 1149.1兼容），主要用于芯片内部测试。多数的高级器件都支持JTAG协议，如<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/DSP/74514">DSP</a>、<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/FPGA">FPGA</a>器件等。JTAG 接口的连接有两种标准，即 14 针接口和 20 针接口。</p><p><img src="/2023/09/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/image-20230908195924347.png" alt="image-20230908195924347"></p><p>具有JTAG口的芯片都有如下JTAG<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E5%BC%95%E8%84%9A">引脚</a>定义：<br>TCK——测试时钟输入；<br>TDI——测试数据输入，数据通过TDI输入JTAG口；<br>TDO——测试<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E8%BE%93%E5%87%BA">数据输出</a>，数据通过TDO从JTAG口输出；<br>TMS——测试模式选择，TMS用来设置JTAG口处于某种特定的测试模式。<br>（可选引脚：TRST——测试复位，输入引脚。）</p><p><img src="/2023/09/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/image-20230908195931280.png" alt="image-20230908195931280"></p><h1 id="SWD是什么"><a href="#SWD是什么" class="headerlink" title="SWD是什么"></a>SWD是什么</h1><p>串行调试（Serial Wire Debug），是ARM内核调试器的一种通信协议。相比于JTAG协议，占用更少的端口资源。</p><p><img src="/2023/09/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/image-20230908201013504.png" alt="image-20230908201013504"></p><h1 id="调试仿真器是什么"><a href="#调试仿真器是什么" class="headerlink" title="调试仿真器是什么"></a>调试仿真器是什么</h1><p>顾名思义，是为了嵌入式程序开发时，连接电脑和单片机，方便于调试、仿真、下载嵌入式程序的设备。</p><h1 id="ST-Link仿真器是什么"><a href="#ST-Link仿真器是什么" class="headerlink" title="ST-Link仿真器是什么"></a><strong>ST-Link仿真器是什么</strong></h1><p>ST（意法半导体）官方出版了3种仿真器：ST-LINK、ST-LINK/V2，STLINK-V3SET。针对于意法半导体STM8和STM32系列芯片。支持SWIM / JTAG / SWD下载。（SWIM协议是一种用于STM8微控制器的调试/编程协议。）</p><p><img src="/2023/09/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/image-20230908201414225.png" alt="image-20230908201414225"></p><h1 id="ULink仿真器是什么"><a href="#ULink仿真器是什么" class="headerlink" title="ULink仿真器是什么"></a><strong>ULink仿真器</strong>是什么</h1><p>ULINK 是 ARM/KEIL 公司的仿真器，因此仅可以在Keil软件上使用（其他IDE如ADS、IAR下不能使用）。支持 JTAG / SWD下载。</p><p><img src="/2023/09/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/image-20230908201441722.png" alt="image-20230908201441722"></p><h1 id="JLink仿真器"><a href="#JLink仿真器" class="headerlink" title="JLink仿真器"></a><strong>JLink仿真器</strong></h1><p>J-Link是德国 SEGGER 公司的仿真器，得到所有主流的 IDE 的支持。支持SWIM / JTAG / SWD下载。</p><p><img src="/2023/09/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/image-20230908201528218.png" alt="image-20230908201528218"></p><p>值得一提的是最后面的 <strong>J-Link OB</strong>（The On-Board Debug Probe），通常被设计到各大公司的评估板上(“on-board”)，J-Link- OB的下载调试器具备 USB 通信功能可以与 PC 通信，另一端通过 JTAG 或 SWD 方式与可支持器件通信，完成调试下载任务。</p><h1 id="单片机的三种烧录方式是什么（ICP（在线编程），-IAP（在程序中编程），ISP（在系统上编程））"><a href="#单片机的三种烧录方式是什么（ICP（在线编程），-IAP（在程序中编程），ISP（在系统上编程））" class="headerlink" title="单片机的三种烧录方式是什么（ICP（在线编程）， IAP（在程序中编程），ISP（在系统上编程））"></a>单片机的三种烧录方式是什么（ICP（在线编程）， IAP（在程序中编程），ISP（在系统上编程））</h1><p>ICP(In Circuit Programing)在电路编程ISP(In System Programing)在系统编程IAP(In applicating Programing)在应用编程.</p><p>ICP(In Circuit Programing)意为在电路编程，目前主流的编程方式有Jtag（Joint Test Action Group）以及SWD（Serial Wire Debug）接口。</p><p>ISP(In System Programing)意为在系统编程，通过单片机内置的BootLoader程序引导的烧写技术，一般使用PC通过串口等通信方式将bin/hex文件直接烧录到单片机的内部Flash中。在使用STM32CubeProgrammer进行程序烧录的时候我们需要将Boot0=1；Boot1=0，进入系统存储器从此处启动，ST原厂内置的BootLoader就在这个区域存储，ST原厂提供的BootLoader中，提供了串口下载程序的固件，可以通过这个BootLoader将程序下载到系统的Flash中。</p><p>AP(In Application Programing)意为在应用编程，是指开发者将Flash分成若干区域在用户程序(IAP程序)运行过程中对部分User Flash部分区域进行烧写，目的是为了在产品发布之后仍然可以方便的通过预留的通信端口对产品中的firmware进行更新升级。不过IAP程序还是需要通过ICP或者ISP的方式进行预先烧录。</p><h1 id="FPEC是什么"><a href="#FPEC是什么" class="headerlink" title="FPEC是什么"></a>FPEC是什么</h1><p>在STM32F10x中，内嵌了闪存存储器Flash，用于在线编程ICP或在程序编程IAP。</p><p>FPEC模块又称闪存编程和擦除控制器，包含了7个32位的寄存器，处理闪存的编程和擦除操作。其中有一个FLASH_CR寄存器，称为闪存控制寄存器。</p><p>FPEC模块如果被闪存锁锁定，则不能写入FLASH_CR。复位后，闪存锁处于锁定状态。</p><p>解锁的方法就是对 FLASH_KEYR 寄存器先写入 0x45670123, 再写入 0xCDEF89AB 。</p><p><img src="/2023/09/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/image-20230908203911689.png" alt="image-20230908203911689"></p><p><img src="/2023/09/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/image-20230908204117993.png" alt="image-20230908204117993"></p><h1 id="FLASH的擦除（页擦除和全部擦除）"><a href="#FLASH的擦除（页擦除和全部擦除）" class="headerlink" title="FLASH的擦除（页擦除和全部擦除）"></a>FLASH的擦除（页擦除和全部擦除）</h1><p><img src="/2023/09/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/image-20230908204604842.png" alt="image-20230908204604842"></p><p><img src="/2023/09/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/image-20230908204629425.png" alt="image-20230908204629425"></p><h1 id="FLASH，RAM，ROM，SSD与HDD，是什么"><a href="#FLASH，RAM，ROM，SSD与HDD，是什么" class="headerlink" title="FLASH，RAM，ROM，SSD与HDD，是什么"></a>FLASH，RAM，ROM，SSD与HDD，是什么</h1><h2 id="一、-非易失性存储器ROM（Read-One-Momory）"><a href="#一、-非易失性存储器ROM（Read-One-Momory）" class="headerlink" title="一、 非易失性存储器ROM（Read One Momory）"></a>一、 非易失性存储器ROM（Read One Momory）</h2><p>ROM （Read Only Memory）只读存储器。用来存储和保存数据。ROM数据不能随意更新，但是在任何时候都可以读取。即使是断电，ROM也能够保留数据。</p><p>ROM分为以下几个种类：</p><h3 id="1-MASK-ROM："><a href="#1-MASK-ROM：" class="headerlink" title="1. MASK ROM："></a><strong>1. MASK ROM：</strong></h3><p>厂商制造过程中使用一组特定的数据或指令进行编程，通过光刻工艺屏蔽存储器阵列的某些区域，将数据硬连接到ROM，从而创建永久的、不可更改的“1”和“0”图案。这意味着一旦芯片生产出来，就无法修改、擦除或重写数据；</p><h3 id="2-PROM："><a href="#2-PROM：" class="headerlink" title="2. PROM："></a>2. PROM：</h3><p>可编程只读存储器只允许写入一次，所以也被称为“一次可编程只读存储器”(One Time Progarmming ROM，OTP-ROM)。PROM在出厂时，存储的内容全为1，用户可以根据需要将其中的某些单元写入数据0(部分的PROM在出厂时数据全为0，则用户可以将其中的部分单元写入1)， 以实现对其“编程”的目的。PROM的典型产品是“双极性熔丝结构”，如果我们想改写某些单元，则可以给这些单元通以足够大的电流，并维持一定的时间，原先的熔丝即可熔断，这样就达到了改写某些位的效果。另外一类经典的PROM为使用“肖特基二极管”的PROM，出厂时，其中的二极管处于反向截止状态，还是用大电流的方法将反相电压加在“肖特基二极管”，造成其永久性击穿即可。</p><h3 id="3-EPROM："><a href="#3-EPROM：" class="headerlink" title="3. EPROM："></a>3. EPROM：</h3><p>EPROM是一种断电后仍能保留数据的计算机储存芯片——即非易失性的（非挥发性）。它是一组浮栅晶体管，被一个提供比电子电路中常用电压更高电压的电子器件分别编程。一旦编程完成后，EPROM只能用强紫外线照射来擦除。通过封装顶部能看见硅片的透明窗口，很容易识别EPROM，这个窗口同时用来进行紫外线擦除。可以将EPROM的玻璃窗对准阳光直射一段时间就可以擦除。</p><h3 id="4-EEPROM："><a href="#4-EEPROM：" class="headerlink" title="4. EEPROM："></a>4. EEPROM：</h3><p>可电擦除、可编程的ROM，按字节进行删除和重写，写入时间很长很慢，现在多用作非易失的数据存储器。特点是可以随机访问与修改，可以往每个bit中写入0或者1。这是最传统的一种EEPROM，掉电后数据不丢失，可以保存100年，可以擦写100w次。具有较高的可靠性，但是电路复杂成本也高。因此目前的EEPROM都是几十KByte到几百KByte的，很少有超过512KByte。</p><h2 id="二、易失性存储器RAM（Random-Access-Memory）"><a href="#二、易失性存储器RAM（Random-Access-Memory）" class="headerlink" title="二、易失性存储器RAM（Random Access Memory）"></a><strong>二、易失性存储器RAM（Random Access Memory）</strong></h2><p>RAM（Random Access Memory），随机存取存储器。与CPU直接交换数据的内部存储器，也叫内存。它可以随时读写，而且速度很快，通常作为操作系统或其他正在运行中的程序的临时数据存储媒介，当电源关闭时RAM不能保留数据。RAM可以进一步分为静态RAM（SRAM）和动态RAM（DRAM）两大类。</p><h3 id="1-静态RAM（Static-RAM-SRAM）："><a href="#1-静态RAM（Static-RAM-SRAM）：" class="headerlink" title="1. 静态RAM（Static RAM/SRAM）："></a><strong>1. 静态RAM（Static RAM/SRAM）：</strong></h3><p>SRAM速度非常快，不需要刷新电路即能保存数据，是目前读写最快的存储设备了，但是集成度较低，非常昂贵。</p><h3 id="2-动态RAM（Dynamic-RAM-DRAM）："><a href="#2-动态RAM（Dynamic-RAM-DRAM）：" class="headerlink" title="2. 动态RAM（Dynamic RAM/DRAM）："></a><strong>2. 动态RAM（Dynamic RAM/DRAM）</strong>：</h3><p>DRAM保留数据的时间很短（需要刷新电路，每隔一段时间刷新一次，否则数据会消失)，速度要比SRAM慢，不过还是比ROM要快，但从价格上来说DRAM相比SRAM要便宜很多，计算机内存就是DRAM的。</p><h3 id="3-内存工作原理："><a href="#3-内存工作原理：" class="headerlink" title="3. 内存工作原理："></a><strong>3. 内存工作原理：</strong></h3><p>内存是用来存放当前正在使用的（即执行中）的数据和程序，我们平常所提到的计算机的内存指的是动态内存（即 DRAM ），动态内存中所谓的”动态”指的是当我们将数据写入 DRAM 后，经过一段时间，数据会丢失，因此需要一个额外设电路进行内存刷新操作。</p><p>具体的工作过程是这样的：一个 DRAM 的存储单元存储的是0还是1取决于电容是否有电荷，有电荷代表1，无电荷代表0。但时间一长，代表1的电容会放电，代表0的电容会吸收电荷，这就是数据丢失的原因；刷新操作定期对电容进行检查，若电量大于满电量的1／2，则认为其代表1，并把电容充满电；若电量小于1／2，则认为其代表0，并把电容放电，藉此来保持数据的连续性。</p><h2 id="三、-FLASH闪存："><a href="#三、-FLASH闪存：" class="headerlink" title="三、 FLASH闪存："></a><strong>三、 FLASH闪存：</strong></h2><p>FLASH闪存是非易失性（Non-Volatile）内存，结合了ROM和RAM的长处，可电擦除、可编程（EEPROM）、断电不会丢失数据、同时可以快速读取数据，U盘和MP3里用的就是这种存储器。在过去的20年里，嵌入式系统一直使用ROM（EPROM）作为存储设备，然而近年来FLASH全面代替了ROM（EPROM）在嵌入式系统中的地位，用作存储装载程序以及操作系统或者程序代码或者直接当硬盘使用（U盘）。FLASH属于广义上的ROM，和EEPROM的最大区别是FLASH按扇区操作，相对于EEPROM的改进就是擦除时不再以字节为单位，而是以块为单位，简化了电路，数据密度更高，降低了成本。目前Flash主要有两种NOR Flash和NADN Flash。</p><ul><li>NOR Flash：NOR Flash的读取和我们常见的SDRAM的读取是一样，用户可以直接运行装载在NOR FLASH里面的代码，这样可以减少SRAM的容量从而节约了成本。一般小容量的用NOR Flash，因为其读取速度快，多用来存储操作系统等重要信息。NOR FLASH数据线和地址线分开，可以实现RAM一样的随机寻址功能，可以读取任何一个字节，但是擦除仍要按块来擦。</li><li>NADN Flash：没有采取内存的随机读取技术，它的读取是以一次读取一块的形式来进行的，通常是一次读取512 Byte，采用这种技术的Flash比较廉价。用户不能直接运行NAND Flash上的代码，NAND Flash的开发板除了使用NAND Flah以外，还作上了一块小的NOR Flash来运行启动代码。大容量的用NAND FLASH，最常见的NAND FLASH应用是嵌入式系统采用的DOC（Disk On Chip）和我们通常用的”闪盘”，可以在线擦除。NAND FLASH同样是按块擦除，但是数据线和地址线复用，不能利用地址线随机寻址。读取只能按页来读取。（NAND FLASH 按块来擦除，按页来读，NOR FLASH没有页）。由于NAND FLASH引脚上复用，因此读取速度比NOR FLASH慢一点，但是擦除和写入速度比NOR FLASH快很多。NAND FLASH内部电路更简单，因此数据密度大、体积小、成本也低。因此大容量的FLASH都是NAND FLASH。小容量的2～12M的FLASH多是NOR FLASH。</li></ul><p><strong>FLASH 工作原理：</strong>Flash Memory属于非易失性存储设备(Non-volatile Memory Device)，FLASH的内部存储是MOSFET，里面有个悬浮门(Floating Gate)，是真正存储数据的单元。数据在Flash内存单元中是以电荷（electrical charge）形式存储的。存储电荷的多少取决于外部门（external gate）所被施加的电压，控制了是向存储单元中冲入电荷还是使其释放电荷。数据的表示是以所存储的电荷的电压是否超过一个特定的阈值Vth来表示。</p><p>对于数据的表示，单个存储单元中内部所存储电荷的电压，和某个特定的阈值电压Vth相比，如果大于此Vth值就是表示1，反之小于Vth就表示0；对于NAND FLASH的数据的写入1，就是控制External Gate去充电，使得存储的电荷超过阈值Vth就表示1了。而对于写入0，就是控制External Gate去放电，使得电荷减少到小于Vth就表示0了。</p><h3 id="四、SSD与HDD："><a href="#四、SSD与HDD：" class="headerlink" title="四、SSD与HDD："></a>四、SSD与HDD：</h3><p>HDD：硬盘驱动器(Hard Disk Drive)，最基本的电脑存储器，也就是机械硬盘，靠磁场存储信息，故也称为磁盘。在这里不做过多介绍。</p><p>SSD：固态硬盘（Solid State Drives）。由控制单元和存储单元（FLASH芯片、DRAM芯片）组成。固态硬盘的存储介质分为两种，一种是采用闪存（FLASH芯片）作为存储介质，另外一种是采用DRAM作为存储介质。</p><h2 id="五、eMMC与USF2-0："><a href="#五、eMMC与USF2-0：" class="headerlink" title="五、eMMC与USF2.0："></a>五、eMMC与USF2.0：</h2><p>eMMC：eMMC的全称为“embedded Multi Media Card”，是由MMC协会所订立的、主要是针对手机或平板电脑等产品的内嵌式存储器标准规格。eMMC的一个明显优势是在封装中集成了一个控制器，它提供标准接口并管理闪存，eMMC利用的是它将主控制器、闪存颗粒整合到了一个小的BGA封装内。 <em>eMMC=NAND Flash+控制器+标准封装接口</em></p><p>UFS 2.0：UFS 2.0的闪存规格则采用了新的标准，它使用的是串行界面，很像PATA、SATA的转换。并且它支持全双工运行，可同时读写操作，还支持指令队列。相比之下，eMMC是半双工，读写必须分开执行，指令也是打包的，在速度上就已经是略逊一筹了。而且UFS芯片不仅传输速度快，功耗也要比eMMC 5.0低一半，可以说是旗舰手机闪存的理想搭配。</p><p>总结：虽然eMMC在传输速度和性能方面不及现在最新的UFS 2.0，但在日后相当长的一段时间内，还是会继续占领移动产品闪存芯片的主流。因为eMMC有着更成熟的工艺，能够大规模生产，成本更低更适合大众化的移动产品闪存芯片需求；而UFS 2.0虽然很好，但是生产成本较高，在现在刚开始投入市场的初期，只能够被放在高端产品上使用。但以现在的趋势来看，UFS 2.0将会逐渐成为移动产品市场的主流相信是不成问题，毕竟科技是需要进步的。</p><h1 id="STM32编译代码后显示的code-代码存储区-、RO-data-只读数据存储区-、RW-data-读写数据存储区-和-ZI-data-零初始化数据区-是什么"><a href="#STM32编译代码后显示的code-代码存储区-、RO-data-只读数据存储区-、RW-data-读写数据存储区-和-ZI-data-零初始化数据区-是什么" class="headerlink" title="STM32编译代码后显示的code(代码存储区)、RO-data(只读数据存储区)、RW-data(读写数据存储区) 和 **ZI-data(零初始化数据区)**是什么"></a>STM32编译代码后显示的<strong>code(代码存储区)<strong>、</strong>RO-data(只读数据存储区)<strong>、</strong>RW-data(读写数据存储区)</strong> 和 **ZI-data(零初始化数据区)**是什么</h1><p>Code为程序代码部分 = <strong>程序代码区(code)</strong></p><p>RO-data 表示 程序定义的常量 = <strong>文字常量区</strong></p><p>RW-data 表示 已初始化的全局变量 = <strong>栈区（stack）堆区（heap）全局区（静态区）（static）</strong></p><p>ZI-data 表示 未初始化的全局变量</p><p>FLASH=Code + RO-data + RW-data </p><p>RAM=RW-data + ZI-data</p><h1 id="单片机内存分配："><a href="#单片机内存分配：" class="headerlink" title="单片机内存分配："></a>单片机内存分配：</h1><p>通常，对于栈生长方向向下的单片机，其内存一般模型是：</p><p><img src="/2023/09/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/image-20230909094840062.png" alt="image-20230909094840062"></p><p><img src="/2023/09/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/image-20230909094849953.png" alt="image-20230909094849953"></p><p>一个进程运行时，所占用的内存，可以分为如下几个部分：<br>1、栈区（stack）：由编译器自动分配释放，存放函数的参数值，局部变量的值等。<br>2、堆区（heap）：一般由程序员分配释放，若程序员不释放，程序结束时可能由OS释放。<br>3、全局变量、静态变量：初始化的全局变量和静态变量放在一块区域，未初始化的全局变量和和未初始化的静态变量在相邻的的另一块区域。程序结束后由系统自动释放。<br>4、文字常量：常量字符串就是放在这里的。这些数据是只读的，分配在RO-data(只读数据存储区)，则被包含在flash中，程序结束后由系统自动释放</p><p>5、程序代码(code)：存放函数体的二进制代码。</p><p>同时，单片机内存被总分为flash(rom)和sram（ram），flash里面的数据掉电可保存，sram中的数据掉电就丢失，sram的执行速度要快于flash，flash容量大于sram</p><p>上方的最低内存地址，最高地址，都是在flash和sram中</p><p>我们正常下载程序都是下载存储进flash里面，这也是为什么断电可保存的原因。</p><p>单片机的程序存储分为<strong>code(代码存储区)<strong>、</strong>RO-data(只读数据存储区)<strong>、</strong>RW-data(读写数据存储区)</strong> 和 <strong>ZI-data(零初始化数据区)</strong></p><ul><li>Flash 存储 code和RO-data</li><li>Sram 存储 RW-data 和ZI-data</li></ul><p><img src="/2023/09/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/image-20230909095256255.png" alt="image-20230909095256255"></p><p>Code为程序代码部分 = <strong>程序代码区(code)</strong></p><p>RO-data 表示 程序定义的常量 = <strong>文字常量区</strong></p><p>RW-data 表示 已初始化的全局变量 = <strong>栈区（stack）堆区（heap）全局区（静态区）（static）</strong></p><p>ZI-data 表示 未初始化的全局变量<br>版权声明：本文为CSDN博主「Z小旋」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/as480133937/article/details/87608816">https://blog.csdn.net/as480133937/article/details/87608816</a></p><h1 id="文件系统（-FAT-FATFS，NTFS（windows），CDFS（光盘），exFAT）"><a href="#文件系统（-FAT-FATFS，NTFS（windows），CDFS（光盘），exFAT）" class="headerlink" title="文件系统（-FAT/FATFS，NTFS（windows），CDFS（光盘），exFAT）"></a>文件系统（-FAT/FATFS，NTFS（windows），CDFS（光盘），exFAT）</h1><p>FATFS的API</p><p><img src="/2023/09/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/image-20230909203410217.png" alt="image-20230909203410217"></p><p><img src="/2023/09/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/image-20230909203618743.png" alt="image-20230909203618743"></p><p><img src="/2023/09/07/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/image-20230909203651544.png" alt="image-20230909203651544"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 各种通讯协议，以及专业名词记录。 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项9月3日项目想法---yolo+激光雷达 实现小车跟踪</title>
      <link href="/2023/09/03/%E9%A1%B99%E6%9C%883%E6%97%A5%E9%A1%B9%E7%9B%AE%E6%83%B3%E6%B3%95-yolo-%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE-%E5%AE%9E%E7%8E%B0%E5%B0%8F%E8%BD%A6%E8%B7%9F%E8%B8%AA/"/>
      <url>/2023/09/03/%E9%A1%B99%E6%9C%883%E6%97%A5%E9%A1%B9%E7%9B%AE%E6%83%B3%E6%B3%95-yolo-%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE-%E5%AE%9E%E7%8E%B0%E5%B0%8F%E8%BD%A6%E8%B7%9F%E8%B8%AA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LinuxC----自己实现文件复制脚本</title>
      <link href="/2023/09/03/LinuxC-%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6%E8%84%9A%E6%9C%AC/"/>
      <url>/2023/09/03/LinuxC-%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>1</p><p><img src="/2023/09/03/LinuxC-%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6%E8%84%9A%E6%9C%AC/image-20230903130853227.png" alt="image-20230903130853227"></p><p>基本上效果还不错，就是文件太大之后会报一个段错误（不知道原因，可能是malloc的问题），虚拟机一共才30G。</p><p>一些关于内存申请的函数。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">在C语言中用于动态申请内存空间的函数主要为<span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数，<span class="token function">calloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数，以及<span class="token function">realloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数，以下主要介绍三个函数的用法，区别以及使用时的注意事项。<span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，<span class="token function">calloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，<span class="token function">realloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>三个函数均为C语言系统库函数，使用其中之一进行动态申请内存空间时，均需要添加 #include<span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">></span> 头文件，才能正常使用。函数用法<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>功能：在内存空间堆区中申请一段size字节大小的连续存储空间。参数：size 为需要申请内存空间的大小，单位为Byte<span class="token punctuation">.</span>返回值：若内存空间申请成功，返回指向该内存空间的首地址；否则，返回<span class="token constant">NULL</span><span class="token punctuation">.</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> n<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>功能：在内存空间堆区中申请一段n个size字节大小的连续存储空间，总空间大小即为 n<span class="token operator">*</span>size Bytes<span class="token punctuation">.</span>参数：n 为需要申请size字节大小的个数；size为每个单元的字节大小。返回值：若内存空间申请成功，返回指向该内存空间的首地址；否则，返回<span class="token constant">NULL</span><span class="token punctuation">.</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>_ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>功能：realloc函数，顾名思义为重置<span class="token punctuation">(</span>re<span class="token operator">*</span><span class="token punctuation">)</span>一段内存空间的大小，可使该内存空间扩容或缩容。参数：_ptr 为需要重置内存空间的首地址；size为重置后该内存空间的容量。返回值：若重置成功时，返回可为原内存空间的首地址，也可为一段新的内存空间首地址；失败时返回<span class="token constant">NULL</span>。函数区别三个函数的相同之处：（<span class="token number">1</span>）都是在堆区上申请一段连续的存储空间；（<span class="token number">2</span>）使用malloc<span class="token punctuation">,</span> calloc<span class="token punctuation">,</span> realloc三个函数主动申请的内存空间在使用完后，都需要调用 <span class="token function">free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span> 函数进行主动释放该内存空间。区别：<span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数申请的内存空间默认不会被清空的，因此有两种情况：若是在一段从未使用过的空间上进行申请的话，则申请成功后该内存空间均为<span class="token number">0</span>值；若是申请所得的内存空间是一段之前被使用过的空间的话，则此时该空间上的值可能会是一些奇奇怪怪的随机值。<span class="token function">calloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数所申请的内存空间默认是会被清空的，所以使用<span class="token function">calloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数申请的内存空间其默认值都为<span class="token number">0</span>值。<span class="token function">realloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数其工作原理为：若是将原内存空间进行缩容的话，realloc仅仅改变了内存空间的索引信息即可。若是将原内存空间进行扩容的话，（<span class="token number">1</span>）先是在原内存空间的后面进行探索寻找，看是否有满足要求的一段连续存储空间，若是有则表示申请成功，直接返回原来内存空间首地址即可，若是没有则进行（<span class="token number">2</span>）步；（<span class="token number">2</span>）在一段新的存储空间上进行申请，申请一段满足需求大小的连续存储空间，同时还会进行 将原空间上的值悉数拷贝到新内存空间的相应位置上来 以及主动释放掉原来内存空间 等一系列操作；（<span class="token number">3</span>）使用realloc函数申请失败的话，返回<span class="token constant">NULL</span>；此时原内存空间仍有效。————————————————版权声明：本文为CSDN博主「maybcsdn」的原创文章，遵循CC <span class="token number">4.0</span> BY<span class="token operator">-</span>SA版权协议，转载请附上原文出处链接及本声明。原文链接：https<span class="token operator">:</span><span class="token comment">//blog.csdn.net/maybcsdn/article/details/115822285</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*作者： 王永泰 --- Wyt-Loc*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">getFileSize1</span><span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fileName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name = %s\r\n"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fd = %d"</span><span class="token punctuation">,</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s size is %ld\n"</span><span class="token punctuation">,</span>fileName<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> fileswp<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>buff <span class="token operator">=</span> fileswp<span class="token punctuation">;</span><span class="token keyword">int</span> malloc_js <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd1<span class="token punctuation">,</span>fd2<span class="token punctuation">;</span><span class="token keyword">int</span> ret<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"参数个数为argc = %d\r\n"</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入的参数太少了，第一参数为要复制的文件路径，第二个参数为目标文件路径😀😀  请重新输入🙏🙏\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"脚本开始执行....... 请耐心等待\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"要复制的文件为%s\r\n"</span><span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fd1 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打开%s文件\r\n"</span><span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd1 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"返回fd1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> fd1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>fd2 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打开%s文件\r\n"</span><span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd2 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ret <span class="token operator">=</span> fd2<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"跳转到out1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">goto</span> out1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> filesize <span class="token operator">=</span> <span class="token function">getFileSize1</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>filesize <span class="token operator">></span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>buff <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>malloc_js<span class="token operator">++</span><span class="token punctuation">;</span>filesize <span class="token operator">-=</span> <span class="token number">512</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ret <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd1<span class="token punctuation">,</span> buff<span class="token punctuation">,</span> <span class="token function">getFileSize1</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"读到的文件内容为%s\r\n"</span><span class="token punctuation">,</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"跳转到out2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">goto</span> out2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ret <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd2<span class="token punctuation">,</span> buff<span class="token punctuation">,</span> <span class="token function">getFileSize1</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">goto</span> out2<span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>out2<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"关闭文件%s\r\n"</span><span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>fd2<span class="token punctuation">)</span><span class="token punctuation">;</span>out1<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"申请空间总数为%d\r\n"</span><span class="token punctuation">,</span> malloc_js<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"关闭文件%s\r\n"</span><span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"脚本执行完毕，感谢使用🙇🙇\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>fd1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> LinuxC之实现文件内容复制脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux裸机开发之点灯</title>
      <link href="/2023/09/03/linux%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91%E4%B9%8B%E7%82%B9%E7%81%AF/"/>
      <url>/2023/09/03/linux%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91%E4%B9%8B%E7%82%B9%E7%81%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="1-sda和sda1以及sdb和sdb1的区别-—–Linux-设备命名。"><a href="#1-sda和sda1以及sdb和sdb1的区别-—–Linux-设备命名。" class="headerlink" title="1. sda和sda1以及sdb和sdb1的区别 —–Linux 设备命名。"></a>1. sda和sda1以及sdb和sdb1的区别 —–Linux 设备命名。</h2><p>Linux磁盘和分区的名称可能与其他操作系统不同。您需要知道在创建和挂载分区时Linux使用的名称。</p><p>下面是基本的命名方案:</p><p>第一个软盘驱动器命名为/dev/fd0。</p><p>第二个软驱命名为/dev/fd1.</p><p>检测到的第一个硬盘名为/dev/sda。</p><p>检测到的第二块硬盘命名为/dev/sdb，以此类推。</p><p>第一个SCSI CD-ROM命名为/dev/scd0，也称为/dev/sr0。</p><p>每个SCSI磁盘上的分区通过在磁盘名后面加上一个十进制数字表示：sda1和sda2表示系统中第一个SCSI磁盘驱动器的第一个和第二个分区。</p><p>假设你有一个有2个SCSI磁盘的系统，一个在SCSI地址2，另一个在SCSI地址4。第一个磁盘(地址2)被命名为sda，第二个磁盘被命名为sdb。如果sda驱动器上有3个分区，这些分区将被命名为sda1、sda2和sda3。这同样适用于sdb磁盘及其分区。</p><p><img src="/linux%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91%E4%B9%8B%E7%82%B9%E7%81%AF/image-20230903105806425.png" alt="image-20230903105806425"></p><p>这就是只有硬盘的情况。</p><p>插上sd卡会在多一个sdb 和 sdb1。</p><p>程序的编写，主要有几个部分,</p><p>Start.s</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span>global _start  <span class="token comment">/* 全局标号 */</span><span class="token punctuation">.</span>global __bss_start_bss_start<span class="token operator">:</span><span class="token punctuation">.</span>word __bss_start<span class="token punctuation">.</span>global __bss_end_bss_end<span class="token operator">:</span><span class="token punctuation">.</span>word __bss_end<span class="token comment">/* * 描述：_start函数，程序从此函数开始执行，此函数主要功能是设置C * 运行环境。 */</span>_start<span class="token operator">:</span><span class="token comment">/* 进入SVC模式 */</span>mrs r0<span class="token punctuation">,</span> cpsrbic r0<span class="token punctuation">,</span> r0<span class="token punctuation">,</span> #<span class="token number">0x1f</span> <span class="token comment">/* 将r0寄存器中的低5位清零，也就是cpsr的M0~M4 */</span>orr r0<span class="token punctuation">,</span> r0<span class="token punctuation">,</span> #<span class="token number">0x13</span> <span class="token comment">/* r0或上0x13,表示使用SVC模式*/</span>msr cpsr<span class="token punctuation">,</span> r0<span class="token comment">/* 将r0 的数据写入到cpsr_c中 */</span><span class="token comment">/* 清BSS段 */</span>ldr r0<span class="token punctuation">,</span> _bss_startldr r1<span class="token punctuation">,</span> _bss_endmov r2<span class="token punctuation">,</span>  #<span class="token number">0</span>bss_loop<span class="token operator">:</span>stmia r0<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>r2<span class="token punctuation">&#125;</span><span class="token comment">/* 向r0的地址写入0,然后r0寄存器保存的地址值加1 */</span>cmp r0<span class="token punctuation">,</span> r1  <span class="token comment">/* 比较r0和r1，也就是__bss_start和__bss_end的值*/</span>ble bss_loop<span class="token comment">/* 如果小于等于的话就跳转到bss_loop继续清bss段*/</span><span class="token comment">/* 设置sp指针 */</span>ldr sp<span class="token punctuation">,</span><span class="token operator">=</span><span class="token number">0X80200000</span><span class="token comment">/* 设置栈指针 */</span>b main<span class="token comment">/* 跳转到main函数  */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>makefile文件</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">objs <span class="token operator">:=</span> start.o main.o<span class="token target symbol">ledc.bin</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>objs<span class="token punctuation">)</span>arm-linux-gnueabihf-ld -Timx6ul.lds -o ledc.elf <span class="token variable">$^</span>arm-linux-gnueabihf-objcopy -O binary -S ledc.elf <span class="token variable">$@</span>arm-linux-gnueabihf-objdump -D -m arm ledc.elf > ledc.dis<span class="token target symbol">%.o</span><span class="token punctuation">:</span>%.sarm-linux-gnueabihf-gcc -Wall -nostdlib -c -O2 -o <span class="token variable">$@</span> <span class="token variable">$&lt;</span><span class="token target symbol">%.o</span><span class="token punctuation">:</span>%.Sarm-linux-gnueabihf-gcc -Wall -nostdlib -c -O2 -o <span class="token variable">$@</span> <span class="token variable">$&lt;</span><span class="token target symbol">%.o</span><span class="token punctuation">:</span>%.carm-linux-gnueabihf-gcc -Wall -nostdlib -c -O2 -o <span class="token variable">$@</span> <span class="token variable">$&lt;</span><span class="token target symbol">clean</span><span class="token punctuation">:</span>rm -rf *.o ledc.bin ledc.elf ledc.dis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主函数</p><p>main.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**************************************************************Copyright © zuozhongkai Co., Ltd. 1998-2019. All rights reserved.文件名:  mian.c作者   : 左忠凯版本   : V1.0描述   : I.MX6U开发板裸机实验3 STM32模式的LED灯开发 使用STM32开发模式来编写LED灯驱动，学习如何从STM32来转入 I.MX6U的裸机开发，同时也通过本实验了解STM32库的运行方式。其他   : 无日志   : 初版V1.0 2019/1/3 左忠凯创建**************************************************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"imx6ul.h"</span></span><span class="token comment">/* * @description: 使能I.MX6U所有外设时钟 * @param : 无 * @return : 无 */</span><span class="token keyword">void</span> <span class="token function">clk_enable</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>CCM<span class="token operator">-></span>CCGR0 <span class="token operator">=</span> <span class="token number">0XFFFFFFFF</span><span class="token punctuation">;</span>CCM<span class="token operator">-></span>CCGR1 <span class="token operator">=</span> <span class="token number">0XFFFFFFFF</span><span class="token punctuation">;</span>CCM<span class="token operator">-></span>CCGR2 <span class="token operator">=</span> <span class="token number">0XFFFFFFFF</span><span class="token punctuation">;</span>CCM<span class="token operator">-></span>CCGR3 <span class="token operator">=</span> <span class="token number">0XFFFFFFFF</span><span class="token punctuation">;</span>CCM<span class="token operator">-></span>CCGR4 <span class="token operator">=</span> <span class="token number">0XFFFFFFFF</span><span class="token punctuation">;</span>CCM<span class="token operator">-></span>CCGR5 <span class="token operator">=</span> <span class="token number">0XFFFFFFFF</span><span class="token punctuation">;</span>CCM<span class="token operator">-></span>CCGR6 <span class="token operator">=</span> <span class="token number">0XFFFFFFFF</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * @description: 初始化LED对应的GPIO * @param : 无 * @return : 无 */</span><span class="token keyword">void</span> <span class="token function">led_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* 1、初始化IO复用 */</span>IOMUX_SW_MUX<span class="token operator">-></span>GPIO1_IO03 <span class="token operator">=</span> <span class="token number">0X5</span><span class="token punctuation">;</span><span class="token comment">/* 复用为GPIO1_IO03 */</span><span class="token comment">/* 2、配置GPIO1_IO03的IO属性 *bit 16:0 HYS关闭 *bit [15:14]: 00 默认下拉     *bit [13]: 0 kepper功能     *bit [12]: 1 pull/keeper使能     *bit [11]: 0 关闭开路输出     *bit [7:6]: 10 速度100Mhz     *bit [5:3]: 110 R0/6驱动能力     *bit [0]: 0 低转换率     */</span>    IOMUX_SW_PAD<span class="token operator">-></span>GPIO1_IO03 <span class="token operator">=</span> <span class="token number">0X10B0</span><span class="token punctuation">;</span><span class="token comment">/* 3、初始化GPIO */</span>GPIO1<span class="token operator">-></span>GDIR <span class="token operator">=</span> <span class="token number">0X0000008</span><span class="token punctuation">;</span><span class="token comment">/* GPIO1_IO03设置为输出 */</span><span class="token comment">/* 4、设置GPIO1_IO03输出低电平，打开LED0 */</span>GPIO1<span class="token operator">-></span>DR <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * @description: 打开LED灯 * @param : 无 * @return : 无 */</span><span class="token keyword">void</span> <span class="token function">led_on</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* 将GPIO1_DR的bit3清零 */</span>GPIO1<span class="token operator">-></span>DR <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">/* * @description: 关闭LED灯 * @param : 无 * @return : 无 */</span><span class="token keyword">void</span> <span class="token function">led_off</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* 将GPIO1_DR的bit3置1 */</span>GPIO1<span class="token operator">-></span>DR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">/* * @description: 短时间延时函数 * @param - n: 要延时循环次数(空操作循环次数，模式延时) * @return : 无 */</span><span class="token keyword">void</span> <span class="token function">delay_short</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * @description: 延时函数,在396Mhz的主频下 *     延时时间大约为1ms * @param - n: 要延时的ms数 * @return : 无 */</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">delay_short</span><span class="token punctuation">(</span><span class="token number">0x7ff</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * @description: mian函数 * @param : 无 * @return : 无 */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">clk_enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 使能所有的时钟 */</span><span class="token function">led_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 初始化led */</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">/* 死循环 */</span><span class="token punctuation">&#123;</span><span class="token function">led_off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 关闭LED */</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 延时500ms */</span><span class="token function">led_on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 打开LED */</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 延时500ms */</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以及寄存器表</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;*  * 外设寄存器组的基地址  *&#x2F;#define CCM_BASE(0X020C4000)#define CCM_ANALOG_BASE(0X020C8000)#define IOMUX_SW_MUX_BASE(0X020E0014)#define IOMUX_SW_PAD_BASE(0X020E0204)#define GPIO1_BASE                  (0x0209C000)#define GPIO2_BASE                  (0x020A0000)#define GPIO3_BASE                  (0x020A4000)#define GPIO4_BASE                  (0x020A8000)#define GPIO5_BASE                  (0x020AC000)&#x2F;*  * CCM寄存器结构体定义，分为CCM和CCM_ANALOG  *&#x2F;typedef struct &#123;volatile unsigned int CCR;volatile unsigned int CCDR;volatile unsigned int CSR;volatile unsigned int CCSR;volatile unsigned int CACRR;volatile unsigned int CBCDR;volatile unsigned int CBCMR;volatile unsigned int CSCMR1;volatile unsigned int CSCMR2;volatile unsigned int CSCDR1;volatile unsigned int CS1CDR;volatile unsigned int CS2CDR;volatile unsigned int CDCDR;volatile unsigned int CHSCCDR;volatile unsigned int CSCDR2;volatile unsigned int CSCDR3;volatile unsigned int RESERVED_1[2];volatile unsigned int CDHIPR;  volatile unsigned int RESERVED_2[2];volatile unsigned int CLPCR;volatile unsigned int CISR;volatile unsigned int CIMR;volatile unsigned int CCOSR;volatile unsigned int CGPR;volatile unsigned int CCGR0;volatile unsigned int CCGR1;volatile unsigned int CCGR2;volatile unsigned int CCGR3;volatile unsigned int CCGR4;volatile unsigned int CCGR5;volatile unsigned int CCGR6;volatile unsigned int RESERVED_3[1];volatile unsigned int CMEOR;&#125; CCM_Type; typedef struct &#123;volatile unsigned int PLL_ARM;volatile unsigned int PLL_ARM_SET;volatile unsigned int PLL_ARM_CLR;volatile unsigned int PLL_ARM_TOG;volatile unsigned int PLL_USB1;volatile unsigned int PLL_USB1_SET;volatile unsigned int PLL_USB1_CLR;volatile unsigned int PLL_USB1_TOG;volatile unsigned int PLL_USB2;volatile unsigned int PLL_USB2_SET;volatile unsigned int PLL_USB2_CLR;volatile unsigned int PLL_USB2_TOG;volatile unsigned int PLL_SYS;volatile unsigned int PLL_SYS_SET;volatile unsigned int PLL_SYS_CLR;volatile unsigned int PLL_SYS_TOG;volatile unsigned int PLL_SYS_SS;volatile unsigned int RESERVED_1[3];volatile unsigned int PLL_SYS_NUM;volatile unsigned int RESERVED_2[3];volatile unsigned int PLL_SYS_DENOM; volatile unsigned int RESERVED_3[3];volatile unsigned int PLL_AUDIO;volatile unsigned int PLL_AUDIO_SET;volatile unsigned int PLL_AUDIO_CLR;volatile unsigned int PLL_AUDIO_TOG;volatile unsigned int PLL_AUDIO_DENOM;volatile unsigned int RESERVED_4[3];volatile unsigned int PLL_VIDEO;volatile unsigned int PLL_VIDEO_SET;volatile unsigned int PLL_VIDEO_CLR;volatile unsigned int PLL_VIDEO_TOG;volatile unsigned int PLL_VIDEO_NUM;volatile unsigned int RESERVED_5[3];volatile unsigned int PLL_VIDEO_DENOM;volatile unsigned int RESERVED_6[7];volatile unsigned int PLL_ENET;volatile unsigned int PLL_ENET_SET;volatile unsigned int PLL_ENET_CLR;volatile unsigned int PLL_ENET_TOG;volatile unsigned int PFD_480;volatile unsigned int PFD_480_SET;volatile unsigned int PFD_480_CLR;volatile unsigned int PFD_480_TOG;volatile unsigned int PFD_528;volatile unsigned int PFD_528_SET;volatile unsigned int PFD_528_CLR;volatile unsigned int PFD_528_TOG;volatile unsigned int RESERVED_7[16];volatile unsigned int MISC0;volatile unsigned int MISC0_SET;volatile unsigned int MISC0_CLR;volatile unsigned int MISC0_TOG;volatile unsigned int MISC1;volatile unsigned int MISC1_SET;volatile unsigned int MISC1_CLR;volatile unsigned int MISC1_TOG;volatile unsigned int MISC2;volatile unsigned int MISC2_SET;volatile unsigned int MISC2_CLR;volatile unsigned int MISC2_TOG;&#125; CCM_ANALOG_Type; &#x2F;*  * IOMUX寄存器组 *&#x2F;typedef struct &#123;volatile unsigned int BOOT_MODE0;volatile unsigned int BOOT_MODE1;volatile unsigned int SNVS_TAMPER0;volatile unsigned int SNVS_TAMPER1;volatile unsigned int SNVS_TAMPER2;volatile unsigned int SNVS_TAMPER3;volatile unsigned int SNVS_TAMPER4;volatile unsigned int SNVS_TAMPER5;volatile unsigned int SNVS_TAMPER6;volatile unsigned int SNVS_TAMPER7;volatile unsigned int SNVS_TAMPER8;volatile unsigned int SNVS_TAMPER9;volatile unsigned int JTAG_MOD;volatile unsigned int JTAG_TMS;volatile unsigned int JTAG_TDO;volatile unsigned int JTAG_TDI;volatile unsigned int JTAG_TCK;volatile unsigned int JTAG_TRST_B;volatile unsigned int GPIO1_IO00;volatile unsigned int GPIO1_IO01;volatile unsigned int GPIO1_IO02;volatile unsigned int GPIO1_IO03;volatile unsigned int GPIO1_IO04;volatile unsigned int GPIO1_IO05;volatile unsigned int GPIO1_IO06;volatile unsigned int GPIO1_IO07;volatile unsigned int GPIO1_IO08;volatile unsigned int GPIO1_IO09;volatile unsigned int UART1_TX_DATA;volatile unsigned int UART1_RX_DATA;volatile unsigned int UART1_CTS_B;volatile unsigned int UART1_RTS_B;volatile unsigned int UART2_TX_DATA;volatile unsigned int UART2_RX_DATA;volatile unsigned int UART2_CTS_B;volatile unsigned int UART2_RTS_B;volatile unsigned int UART3_TX_DATA;volatile unsigned int UART3_RX_DATA;volatile unsigned int UART3_CTS_B;volatile unsigned int UART3_RTS_B;volatile unsigned int UART4_TX_DATA;volatile unsigned int UART4_RX_DATA;volatile unsigned int UART5_TX_DATA;volatile unsigned int UART5_RX_DATA;volatile unsigned int ENET1_RX_DATA0;volatile unsigned int ENET1_RX_DATA1;volatile unsigned int ENET1_RX_EN;volatile unsigned int ENET1_TX_DATA0;volatile unsigned int ENET1_TX_DATA1;volatile unsigned int ENET1_TX_EN;volatile unsigned int ENET1_TX_CLK;volatile unsigned int ENET1_RX_ER;volatile unsigned int ENET2_RX_DATA0;volatile unsigned int ENET2_RX_DATA1;volatile unsigned int ENET2_RX_EN;volatile unsigned int ENET2_TX_DATA0;volatile unsigned int ENET2_TX_DATA1;volatile unsigned int ENET2_TX_EN;volatile unsigned int ENET2_TX_CLK;volatile unsigned int ENET2_RX_ER;volatile unsigned int LCD_CLK;volatile unsigned int LCD_ENABLE;volatile unsigned int LCD_HSYNC;volatile unsigned int LCD_VSYNC;volatile unsigned int LCD_RESET;volatile unsigned int LCD_DATA00;volatile unsigned int LCD_DATA01;volatile unsigned int LCD_DATA02;volatile unsigned int LCD_DATA03;volatile unsigned int LCD_DATA04;volatile unsigned int LCD_DATA05;volatile unsigned int LCD_DATA06;volatile unsigned int LCD_DATA07;volatile unsigned int LCD_DATA08;volatile unsigned int LCD_DATA09;volatile unsigned int LCD_DATA10;volatile unsigned int LCD_DATA11;volatile unsigned int LCD_DATA12;volatile unsigned int LCD_DATA13;volatile unsigned int LCD_DATA14;volatile unsigned int LCD_DATA15;volatile unsigned int LCD_DATA16;volatile unsigned int LCD_DATA17;volatile unsigned int LCD_DATA18;volatile unsigned int LCD_DATA19;volatile unsigned int LCD_DATA20;volatile unsigned int LCD_DATA21;volatile unsigned int LCD_DATA22;volatile unsigned int LCD_DATA23;volatile unsigned int NAND_RE_B;volatile unsigned int NAND_WE_B;volatile unsigned int NAND_DATA00;volatile unsigned int NAND_DATA01;volatile unsigned int NAND_DATA02;volatile unsigned int NAND_DATA03;volatile unsigned int NAND_DATA04;volatile unsigned int NAND_DATA05;volatile unsigned int NAND_DATA06;volatile unsigned int NAND_DATA07;volatile unsigned int NAND_ALE;volatile unsigned int NAND_WP_B;volatile unsigned int NAND_READY_B;volatile unsigned int NAND_CE0_B;volatile unsigned int NAND_CE1_B;volatile unsigned int NAND_CLE;volatile unsigned int NAND_DQS;volatile unsigned int SD1_CMD;volatile unsigned int SD1_CLK;volatile unsigned int SD1_DATA0;volatile unsigned int SD1_DATA1;volatile unsigned int SD1_DATA2;volatile unsigned int SD1_DATA3;volatile unsigned int CSI_MCLK;volatile unsigned int CSI_PIXCLK;volatile unsigned int CSI_VSYNC;volatile unsigned int CSI_HSYNC;volatile unsigned int CSI_DATA00;volatile unsigned int CSI_DATA01;volatile unsigned int CSI_DATA02;volatile unsigned int CSI_DATA03;volatile unsigned int CSI_DATA04;volatile unsigned int CSI_DATA05;volatile unsigned int CSI_DATA06;volatile unsigned int CSI_DATA07;&#125;IOMUX_SW_MUX_Type;typedef struct &#123;volatile unsigned int DRAM_ADDR00;volatile unsigned int DRAM_ADDR01;volatile unsigned int DRAM_ADDR02;volatile unsigned int DRAM_ADDR03;volatile unsigned int DRAM_ADDR04;volatile unsigned int DRAM_ADDR05;volatile unsigned int DRAM_ADDR06;volatile unsigned int DRAM_ADDR07;volatile unsigned int DRAM_ADDR08;volatile unsigned int DRAM_ADDR09;volatile unsigned int DRAM_ADDR10;volatile unsigned int DRAM_ADDR11;volatile unsigned int DRAM_ADDR12;volatile unsigned int DRAM_ADDR13;volatile unsigned int DRAM_ADDR14;volatile unsigned int DRAM_ADDR15;volatile unsigned int DRAM_DQM0;volatile unsigned int DRAM_DQM1;volatile unsigned int DRAM_RAS_B;volatile unsigned int DRAM_CAS_B;volatile unsigned int DRAM_CS0_B;volatile unsigned int DRAM_CS1_B;volatile unsigned int DRAM_SDWE_B;volatile unsigned int DRAM_ODT0;volatile unsigned int DRAM_ODT1;volatile unsigned int DRAM_SDBA0;volatile unsigned int DRAM_SDBA1;volatile unsigned int DRAM_SDBA2;volatile unsigned int DRAM_SDCKE0;volatile unsigned int DRAM_SDCKE1;volatile unsigned int DRAM_SDCLK0_P;volatile unsigned int DRAM_SDQS0_P;volatile unsigned int DRAM_SDQS1_P;volatile unsigned int DRAM_RESET;volatile unsigned int TEST_MODE;volatile unsigned int POR_B;volatile unsigned int ONOFF;volatile unsigned int SNVS_PMIC_ON_REQ;volatile unsigned int CCM_PMIC_STBY_REQ;volatile unsigned int BOOT_MODE0;volatile unsigned int BOOT_MODE1;volatile unsigned int SNVS_TAMPER0;volatile unsigned int SNVS_TAMPER1;volatile unsigned int SNVS_TAMPER2;volatile unsigned int SNVS_TAMPER3;volatile unsigned int SNVS_TAMPER4;volatile unsigned int SNVS_TAMPER5;volatile unsigned int SNVS_TAMPER6;volatile unsigned int SNVS_TAMPER7;volatile unsigned int SNVS_TAMPER8;volatile unsigned int SNVS_TAMPER9;volatile unsigned int JTAG_MOD;volatile unsigned int JTAG_TMS;volatile unsigned int JTAG_TDO;volatile unsigned int JTAG_TDI;volatile unsigned int JTAG_TCK;volatile unsigned int JTAG_TRST_B;volatile unsigned int GPIO1_IO00;volatile unsigned int GPIO1_IO01;volatile unsigned int GPIO1_IO02;volatile unsigned int GPIO1_IO03;volatile unsigned int GPIO1_IO04;volatile unsigned int GPIO1_IO05;volatile unsigned int GPIO1_IO06;volatile unsigned int GPIO1_IO07;volatile unsigned int GPIO1_IO08;volatile unsigned int GPIO1_IO09;volatile unsigned int UART1_TX_DATA;volatile unsigned int UART1_RX_DATA;volatile unsigned int UART1_CTS_B;volatile unsigned int UART1_RTS_B;volatile unsigned int UART2_TX_DATA;volatile unsigned int UART2_RX_DATA;volatile unsigned int UART2_CTS_B;volatile unsigned int UART2_RTS_B;volatile unsigned int UART3_TX_DATA;volatile unsigned int UART3_RX_DATA;volatile unsigned int UART3_CTS_B;volatile unsigned int UART3_RTS_B;volatile unsigned int UART4_TX_DATA;volatile unsigned int UART4_RX_DATA;volatile unsigned int UART5_TX_DATA;volatile unsigned int UART5_RX_DATA;volatile unsigned int ENET1_RX_DATA0;volatile unsigned int ENET1_RX_DATA1;volatile unsigned int ENET1_RX_EN;volatile unsigned int ENET1_TX_DATA0;volatile unsigned int ENET1_TX_DATA1;volatile unsigned int ENET1_TX_EN;volatile unsigned int ENET1_TX_CLK;volatile unsigned int ENET1_RX_ER;volatile unsigned int ENET2_RX_DATA0;volatile unsigned int ENET2_RX_DATA1;volatile unsigned int ENET2_RX_EN;volatile unsigned int ENET2_TX_DATA0;volatile unsigned int ENET2_TX_DATA1;volatile unsigned int ENET2_TX_EN;volatile unsigned int ENET2_TX_CLK;volatile unsigned int ENET2_RX_ER;volatile unsigned int LCD_CLK;volatile unsigned int LCD_ENABLE;volatile unsigned int LCD_HSYNC;volatile unsigned int LCD_VSYNC;volatile unsigned int LCD_RESET;volatile unsigned int LCD_DATA00;volatile unsigned int LCD_DATA01;volatile unsigned int LCD_DATA02;volatile unsigned int LCD_DATA03;volatile unsigned int LCD_DATA04;volatile unsigned int LCD_DATA05;volatile unsigned int LCD_DATA06;volatile unsigned int LCD_DATA07;volatile unsigned int LCD_DATA08;volatile unsigned int LCD_DATA09;volatile unsigned int LCD_DATA10;volatile unsigned int LCD_DATA11;volatile unsigned int LCD_DATA12;volatile unsigned int LCD_DATA13;volatile unsigned int LCD_DATA14;volatile unsigned int LCD_DATA15;volatile unsigned int LCD_DATA16;volatile unsigned int LCD_DATA17;volatile unsigned int LCD_DATA18;volatile unsigned int LCD_DATA19;volatile unsigned int LCD_DATA20;volatile unsigned int LCD_DATA21;volatile unsigned int LCD_DATA22;volatile unsigned int LCD_DATA23;volatile unsigned int NAND_RE_B;volatile unsigned int NAND_WE_B;volatile unsigned int NAND_DATA00;volatile unsigned int NAND_DATA01;volatile unsigned int NAND_DATA02;volatile unsigned int NAND_DATA03;volatile unsigned int NAND_DATA04;volatile unsigned int NAND_DATA05;volatile unsigned int NAND_DATA06;volatile unsigned int NAND_DATA07;volatile unsigned int NAND_ALE;volatile unsigned int NAND_WP_B;volatile unsigned int NAND_READY_B;volatile unsigned int NAND_CE0_B;volatile unsigned int NAND_CE1_B;volatile unsigned int NAND_CLE;volatile unsigned int NAND_DQS;volatile unsigned int SD1_CMD;volatile unsigned int SD1_CLK;volatile unsigned int SD1_DATA0;volatile unsigned int SD1_DATA1;volatile unsigned int SD1_DATA2;volatile unsigned int SD1_DATA3;volatile unsigned int CSI_MCLK;volatile unsigned int CSI_PIXCLK;volatile unsigned int CSI_VSYNC;volatile unsigned int CSI_HSYNC;volatile unsigned int CSI_DATA00;volatile unsigned int CSI_DATA01;volatile unsigned int CSI_DATA02;volatile unsigned int CSI_DATA03;volatile unsigned int CSI_DATA04;volatile unsigned int CSI_DATA05;volatile unsigned int CSI_DATA06;volatile unsigned int CSI_DATA07;volatile unsigned int GRP_ADDDS;volatile unsigned int GRP_DDRMODE_CTL;volatile unsigned int GRP_B0DS;volatile unsigned int GRP_DDRPK;volatile unsigned int GRP_CTLDS;volatile unsigned int GRP_B1DS;volatile unsigned int GRP_DDRHYS;volatile unsigned int GRP_DDRPKE;volatile unsigned int GRP_DDRMODE;volatile unsigned int GRP_DDR_TYPE;&#125;IOMUX_SW_PAD_Type;&#x2F;*  * GPIO寄存器结构体 *&#x2F;typedef struct &#123;volatile unsigned int DR;volatile unsigned int GDIR; volatile unsigned int PSR;volatile unsigned int ICR1; volatile unsigned int ICR2;  volatile unsigned int IMR; volatile unsigned int ISR;volatile unsigned int EDGE_SEL;  &#125;GPIO_Type;&#x2F;*  * 外设指针  *&#x2F;#define CCM((CCM_Type *)CCM_BASE)#define CCM_ANALOG((CCM_ANALOG_Type *)CCM_ANALOG_BASE)#define IOMUX_SW_MUX((IOMUX_SW_MUX_Type *)IOMUX_SW_MUX_BASE)#define IOMUX_SW_PAD((IOMUX_SW_PAD_Type *)IOMUX_SW_PAD_BASE)#define GPIO1((GPIO_Type *)GPIO1_BASE)#define GPIO2((GPIO_Type *)GPIO2_BASE)#define GPIO3((GPIO_Type *)GPIO3_BASE)#define GPIO4((GPIO_Type *)GPIO4_BASE)#define GPIO5((GPIO_Type *)GPIO5_BASE)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux裸机点灯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wyt_IIC</title>
      <link href="/2023/08/31/Wyt-IIC/"/>
      <url>/2023/08/31/Wyt-IIC/</url>
      
        <content type="html"><![CDATA[<h1 id="IIC学习"><a href="#IIC学习" class="headerlink" title="IIC学习"></a>IIC学习</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SDA_IN</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>GPIOA<span class="token operator">-></span>CRL<span class="token operator">&amp;=</span><span class="token number">0X0FFFFFFF</span><span class="token punctuation">;</span>GPIOA<span class="token operator">-></span>CRL<span class="token operator">|=</span><span class="token punctuation">(</span>u32<span class="token punctuation">)</span><span class="token number">8</span><span class="token operator">&lt;&lt;</span><span class="token number">28</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SDA_OUT</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>GPIOA<span class="token operator">-></span>CRL<span class="token operator">&amp;=</span><span class="token number">0X0FFFFFFF</span><span class="token punctuation">;</span>GPIOA<span class="token operator">-></span>CRL<span class="token operator">|=</span><span class="token punctuation">(</span>u32<span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">&lt;&lt;</span><span class="token number">28</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的意思, 其实就是切换PA_7的模式, 控制模式的寄存器叫CRL跟CRH, </p><p>CRL(引脚0-7):</p><p><img src="/2023/08/31/Wyt-IIC/image-20230831211014924.png" alt="image-20230831211014924"></p><p>CRH(引脚8-16):    </p><p><img src="/2023/08/31/Wyt-IIC/image-20230831210836618.png" alt="image-20230831210836618"></p><p>​    也就是每个引脚由4个位控制，</p><p>GPIOA-&gt;CRL&amp;=0X0FFFFFFF;    既然要配置，那么就要先清零，所以第一步写入：GPIOB-&gt;CRL&amp;=0x0FFFFFFF;将寄存器设置为0000 1111 1111 1111  1111 1111 1111 1111；</p><p>GPIOA-&gt;CRL|=(u32)8&lt;&lt;28;    第一步配置输入：图中可得输入格式写入00；第二步配置上拉：图中可得上拉格式写入10（下拉也是10），所以写入的四位就是10和00，对应就是1000，16进制就是8，所以写入GPIOB-&gt;CRL|=0x80000000;配置完成。与移位的操作是一样的意思。</p><p>OUT 也一样。</p><p>Wyt_IIC.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/******************************************************/</span><span class="token comment">/* 王永泰的IIC文件  ---------- 适用于Stm32F103系列  */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"iic.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token comment">// IIC初始化</span><span class="token keyword">void</span> <span class="token function">Wyt_IIC_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span><span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使能GPIOB时钟</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_6 <span class="token operator">|</span> GPIO_Pin_7<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span> <span class="token comment">// 推挽输出</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_6 <span class="token operator">|</span> GPIO_Pin_7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// PB6,PB7 输出高</span><span class="token punctuation">&#125;</span><span class="token comment">// 起始信号  ->    SCL and SDA都为高时，SDA由高变低。即为开始信号，注意发送信号时SCL是高电平，发送数据时SCL时低电平。</span><span class="token keyword">void</span> <span class="token function">Wyt_IIC_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Wyt_SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将PB7 改为输出模式， 和 init 里的配置是一样的，只不过是用了寄存器来做。</span>Wyt_IIC_SCL <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 先将时钟线拉高。</span>Wyt_IIC_SDA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 数据线也拉高。</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 由于IIC 时序 大概在400KHZ ，所以一个周期为2.5us，高电平时间为1.25us，此时4us 所以此速率时小于400khz的。</span><span class="token comment">// 之后 时钟线和数据线都为高电平时，现在数据线 由 高电平 -> 低电平， 为开始信号，so</span>Wyt_IIC_SDA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 发送开始信号。</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Wyt_IIC_SCL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 钳住IIC，通信过程中，只有在时钟线拉低的情况下，数据线才能被操作，所以拉低。</span><span class="token punctuation">&#125;</span><span class="token comment">// 停止信号  ->    SCL and SDA都为高时，SDA由低变高。即为结束信号，注意发送信号时SCL是高电平，发送数据时SCL时低电平。</span><span class="token keyword">void</span> <span class="token function">Wyt_IIC_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Wyt_SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将PB7 改为输出模式， 和 init 里的配置是一样的，只不过是用了寄存器来做。</span>Wyt_IIC_SCL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 先将时钟线拉低。</span>Wyt_IIC_SDA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 数据线也拉高。</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 由于IIC 时序 大概在400KHZ ，所以一个周期为2.5us，高电平时间为1.25us，此时4us 所以此速率时小于400khz的。</span>Wyt_IIC_SCL <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 先将时钟线拉高。</span>Wyt_IIC_SDA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 数据线也拉高。</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 由于IIC 时序 大概在400KHZ ，所以一个周期为2.5us，高电平时间为1.25us，此时4us 所以此速率时小于400khz的。</span><span class="token punctuation">&#125;</span><span class="token comment">// IIC等待应答信号  ->  SDA为输入模式，</span>u8 <span class="token function">Wyt_IIC_Wait_Ask</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>u8 askTimecount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 等待 应答信号计数</span><span class="token function">Wyt_SDA_IN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待信号必然是接受了，</span>Wyt_IIC_SDA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// SDA拉高，</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Wyt_IIC_SCL <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// SCL拉高，</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>Wyt_IIC_READ_SDA<span class="token punctuation">)</span> <span class="token comment">// 等待IIC_SDA变为高电平</span><span class="token punctuation">&#123;</span>askTimecount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>askTimecount <span class="token operator">></span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">IIC_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送停止信号， 表明接下来没有数据要传输了，本次传输结束。</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 没有应答</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Wyt_IIC_SCL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 拉低时钟线。</span><span class="token punctuation">&#125;</span><span class="token comment">// 发送应答信号，</span><span class="token keyword">void</span> <span class="token function">Wyt_IIC_Not_ack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Wyt_IIC_SCL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// SCL为低</span><span class="token function">Wyt_SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Wyt_IIC_SDA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 此时SDA为低，不应答。</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Wyt_IIC_SCL <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Wyt_IIC_SCL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Wyt_IIC_ack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Wyt_IIC_SCL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// SCL 为低。</span><span class="token function">Wyt_SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Wyt_IIC_SDA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 此时SDA 为高则 应答。</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Wyt_IIC_SCL <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Wyt_IIC_SCL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Wyt_IIC_SendByte</span><span class="token punctuation">(</span>u8 byte<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>u8 t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">Wyt_SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Wyt_IIC_SCL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 开始传输数据</span><span class="token keyword">for</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Wyt_IIC_SDA <span class="token operator">=</span> <span class="token punctuation">(</span>byte <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// 得到最高位。</span>byte <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 向左移一位，</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Wyt_IIC_SCL <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Wyt_IIC_SCL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// IIC读取一个字节</span>u8 <span class="token function">Wyt_IIC_ReadByte</span><span class="token punctuation">(</span>u8 ack<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>u8 i<span class="token punctuation">,</span> receive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">Wyt_SDA_IN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Wyt_IIC_SCL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Wyt_IIC_SCL <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>receive <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Wyt_IIC_READ_SDA<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>receive<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ack<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Wyt_IIC_Not_ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">Wyt_IIC_ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> receive<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Wyt_IIC.h</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/******************************************************/</span><span class="token comment">/* 王永泰的IIC头文件  ---------- 适用于Stm32F103系列  */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__IIC_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__IIC_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token comment">// 配置IIC的引脚输入输出模式。 和初始化 那一步的操作一样， 只不过是用寄存器来操作，快。</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Wyt_SDA_IN</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>                </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token punctuation">&#123;</span>                               </span><span class="token punctuation">\</span>        <span class="token expression">GPIOB<span class="token operator">-></span>CRL <span class="token operator">&amp;=</span> <span class="token number">0X0FFFFFFF</span><span class="token punctuation">;</span>   </span><span class="token punctuation">\</span>        <span class="token expression">GPIOB<span class="token operator">-></span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>u32<span class="token punctuation">)</span><span class="token number">8</span> <span class="token operator">&lt;&lt;</span> <span class="token number">28</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token punctuation">&#125;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Wyt_SDA_OUT</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>               </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token punctuation">&#123;</span>                               </span><span class="token punctuation">\</span>        <span class="token expression">GPIOB<span class="token operator">-></span>CRL <span class="token operator">&amp;=</span> <span class="token number">0X0FFFFFFF</span><span class="token punctuation">;</span>   </span><span class="token punctuation">\</span>        <span class="token expression">GPIOB<span class="token operator">-></span>CRL <span class="token operator">|=</span> <span class="token punctuation">(</span>u32<span class="token punctuation">)</span><span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token number">28</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token punctuation">&#125;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Wyt_IIC_SDA</span> <span class="token expression"><span class="token function">PBout</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Wyt_IIC_SCL</span> <span class="token expression"><span class="token function">PBout</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Wyt_IIC_READ_SDA</span> <span class="token expression"><span class="token function">PBin</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span></span></span><span class="token keyword">void</span> <span class="token function">Wyt_IIC_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*  IIC引脚初始化  */</span><span class="token keyword">void</span> <span class="token function">Wyt_IIC_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">/* IIC起始信号*/</span><span class="token keyword">void</span> <span class="token function">Wyt_IIC_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*IIC终止信号*/</span>u8 <span class="token function">Wyt_IIC_Wait_Ask</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/* IIC等待应答*/</span><span class="token keyword">void</span> <span class="token function">Wyt_IIC_ack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">/* IIC发送应答*/</span><span class="token keyword">void</span> <span class="token function">Wyt_IIC_Not_ack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/*    IIC 不发送应答*/</span><span class="token keyword">void</span> <span class="token function">Wyt_IIC_SendByte</span><span class="token punctuation">(</span>u8 byte<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*IIC发送一个byte*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> IIC学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RAM ROM EPROM EEPROM FLASH ROM的区别</title>
      <link href="/2023/08/12/RAM-ROM-EPROM-EEPROM-FLASH-ROM%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/08/12/RAM-ROM-EPROM-EEPROM-FLASH-ROM%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="RAM-ROM-EPROM-EEPROM-FLASH-ROM的区别"><a href="#RAM-ROM-EPROM-EEPROM-FLASH-ROM的区别" class="headerlink" title="RAM,ROM,EPROM,EEPROM,FLASH ROM的区别"></a>RAM,ROM,EPROM,EEPROM,FLASH ROM的区别</h3><p>1、RAM指的是“随机存取存储器”，即Random Access Memory。它可以随时读写，而且速度很快，缺点是断电后信息丢失。<br>2、ROM指的是“只读存储器”，即Read-Only Memory，不能进行修改。<br>3、PROM指的是“可编程只读存储器”既Programmable Red-Only Memory。这样的产品只允许写入一次。<br>4、EPROM指的是“可擦写可编程只读存储器”，即Erasable Programmable Read-Only Memory。 它的特点是具有可擦除功能，擦除后即可进行再编程，但是缺点是擦除需要使用紫外线照射一定的时间。<br>5、EEPROM指的是“电可擦除可编程只读存储器”，即Electrically Erasable Programmable Read-Only Memory。它的最大优点是可直接用电信号擦除，也可用电信号写入。</p><p>1.在计算机的发展初期,<a href="https://so.csdn.net/so/search?q=BIOS&spm=1001.2101.3001.7020">BIOS</a>都存放在ROM(Read Only Memory,只读存储器)中。ROM内部的资料是在ROM的制造工序中,在工厂里用特殊的方法被烧录进去的,其中的内容只能读不能改,一旦烧录进去,用户只能验证写入的资料是否正确,不能再作任何修改。如果发现资料有任何错误,则只有舍弃不用,重新订做一份。ROM是在生产线上生产的,由于成本高,一般只用在大批量应用的场合。<br>2<br>2.由于ROM制造和升级的不便,后来人们发明了PROM(Programmable ROM,可编程ROM)。最初从工厂中制作完成的PROM内部并没有资料,用户可以用专用的编程器将自己的资料写入,但是这种机会只有一次,一旦写入后也无法修改,若是出了错误,已写入的芯片只能报废。PROM的特性和ROM相同,但是其成本比ROM高,而且写入资料的速度比ROM的量产速度要慢,一般只适用于少量需求的场合或是ROM量产前的验证。<br>3<br>3.EPROM(Erasable Programmable ROM,可擦除可编程ROM)芯片可重复擦除和写入,解决了PROM芯片只能写入一次的弊端。EPROM芯片有一个很明显的特征,在其正面的陶瓷封装上,开有一个玻璃窗口,透过该窗口,可以看到其内部的集成电路,紫外线透过该孔照射内部芯片就可以擦除其内的数据,完成芯片擦除的操作要用到EPROM擦除器。EPROM内资料的写入要用专用的编程器,并且往芯片中写内容时必须要加一定的编程电压(VPP=12—24V,随不同的芯片型号而定)。EPROM的型号是以27开头的,如27C020(8*256K)是一片2M Bits容量的EPROM芯片。EPROM芯片在写入资料后,还要以不透光的贴纸或胶布把窗口封住,以免受到周围的紫外线照射而使资料受损。<br>4<br>4.鉴于EPROM操作的不便,后来出的主板上的BIOS ROM芯片大部分都采用EPROM(Electrically Erasable Programmable ROM,电可擦除可编程ROM)。EPROM的擦除不需要借助于其它设备,它是以电子信号来修改其内容的,而且是以Byte为最小修改单位,不必将资料全部洗掉才能写入,彻底摆脱了EPROM Eraser和编程器的束缚。EPROM在写入数据时,仍要利用一定的编程电压,此时,只需用厂商提供的专用刷新程序就可以轻而易举地改写内容,所以,它属于双电压芯片。借助于EPROM芯片的双电压特性,可以使BIOS具有良好的防毒功能,在升级时,把跳线开关打至“ON”的位置,即给芯片加上相应的编程电压,就可以方便地升级;平时使用时,则把跳线开关打至“OFF”的位置,防止CIH类的病毒对BIOS芯片的非法修改。所以,至今仍有不少主板采用EPROM作为BIOS芯片并作为自己主板的一大特色。<br>5<br>5.FLASH ROM则属于真正的单电压芯片,在使用上很类似EPROM,因此,有些书籍上便把FLASH ROM作为EPROM的一种。事实上,二者还是有差别的。FLASH ROM在擦除时,也要执行专用的刷新程序,但是在删除资料时,并非以Byte为基本单位,而是以Sector(又称Block)为最小单位,Sector的大小随厂商的不同而有所不同;只有在写入时,才以Byte为最小单位写入;FLASH ROM芯片的读和写操作都是在单电压下进行,不需跳线,只利用专用程序即可方便地修改其内容;FLASH ROM的存储容量普遍大于EPROM,约为512K到至8M KBit,由于大批量生产,价格也比较合适,很适合用来存放程序码,近年来已逐渐取代了EPROM,广泛用于主板的BIOS ROM,也是CIH攻击的主要目标# 欢迎使用Markdown编辑器</p>]]></content>
      
      
      
        <tags>
            
            <tag> 各种芯片的类型区别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导航车进展以及思路</title>
      <link href="/2023/07/07/%E5%AF%BC%E8%88%AA%E8%BD%A6%E8%BF%9B%E5%B1%95%E4%BB%A5%E5%8F%8A%E6%80%9D%E8%B7%AF/"/>
      <url>/2023/07/07/%E5%AF%BC%E8%88%AA%E8%BD%A6%E8%BF%9B%E5%B1%95%E4%BB%A5%E5%8F%8A%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>​    本以为挺简单的一个小车，到现在将近三个月了，最近一个月基本上没有更新博客。做个记录理一下思路。</p><h3 id="1-网络部分改动"><a href="#1-网络部分改动" class="headerlink" title="1.网络部分改动"></a>1.网络部分改动</h3><p>​    网络部分进行了重新调整，换了新的方法，放弃了之前的 “树莓派——阿里云——PC”模式，改为 “ PC——阿里云——PC”的模式，树莓派的算力实在是跟不上了，激光雷达，以及双目摄像头树莓派难以胜任，所以直接改用笔记本电脑，所以网络部分也要进行一个重新部署，但是索性代码移植性还可以，没怎么变动代码直接就可以运行。</p><p>用一个PC处理摄像头和雷达的数据直接将数据发送到控制器。控制电机舵机执行。</p><h3 id="2-控制部分改动"><a href="#2-控制部分改动" class="headerlink" title="2.控制部分改动"></a>2.控制部分改动</h3><p>​    控制部分也进行了大调整，将舵机和电机的控制分开了，改用PC发送信息分别控制舵机和电机去执行。又是一波大改动。</p><p>这几天基本上是将之前的所有代码全部重新写了一遍。</p><h4 id="导航车的控制思路："><a href="#导航车的控制思路：" class="headerlink" title="导航车的控制思路："></a>导航车的控制思路：</h4><p>​    该如何去进行控制？得到激光雷达数据怎么去用，这些问题都是第一次遇到，相关理论也没有学过。基本上是全靠想了。</p><p>如何控制先不管，现在还没到动的时候，激光雷达数据有了，极坐标笛卡尔坐标的图像也都有了，但是今天看了一天图像也没想出来怎么判断该往那个方向走，激光雷达现在看好像是只有测距的功能，该怎么去根据这个图像走现在还不知道。</p><h5 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h5><p>​    去找通路，也就是在激光雷达图像中看不到边界的那一块地方，那块有可能是一个通路，也就是前方没有障碍物，所以在图像看来是一块空白。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 导航车项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种名词解释</title>
      <link href="/2023/06/18/%E5%90%84%E7%A7%8D%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/"/>
      <url>/2023/06/18/%E5%90%84%E7%A7%8D%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<p>VCU （Vehicle Control Unit 整车控制器）</p><p>VCU是实现整车控制决策的核心电子控制单元，一般仅新能源汽车配备、传统燃油车无需该装置。</p><p> •  VCU通过采集油门踏板、挡位、刹车踏板等信号来判断驾驶员的驾驶意图；</p><p> •  通过监测车辆状态（车速、温度等）信息，由VCU判断处理后，向动力系统、动力电池系统发送车辆的运行状态控制指令，</p><p> •  控制车载附件电力系统的工作模式；</p><p> •  VCU具有整车系统故障诊断保护与存储功能</p><p> •  VCU的结构组成，共包括外壳、硬件电路、底层软件和应用层软件，硬件电路、底层软件和应用层软件是VCU的关键核心技术.</p><p> •  VCU硬件采用标准化核心模块电路（ 32位主处理器、电源、存储器、CAN ）和VCU专用电路（传感器采集等）设计</p><p> •  其中标准化核心模块电路可移植应用在MCU和BMS，平台化硬件将具有非常好的可移植性和扩展性</p><p> •  随着汽车级处理器技术的发展，VCU从基于16位向32位处理器芯片逐步过渡，32位已成为业界的主流产品</p><p> •  底层软件以AUTOSAR汽车软件开放式系统架构为标准，达到电子控制单元（ECU）开发共平台的发展目标，支持新能源汽车不同的控制系统；</p><p> •  模块化软件组件以软件复用为目标，以有效提高软件质量、缩短软件开发周期</p><p> •  驾驶员转矩解析、换挡规律、模式切换、转矩分配和故障诊断策略等是应用层的关键技术，对车辆动力性、经济性和可靠性有着重要影响</p><p><strong>BMS：</strong></p><p> •  电池包是新能源汽车核心能量源，为整车提供驱动电能</p><p> •  它主要通过金属材质的壳体包络构成电池包主体，模块化的结构设计实现了电芯的集成</p><p> •  过热管理设计与仿真优化电池包热管理性能</p><p> •  电器部件及线束实现了控制系统对电池的安全保护及连接路径</p><p> •  通过BMS实现对电芯的管理，以及与整车的通讯及信息交换</p><p> •  电池包组成如下图所示，包括电芯、模块、电气系统、热管理系统、箱体和BMS。BMS能够提高电池的利用率，防止电池出现过充电和过放电，延长电池的使用寿命，监控电池的状态</p><p> •  BMS是电池包最关键的零部件，与VCU类似，核心部分由硬件电路、底层软件和应用层软件组成</p><p> •  BMS硬件由主板（BCU）和从板（BMU）两部分组成，从版安装于模组内部，用于检测单体电压、电流和均衡控制；主板安装位置比较灵活，用于继电器控制、荷电状态值（SOC）估计和电气伤害保护等</p><p> •  BMU硬件部分完成电池单体电压和温度测量，并通过高可靠性的数据传输通道与BCU 模块进行指令及数据的双向传输</p><p> •  BCU 可选用基于汽车功能安全架构的32 位微处理器完成总电压采集、绝缘检测、继电器驱动及状态监测等功能</p><p> •  底层软件架构符合AUTOSAR标准，模块化开发容易实现扩展和移植，提高开发效率</p><p> •  应用层软件是BMS的控制核心，包括电池保护、电气伤害保护、故障诊断管理、热管理、继电器控制、从板控制、均衡控制、SOC估计和通讯管理等模块，应用层软件架构如图所示</p><p><strong>MCU:</strong></p><p> •  MCU是新能源汽车特有的核心功率电子单元，通过接收VCU的车辆行驶控制指令，控制电动机输出指定的扭矩和转速，驱动车辆行驶</p><p> •  实现把动力电池的直流电能转换为所需的高压交流电、并驱动电机本体输出机械能</p><p> •  MCU具有电机系统故障诊断保护和存储功能</p><p> •  MCU由外壳及冷却系统、功率电子单元、控制电路、底层软件和控制算法软件组成，</p><p> •  MCU硬件电路采用模块化、平台化设计理念（核心模块与VCU同平台），功率驱动部分采用多重诊断保护功能电路设计，功率回路部分采用汽车级IGBT模块并联技术、定制母线电容和集成母排设计；结构部分采用高防护等级、集成一体化液冷设计</p><p> •  与VCU类似，MCU底层软件以AUTOSAR开放式系统架构为标准，达到ECU开发共同平台的发展目标，模块化软件组件以软件复用为目标</p><p> •  用层软件按照功能设计一般可分为四个模块：状态控制、矢量算法、需求转矩计算和诊断模块。其中，矢量算法模块分为MTPA控制和弱磁控制。</p><p> •  MCU关键技术方案包括：基于32位高性能双核主处理器；汽车级并联IGBT技术，定制薄膜母线电容及集成化功率回路设计，基于AutoSAR架构平台软件及先进SVPWM PMSM控制算法；高防护等级壳体及集成一体化水冷散热设计。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 各种名词解释 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>和大于或等于k的最短子数组</title>
      <link href="/2023/06/09/%E5%92%8C%E5%A4%A7%E4%BA%8E%E6%88%96%E7%AD%89%E4%BA%8Ek%E7%9A%84%E6%9C%80%E7%9F%AD%E5%AD%90%E6%95%B0%E7%BB%84/"/>
      <url>/2023/06/09/%E5%92%8C%E5%A4%A7%E4%BA%8E%E6%88%96%E7%AD%89%E4%BA%8Ek%E7%9A%84%E6%9C%80%E7%9F%AD%E5%AD%90%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/06/09/%E5%92%8C%E5%A4%A7%E4%BA%8E%E6%88%96%E7%AD%89%E4%BA%8Ek%E7%9A%84%E6%9C%80%E7%9F%AD%E5%AD%90%E6%95%B0%E7%BB%84/image-20230609210603073.png" alt="image-20230609210603073"></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    int minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) &#123;         unsigned int sum &#x3D; 0;         unsigned short left &#x3D; 0, right &#x3D; 0;         int minlen &#x3D; 1e5;        for(right &#x3D; 0; right &lt; nums.size(); right++)&#123;            sum +&#x3D; nums[right];            while(left &lt;&#x3D; right &amp;&amp; sum &gt;&#x3D; target)&#123;                minlen &#x3D; min(minlen, right-left+1);                 sum -&#x3D;nums[left];                left++;            &#125;        &#125;        return minlen &#x3D;&#x3D; 1e5 ? 0 : minlen;            &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中和为0的3个数字</title>
      <link href="/2023/05/31/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%92%8C%E4%B8%BA0%E7%9A%843%E4%B8%AA%E6%95%B0%E5%AD%97/"/>
      <url>/2023/05/31/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%92%8C%E4%B8%BA0%E7%9A%843%E4%B8%AA%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p><img src="/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%92%8C%E4%B8%BA0%E7%9A%843%E4%B8%AA%E6%95%B0%E5%AD%97/image-20230531235318990.png"></p><p>注意参数值引用和地址引用，卡了半天才发现是这个月原因。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution&#123;public:    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt; &amp;nums)    &#123;        sort(nums.begin(), nums.end()); &#x2F;&#x2F; 先整体排序        vector&lt;vector&lt;int&gt;&gt; b;        int n &#x3D; nums.size();        if (n &gt;&#x3D; 3)&#123; &#x2F;&#x2F; 大于3 排序            int i &#x3D; 0;            while (i &lt; n - 2)            &#123;                twoSum(nums, i, b);                int temp &#x3D; nums[i];                while (i &lt; nums.size() &amp;&amp; nums[i] &#x3D;&#x3D; temp)                    ++i;            &#125;        &#125;        return b;    &#125;    void twoSum(vector&lt;int&gt; &amp;nums, int i, vector&lt;vector&lt;int&gt;&gt; &amp;result)    &#123;        int j &#x3D; i + 1;        int k &#x3D; nums.size() - 1;        while (j &lt; k)        &#123;            if (nums[i] + nums[j] + nums[k] &#x3D;&#x3D; 0)            &#123;                result.push_back(&#123;nums[i], nums[j], nums[k]&#125;);                int temp &#x3D; nums[j];                while (nums[j] &#x3D;&#x3D; temp &amp;&amp; j &lt; k)                &#123;                    ++j;                &#125;            &#125;            else if (nums[i] + nums[j] + nums[k] &lt; 0)            &#123;                ++j;            &#125;            else                --k;        &#125;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导航车项目的进展</title>
      <link href="/2023/05/31/%E5%AF%BC%E8%88%AA%E8%BD%A6%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%BF%9B%E5%B1%95/"/>
      <url>/2023/05/31/%E5%AF%BC%E8%88%AA%E8%BD%A6%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%BF%9B%E5%B1%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 导航车项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用Git做项目管理</title>
      <link href="/2023/05/25/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E5%81%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
      <url>/2023/05/25/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E5%81%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>1</p><h3 id="开发一天之后如何将这一天的更新发布到Github，前提有了一个仓库了，且已经提交过了。"><a href="#开发一天之后如何将这一天的更新发布到Github，前提有了一个仓库了，且已经提交过了。" class="headerlink" title="开发一天之后如何将这一天的更新发布到Github，前提有了一个仓库了，且已经提交过了。"></a>开发一天之后如何将这一天的更新发布到Github，前提有了一个仓库了，且已经提交过了。</h3><p>1.查看版本分支</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">git branch <span class="token operator">-</span>a #查看github现有的分支git branch #查看本地分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>1<br>2<br>2.在本地创建分支<br>默认情况下，本地和远程端(github)只有一个名为master的分支。有时候为了方便区分每次修改提交的代码，我们可以通过利用不同的分支来加以区分，后续克隆clone代码可以方便的利用分支名签出不同版本的源程序。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">git branch <span class="token operator">&lt;</span>YourBranchName<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1<br>3.切换当前分支</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">git checkout <span class="token operator">&lt;</span>YourBranchName<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1<br>4.推送新建分支到github上</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">git push origin <span class="token operator">&lt;</span>YourBranchName<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1<br>5.提交项目到github</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">git add <span class="token punctuation">.</span>git commit <span class="token operator">-</span>a <span class="token operator">-</span>m <span class="token char">'YourComments'</span>git push <span class="token operator">-</span>u origin  <span class="token operator">&lt;</span>YourBranchName<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>户外自动驾驶车项目架构</title>
      <link href="/2023/05/20/%E6%88%B7%E5%A4%96%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BD%A6%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/"/>
      <url>/2023/05/20/%E6%88%B7%E5%A4%96%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BD%A6%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="版本1-0"><a href="#版本1-0" class="headerlink" title="版本1.0"></a>版本1.0</h2><p>​            ——   选材及硬件配置如下所示：</p><p><img src="/2023/05/20/%E6%88%B7%E5%A4%96%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BD%A6%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/image-20230520213401061.png" alt="image-20230520213401061"></p><p>操作系统的话，基本上都是Linux或者是RTOS了，给自己上点强度。不过也确实是好使。和win10比也算是轻量级的操作系统了。</p><p>电机和舵机的话，也是第一次遇见这么大扭矩的家伙。</p><p>截至2023年5月20日（到晚上才发现今天这日子不一般）一定是我学习太认真了😁。</p><h2 id="项目目录现在如下所示-以后应该会不断的进行补充"><a href="#项目目录现在如下所示-以后应该会不断的进行补充" class="headerlink" title="项目目录现在如下所示:  (以后应该会不断的进行补充)"></a>项目目录现在如下所示:  (以后应该会不断的进行补充)</h2><p><img src="/2023/05/20/%E6%88%B7%E5%A4%96%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BD%A6%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/image-20230520213906536.png" alt="image-20230520213906536"></p><h2 id="理一下思路："><a href="#理一下思路：" class="headerlink" title="理一下思路："></a>理一下思路：</h2><p>​    先梳理一下当下的开发思路，网络截至到现在除了图像比较小之外，应该是比较稳定了，连续传个几千帧图像是没有问题的。</p><p>下一步就是去优化一下图像的传输，由于现在采取的都是单进程，或者多线程，但是python3的多线程是有一个<strong>GIL（Global Interpreter Lock(全局解释器锁)）</strong>存在的，所以他虽然叫多线程，但实际上还是一个单线程，可能用的不好还不如单线程呢，</p><p>所以接下来就是去学习一下多进程该怎么使用，使用进程和线程进行配合来提高接收UDP数据包和处理UDP数据包的速度。</p><p>至于为什么说只加速UDP的接收和处理速度呢，因为在实验过程之发现服务器接收和发送图片的帧数远比接收到的多的多，基本上4帧才能收到一帧，如果这几帧都能显示出来的话，那图像得多丝滑啊。想想就兴奋啊。搞完了图像传输之后，控制部分我们先放一放，虽然流量卡和服务器还在计费，但是没有实物也没法验证远程控制好不好使啊。</p><p>所有暂时放下网络这块，去研究舵机和步进电机的使用和驱动，先让车从零动起来再说控制，之后就是进阶研究步进电机的启动方式，记得以前见过什么梯形加减速算法，应该可以借鉴借鉴，毕竟这么一个电机如果开始就给一个大的驱动力，那肯定是对电机的损伤比比较大的，人跑个步还得做做热身，防止拉伤呢，何况是这种大铁头呢。</p><p>暂时就这么多，之后的东西应该就到了第二版了。也就是第二阶段遇到的问题了，暂时就想到这么多了，没有实践说什么也是白扯。</p><p>第一版总结时间:2023/5/20 。</p><h2 id="版本2-0"><a href="#版本2-0" class="headerlink" title="版本2.0"></a>版本2.0</h2><p>​    截至至2023年5月31日作为11：47分，项目进展比较顺利，中途遇见不少问题，但是还好基本上都解决了。</p><p>目前，网络部分基本框架已经完成，对之前的方式进行了一个重构，之前的启动方式过于复杂，客户端之间还有启动顺序，几天没用自己都忘了怎么开，一气之下直接重构了一下系统，对启动方式进行了一个整改，启动方式放最后了。</p><p>网络通信的过程大体为：PC通过阿里云向树莓派发信息再转发到Stm32，整个链接过程看起来有点脆弱，只要一个环节出错直接完蛋，但是没有办法，这能是这样了，想要没有距离的限制，只能是通过网络，所以暂时先这样，至于数据校验部分还现在没有写，计划使用正则匹配来判断数据的正确性，采用数据帧的方式来发送数据，对数据进行封装，后期加入加密算法，对数据进行加密，防止被人轻轻松松直接拿到原始数据，车直接被人控制着开回家了。这不就搞笑了吗，所以对数据加密还是有必要的。目前还没确定数据格式使用什么比较好，暂时想到一个格式是</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">帧头 <span class="token operator">+</span> 数据长度 <span class="token operator">+</span> 数据 <span class="token operator">+</span> 帧尾<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不知道效果咋样，现在使用的直接发送原始数据。且中图没有丢包校验。一次收不到，就多按几次键盘，这奇怪的是我用TCP作为控制协议，但是他居然丢包，我拿UDP都不丢，TCP居然丢包率更高。想不通啊想不通。</p><p>至于控制部分，步进电机采用了T型加减速算法，来保护电机，和防止启动时整个车架承受一个比较大的力，对这个启动过程做一个缓冲，效果还可以，写了个这个基本上把定时器和中断研究明白了，这个步进电机T型加减速遇到了一堆的问题，第一个就是怎么写，网上资料很多，就不说了，网上基本上都是HAL库的，但是想要效率使用HAL库是不太行的，封装太多了，所以将HAL移植为库函数，发现好使，之后移植上FreeRTOS系统，发现只要开启步进电机的任务，其他进程就会卡死，调整抢占算法，轮询算法都不好使，改栈大小什么的都不好用，又改为库函数，一开始认为是这个算法占用定时器资源太多了，导致其他的函数根本执行不了，所以又将库函数改为了寄存器的版本，还是不行，辗转反侧，网上根本没有这块的问题，但所幸有一篇是关于这个问题的，将编译器的优化等级从0提高为1，发现仍然不行，最后怀疑是定时器配置问题，各种改配置，不行，最后发现是中断类型的问题，在定时器中断中有一个更新中断，应该改为比较中断，至此这个卡了小半周的问题算是解决了，但是目前24V的电压加上新驱动器带不动这个步进电机，怀疑是电压不够，新电池还在路上。至于LVGL还没移植，实在是有点大，不知道芯片能不能抗住，现在多了一个想法是，添加一个开机动画，查百度时发现一个赛博朋克的进度条，很炫。不过为了一个开机动画要学一个Fatfs文件系统。配合SD卡，实现更多效果的展示，挺简单的一个系统越做越复杂了，加上内存卡，之后便可以将一些控制数据放入SD卡了，显得工业级一点了。更合理了。</p><p>附：</p><p>启动方式:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">先打开服务器，之后PC和树莓派随意 然后会在树莓派看到提示输入<span class="token number">99</span>开始传输数据，这块每<span class="token number">100</span>帧给一个提示，说明连接还在，在按一个<span class="token number">99</span>停止数据的传输，阿里云服务器的文件路径：<span class="token operator">/</span>home<span class="token operator">/</span>test<span class="token operator">/</span>chonggou下的xintiao<span class="token punctuation">.</span>py  tcptest<span class="token punctuation">.</span>py smpServer<span class="token punctuation">.</span>py树莓派的文件路径：<span class="token operator">/</span>home<span class="token operator">/</span>pi<span class="token operator">/</span>python<span class="token operator">/</span>xm   下的tcptest<span class="token punctuation">.</span>py  usart_send<span class="token punctuation">.</span>pyPC文件路径<span class="token punctuation">:</span> <span class="token operator">/</span>xintiao<span class="token punctuation">.</span>py  tcp_test<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制部分目前状态：加入了数据的接收，这块用的是串口，舵机的控制，步进电机的控制。目前在学Fatfs文件操作系统和内存管理，下一步加入FreeRTOS系统，提高系统的实时性，之后加入LVGL进行GUI界面的编写。</p><p>树莓派部分现在还没有加入双目摄像头的测距以及物体识别和GPS+IMU的惯导路径获取。</p><p>PC的GUI控制现在用的是pygame库，控制只有一个黑框，看看最后能不能用pyqt做一个高级的控制界面，前几天还看到了Unity3D可以接入串口数据进行展示，可以对车进行一个建模动画显示出状态，正好也有imu得到姿态。</p><p>至此这10天的工作总结基本完成了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 自动驾驶车架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序数组中的两个数字之和</title>
      <link href="/2023/05/17/%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/"/>
      <url>/2023/05/17/%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p>1</p><p>没什么好说的，双指针入门，还是很简单的。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution&#123;public:    vector&lt;int&gt; twoSum(vector&lt;int&gt; &amp;numbers, int target)    &#123;        int left &#x3D; 0;        int right &#x3D; numbers.size() - 1;        while (left &lt; right)        &#123;            if(numbers[left] + numbers[right] &#x3D;&#x3D; target)                return &#123;left,right&#125;;            if (numbers[left] + numbers[right] &gt; target)            &#123;                right--;            &#125;            else                left++;        &#125;        return &#123;-1,-1&#125;;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/05/17/%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/image-20230517205432973.png" alt="image-20230517205432973"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单词长度的最大乘积</title>
      <link href="/2023/05/17/%E5%8D%95%E8%AF%8D%E9%95%BF%E5%BA%A6%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/"/>
      <url>/2023/05/17/%E5%8D%95%E8%AF%8D%E9%95%BF%E5%BA%A6%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/</url>
      
        <content type="html"><![CDATA[<p>忠告：不熟悉一门语言，用刷题来熟悉他不是个好选择啊，卡了很久，不是逻辑上的问题，而是C++里的vector这个东西，已经被它卡了好几次了，</p><p>直接代码</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution&#123;public:    int maxProduct(std::vector&lt;std::string&gt; &amp;words)    &#123;        int result &#x3D; 0;        int result_old;        vector&lt;vector&lt;bool&gt;&gt; myhashmap(words.size(),vector&lt;bool&gt;(26,false));        for (int i &#x3D; 0; i &lt; words.size(); i++) &#x2F;&#x2F; 对每个单词 进行 26 个 字母的配匹 如果有个        &#123;            for(const char&amp; c: words[i])            &#123;                myhashmap[i][c - &#39;a&#39;] &#x3D; true;            &#125;        &#125;        &#x2F;&#x2F; 此时我们得到了每个单词出现了什么字母        for (int i &#x3D; 0; i &lt; words.size(); ++i)        &#123;            for (int j &#x3D; i + 1; j &lt; words.size(); ++j)            &#123;                int k &#x3D; 0;                for (; k &lt; 26; ++k)                &#123;                    if (myhashmap[i][k] &amp;&amp; myhashmap[j][k])                    &#123;                        break;                    &#125;                &#125;                if (k &#x3D;&#x3D; 26) &#x2F;&#x2F; 如果两个单词没有相同的地方 ，那么计算他们的积                &#123;                    result_old &#x3D; words[i].size() * words[j].size();                    result &#x3D; max(result,result_old);                &#125;            &#125;        &#125;        return result;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/05/17/%E5%8D%95%E8%AF%8D%E9%95%BF%E5%BA%A6%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/image-20230517202304436.png" alt="image-20230517202304436"></p><p>效率感人，击败了16的人。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决通过服务器传输图像一段时间后断线的问题</title>
      <link href="/2023/05/16/%E8%A7%A3%E5%86%B3%E9%80%9A%E8%BF%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%A0%E8%BE%93%E5%9B%BE%E5%83%8F%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E6%96%AD%E7%BA%BF%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/05/16/%E8%A7%A3%E5%86%B3%E9%80%9A%E8%BF%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%A0%E8%BE%93%E5%9B%BE%E5%83%8F%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E6%96%AD%E7%BA%BF%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>感谢CSDN的一位博主，成功帮助解决这个问题，其实这并不是程序的问题，而是被虚拟机这个VMware坑了一把，选择连接方式为NAT模式，它会生成一张端口对应的表，但是这个表会更新，这也和我们接收图像一定时间就断开的情况相符合，所以只要将这个网络连接方式改为桥接就好了。</p><p>链接如下</p><p><a href="https://blog.csdn.net/bailang_zhizun/article/details/110546265">(1条消息) UDP - Nat模式下，UDP阻塞接收不到数据的问题_udp接收不到数据原因_bailang_zhizun的博客-CSDN博客</a></p><p>另外再粘一下，升级后的代码，采用多线程的方式实现数据的转发。</p><h2 id="阿里云服务器端"><a href="#阿里云服务器端" class="headerlink" title="阿里云服务器端"></a>阿里云服务器端</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span> <span class="token keyword">import</span> socket  <span class="token number">2</span> <span class="token keyword">import</span> threading  <span class="token number">3</span>   <span class="token number">4</span> js <span class="token operator">=</span> <span class="token number">0</span>  <span class="token number">5</span>   <span class="token number">6</span> udpServer <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span> <span class="token comment"># 创建socket对象，走udp通道</span>  <span class="token number">7</span> host <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 获取本地主机名</span>  <span class="token number">8</span> port <span class="token operator">=</span> <span class="token number">8888</span>  <span class="token number">9</span> serverAddr <span class="token operator">=</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span> <span class="token number">10</span> udpServer<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>serverAddr<span class="token punctuation">)</span> <span class="token comment"># 绑定服务端地址</span> <span class="token number">11</span>  <span class="token number">12</span>  <span class="token number">13</span> SEND_BUF_SIZE <span class="token operator">=</span> <span class="token number">921600</span>  <span class="token comment"># 设置接收缓冲域大小</span> <span class="token number">14</span>  <span class="token number">15</span> RECV_BUF_SIZE <span class="token operator">=</span> <span class="token number">921600</span>  <span class="token comment"># 设置发送缓冲域套接字关联的选项</span> <span class="token number">16</span>  <span class="token number">17</span> udpServer<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span> <span class="token number">18</span>     socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> <span class="token number">19</span>     socket<span class="token punctuation">.</span>SO_SNDBUF<span class="token punctuation">,</span> <span class="token number">20</span>     SEND_BUF_SIZE<span class="token punctuation">)</span> <span class="token number">21</span>  <span class="token number">22</span> <span class="token comment"># 设置接收缓冲域套接字关联的选项</span> <span class="token number">23</span> udpServer<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span> <span class="token number">24</span>     socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> <span class="token number">25</span>     socket<span class="token punctuation">.</span>SO_RCVBUF<span class="token punctuation">,</span> <span class="token number">26</span>     RECV_BUF_SIZE<span class="token punctuation">)</span> <span class="token number">27</span>  <span class="token number">28</span>  <span class="token number">29</span> clientlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 存储客户端的ip地址    规定第一个接收到的时树莓派的地址 第二个时win的地址</span> <span class="token number">30</span> <span class="token comment"># 那么， 我们只接收第一个地址的数据 然后发送给第二个地址</span> <span class="token number">31</span>  <span class="token number">32</span> xintiaolist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">#这个我们仍然只保留2个地址和端口的元组信息</span> <span class="token number">33</span> <span class="token comment"># 每经过3秒我们检测一次这个端口和我们clientlist的端口内容是否一样，</span> <span class="token number">34</span> <span class="token comment"># 如果不一样，那么我们将这个新的端口重新定义为新的目标端口</span> <span class="token number">35</span>  <span class="token number">36</span>  <span class="token number">37</span> <span class="token comment"># 是否要转发的标志位</span> <span class="token number">38</span> issend <span class="token operator">=</span> <span class="token number">0</span> <span class="token number">39</span>  <span class="token number">40</span>  <span class="token number">41</span>  <span class="token number">42</span> flag <span class="token operator">=</span> <span class="token number">0</span> <span class="token number">43</span> js <span class="token operator">=</span> <span class="token number">0</span> <span class="token number">44</span>  <span class="token number">45</span>  <span class="token number">46</span> <span class="token comment"># 接收视频数据的线程</span> <span class="token number">47</span> <span class="token comment"># 此线程只处理视频的接收和转发</span> <span class="token number">48</span> <span class="token keyword">def</span> <span class="token function">img_recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">49</span>     <span class="token keyword">global</span> clientlist<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> issend<span class="token punctuation">,</span>js <span class="token number">50</span>     <span class="token keyword">while</span> flag <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token comment"># 前两次通信用来存储 两个客户端的IP地址 用来穿透使用 </span> <span class="token number">51</span>         clientData<span class="token punctuation">,</span>clientAddr <span class="token operator">=</span> udpServer<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token comment"># 接收来自客户端的数据</span> <span class="token number">52</span>         clientlist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>clientAddr<span class="token punctuation">)</span> <span class="token number">53</span>         udpServer<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span><span class="token string">'wyt'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientlist<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 发送数据给客户端</span> <span class="token number">54</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>clientAddr<span class="token punctuation">)</span> <span class="token number">55</span>         flag <span class="token operator">+=</span> <span class="token number">1</span> <span class="token number">56</span>         <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">57</span>             <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第一个"</span><span class="token punctuation">)</span> <span class="token number">58</span>             <span class="token keyword">print</span><span class="token punctuation">(</span>clientlist<span class="token punctuation">)</span> <span class="token number">59</span>             flag <span class="token operator">+=</span> <span class="token number">1</span>             flag <span class="token operator">+=</span> <span class="token number">1</span> <span class="token number">60</span>  <span class="token number">61</span>     <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token number">62</span>         <span class="token keyword">while</span> js <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span> <span class="token number">63</span>             clientData<span class="token punctuation">,</span>clientAddr <span class="token operator">=</span> udpServer<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">921600</span><span class="token punctuation">)</span> <span class="token comment"># 接收来自客户端的数据</span> <span class="token number">64</span>             udpServer<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>clientData<span class="token punctuation">,</span> clientlist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 发送数据给客户端</span> <span class="token number">65</span>             js <span class="token operator">+=</span> <span class="token number">1</span> <span class="token number">66</span>             <span class="token keyword">if</span> js <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">:</span> <span class="token number">67</span>                 issend <span class="token operator">=</span> <span class="token number">1</span> <span class="token number">68</span>             <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"sucess"</span><span class="token punctuation">)</span> <span class="token number">69</span>  <span class="token number">70</span>  <span class="token number">71</span> <span class="token comment"># 由于现在的问题是一段时间后，我们就接收不到服务器的图像数据了</span> <span class="token number">72</span> <span class="token comment"># 猜测是由于图像接收的端口变了。 检测长时间没有图片发送过去，那么客户端方，向这边发送心跳，请求重新连接</span> <span class="token number">73</span> <span class="token comment"># 接收到心跳后我们更新这个地址和端口，重新进行发送。</span> <span class="token number">74</span> <span class="token comment"># 难点在于如何筛选出，这个心跳信号来。</span> <span class="token number">75</span> <span class="token comment"># 接收心跳   这个心跳只有在断线时才会发送过来，通过筛选地址的方式来区分这个两个信息，是图片还是心跳。</span> <span class="token number">76</span> <span class="token comment"># 为了减小服务器压力， 我们每3秒接收一次, 相对于每3秒我们抽一帧进行是否断开的判断</span> <span class="token number">77</span>  <span class="token number">78</span>  <span class="token number">79</span> <span class="token keyword">def</span> <span class="token function">recv_xintiao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">80</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"jinlaile"</span><span class="token punctuation">)</span> <span class="token number">81</span>     <span class="token keyword">global</span> clientlist<span class="token punctuation">,</span>js<span class="token punctuation">,</span>issend <span class="token number">82</span>     <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token number">83</span>         <span class="token keyword">while</span> issend <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">84</span>             data<span class="token punctuation">,</span> ip <span class="token operator">=</span> udpServer<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">921600</span><span class="token punctuation">)</span> <span class="token number">85</span>             <span class="token keyword">if</span> ip <span class="token operator">==</span> clientlist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">or</span> ip <span class="token operator">==</span> clientlist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 如果IP和树莓派一样 那么直接舍弃了</span> <span class="token number">86</span>                 js <span class="token operator">=</span> <span class="token number">0</span> <span class="token number">87</span>                 issend <span class="token operator">=</span> <span class="token number">0</span> <span class="token number">88</span>                 <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"zoude1"</span><span class="token punctuation">)</span> <span class="token number">89</span>                 <span class="token keyword">pass</span> <span class="token number">90</span>             <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token number">91</span>                 issend <span class="token operator">=</span> <span class="token number">1</span>  <span class="token number">92</span>                 clientlist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ip <span class="token comment"># 将新的IP地址赋值给目标地址</span> <span class="token number">93</span>                 issend <span class="token operator">=</span> <span class="token number">0</span> <span class="token number">94</span>                 js<span class="token operator">=</span><span class="token number">0</span> <span class="token number">95</span>                 issend <span class="token operator">=</span> <span class="token number">0</span> <span class="token number">96</span>                 <span class="token keyword">print</span><span class="token punctuation">(</span>zoude2<span class="token punctuation">)</span> <span class="token number">97</span>  <span class="token number">98</span>  <span class="token number">99</span> <span class="token comment"># 线程启动函数</span><span class="token number">100</span> <span class="token keyword">def</span> <span class="token function">main1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">101</span>     t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>img_recv<span class="token punctuation">)</span> <span class="token comment"># 开启数据转发</span><span class="token number">102</span>     <span class="token comment">#t2 = threading.Thread(target=recv_xintiao) # 成功解决这个问题，不需要了</span><span class="token number">103</span>     t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">104</span>     <span class="token comment">#t2.start()</span><span class="token number">105</span> <span class="token number">106</span> <span class="token number">107</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span><span class="token number">108</span>     main1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">109</span> <span class="token number">110</span> <span class="token number">111</span> <span class="token comment"># 单个线程 处理图像转发压力太大，采用多线程来分别实现收和发，收的数据存放在一个公共区域中，</span><span class="token number">112</span> <span class="token comment"># 不停的去发送数据</span><span class="token number">113</span> <span class="token comment">#while True:</span><span class="token number">114</span> <span class="token number">115</span>  <span class="token comment">#   while flag &lt; 2: # 前两次通信用来存储 两个客户端的IP地址 用来穿透使用 </span><span class="token number">116</span>   <span class="token comment">#      clientData,clientAddr = udpServer.recvfrom(1024) # 接收来自客户端的数据</span><span class="token number">117</span>    <span class="token comment">#     clientlist.append(clientAddr)</span><span class="token number">118</span>     <span class="token comment">#    udpServer.sendto('wyt'.encode(), clientlist[flag]) # 发送数据给客户端</span><span class="token number">119</span>      <span class="token comment">#   print(clientAddr)</span><span class="token number">120</span>       <span class="token comment">#  flag += 1</span><span class="token number">121</span>        <span class="token comment"># if flag == 2:</span><span class="token number">122</span>         <span class="token comment">#    print("第一个")</span><span class="token number">123</span>          <span class="token comment">#   print(clientlist)</span><span class="token number">124</span> <span class="token comment">#            flag += 1</span><span class="token number">125</span> <span class="token number">126</span>  <span class="token comment">#   clientData,clientAddr = udpServer.recvfrom(460800) # 接收来自客户端的数据</span><span class="token number">127</span>   <span class="token comment">#  udpServer.sendto(clientData, clientlist[1]) # 发送数据给客户端</span><span class="token number">128</span>    <span class="token comment"># js += 1</span><span class="token number">129</span>     <span class="token comment">#print(str(js)+"sucess")</span><span class="token number">130</span> <span class="token number">131</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树莓派端"><a href="#树莓派端" class="headerlink" title="树莓派端"></a>树莓派端</h2><p><img src="/2023/05/16/%E8%A7%A3%E5%86%B3%E9%80%9A%E8%BF%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%A0%E8%BE%93%E5%9B%BE%E5%83%8F%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E6%96%AD%E7%BA%BF%E7%9A%84%E9%97%AE%E9%A2%98/image-20230516112935425.png" alt="image-20230516112935425"></p><p><img src="/2023/05/16/%E8%A7%A3%E5%86%B3%E9%80%9A%E8%BF%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%A0%E8%BE%93%E5%9B%BE%E5%83%8F%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E6%96%AD%E7%BA%BF%E7%9A%84%E9%97%AE%E9%A2%98/image-20230516112948462.png" alt="image-20230516112948462"></p><p><img src="/2023/05/16/%E8%A7%A3%E5%86%B3%E9%80%9A%E8%BF%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%A0%E8%BE%93%E5%9B%BE%E5%83%8F%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E6%96%AD%E7%BA%BF%E7%9A%84%E9%97%AE%E9%A2%98/image-20230516112956920.png" alt="image-20230516112956920"></p><p><img src="/2023/05/16/%E8%A7%A3%E5%86%B3%E9%80%9A%E8%BF%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%A0%E8%BE%93%E5%9B%BE%E5%83%8F%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E6%96%AD%E7%BA%BF%E7%9A%84%E9%97%AE%E9%A2%98/image-20230516113005298.png" alt="image-20230516113005298"></p><h2 id="虚拟机端"><a href="#虚拟机端" class="headerlink" title="虚拟机端"></a>虚拟机端</h2><p><img src="/2023/05/16/%E8%A7%A3%E5%86%B3%E9%80%9A%E8%BF%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%A0%E8%BE%93%E5%9B%BE%E5%83%8F%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E6%96%AD%E7%BA%BF%E7%9A%84%E9%97%AE%E9%A2%98/image-20230516113154117.png" alt="image-20230516113154117"></p><p><img src="/2023/05/16/%E8%A7%A3%E5%86%B3%E9%80%9A%E8%BF%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%A0%E8%BE%93%E5%9B%BE%E5%83%8F%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E6%96%AD%E7%BA%BF%E7%9A%84%E9%97%AE%E9%A2%98/image-20230516113210378.png" alt="image-20230516113210378"></p><p><img src="/2023/05/16/%E8%A7%A3%E5%86%B3%E9%80%9A%E8%BF%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%A0%E8%BE%93%E5%9B%BE%E5%83%8F%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E6%96%AD%E7%BA%BF%E7%9A%84%E9%97%AE%E9%A2%98/image-20230516113227185.png" alt="image-20230516113227185"></p>]]></content>
      
      
      
        <tags>
            
            <tag> UDP穿透（打洞） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派+阿里云+PC通过opencv实时传输图像</title>
      <link href="/2023/05/14/%E6%A0%91%E8%8E%93%E6%B4%BE-%E9%98%BF%E9%87%8C%E4%BA%91-PC%E9%80%9A%E8%BF%87opencv%E5%AE%9E%E6%97%B6%E4%BC%A0%E8%BE%93%E5%9B%BE%E5%83%8F/"/>
      <url>/2023/05/14/%E6%A0%91%E8%8E%93%E6%B4%BE-%E9%98%BF%E9%87%8C%E4%BA%91-PC%E9%80%9A%E8%BF%87opencv%E5%AE%9E%E6%97%B6%E4%BC%A0%E8%BE%93%E5%9B%BE%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<p>花了几天从0把网络编程，大概走了个流程，由于做的都是图像的传输，所以一直再研究UDP协议，TCP的话就是测试了一下子怎么使，</p><p>，此时，再树莓派和PC都连接手机热点的情况下实现了通过socket之udp的图像传输，经过阿里云服务器转发。</p><p>代码保存在这一份，防止丢了。</p><p>阿里云服务器</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token number">1</span> <span class="token keyword">import</span> socket <span class="token number">2</span> <span class="token keyword">import</span> threading <span class="token number">3</span>  <span class="token number">4</span>  <span class="token number">5</span> js <span class="token operator">=</span> <span class="token number">0</span> <span class="token number">6</span>  <span class="token number">7</span> udpServer <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span> <span class="token comment"># 创建socket对象，走udp通道</span> <span class="token number">8</span> host <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 获取本地主机名</span> <span class="token number">9</span> port <span class="token operator">=</span> <span class="token number">8888</span><span class="token number">10</span> serverAddr <span class="token operator">=</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token number">11</span> udpServer<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>serverAddr<span class="token punctuation">)</span> <span class="token comment"># 绑定服务端地址</span><span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span> SEND_BUF_SIZE <span class="token operator">=</span> <span class="token number">921600</span>  <span class="token comment"># 设置接收缓冲域大小</span><span class="token number">15</span> <span class="token number">16</span> RECV_BUF_SIZE <span class="token operator">=</span> <span class="token number">921600</span>  <span class="token comment"># 设置发送缓冲域套接字关联的选项</span><span class="token number">17</span> <span class="token number">18</span> udpServer<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span><span class="token number">19</span>     socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span><span class="token number">20</span>     socket<span class="token punctuation">.</span>SO_SNDBUF<span class="token punctuation">,</span><span class="token number">21</span>     SEND_BUF_SIZE<span class="token punctuation">)</span><span class="token number">22</span> <span class="token number">23</span> <span class="token comment"># 设置接收缓冲域套接字关联的选项</span><span class="token number">24</span> udpServer<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span><span class="token number">25</span>     socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span><span class="token number">26</span>     socket<span class="token punctuation">.</span>SO_RCVBUF<span class="token punctuation">,</span><span class="token number">27</span>     RECV_BUF_SIZE<span class="token punctuation">)</span><span class="token number">28</span> <span class="token number">29</span> <span class="token number">30</span> <span class="token number">31</span> <span class="token number">32</span> <span class="token number">33</span> clientlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 存储客户端的ip地址    规定第一个接收到的时树莓派的地址 第二个时win的地址</span><span class="token number">34</span> <span class="token comment"># 那么， 我们只接收第一个地址的数据 然后发送给第二个地址</span><span class="token number">35</span> <span class="token number">36</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token number">37</span> js <span class="token operator">=</span> <span class="token number">0</span><span class="token number">38</span> <span class="token number">39</span> <span class="token comment"># 单个线程 处理图像转发压力太大，采用多线程来分别实现收和发，收的数据存放在一个公共区域中，</span><span class="token number">40</span> <span class="token comment"># 不停的去发送数据</span><span class="token number">41</span> <span class="token number">42</span> <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span><span class="token number">43</span> <span class="token number">44</span>     <span class="token keyword">while</span> flag <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token comment"># 前两次通信用来存储 两个客户端的IP地址 用来穿透使用 </span><span class="token number">45</span>         clientData<span class="token punctuation">,</span>clientAddr <span class="token operator">=</span> udpServer<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token comment"># 接收来自客户端的数据</span><span class="token number">46</span>         clientlist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>clientAddr<span class="token punctuation">)</span><span class="token number">47</span>         udpServer<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span><span class="token string">'wyt'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientlist<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 发送数据给客户端</span><span class="token number">48</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>clientAddr<span class="token punctuation">)</span><span class="token number">49</span>         flag <span class="token operator">+=</span> <span class="token number">1</span><span class="token number">50</span>         <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">51</span>             <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第一个"</span><span class="token punctuation">)</span><span class="token number">52</span>             <span class="token keyword">print</span><span class="token punctuation">(</span>clientlist<span class="token punctuation">)</span><span class="token number">53</span>             flag <span class="token operator">+=</span> <span class="token number">1</span><span class="token number">54</span>     <span class="token number">55</span>     clientData<span class="token punctuation">,</span>clientAddr <span class="token operator">=</span> udpServer<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">921600</span><span class="token punctuation">)</span> <span class="token comment"># 接收来自客户端的数据</span><span class="token number">56</span>     udpServer<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>clientData<span class="token punctuation">,</span> clientlist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 发送数据给客户端</span><span class="token number">57</span>     js <span class="token operator">+=</span> <span class="token number">1</span><span class="token number">58</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"sucess"</span><span class="token punctuation">)</span><span class="token number">59</span> <span class="token number">60</span>                                                               <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个多线程还没补上。</p><p>PC端</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2udpClient <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>  <span class="token comment"># 创建socket对象，走udp通道</span>host <span class="token operator">=</span> <span class="token string">'8.130.115.65'</span>port <span class="token operator">=</span> <span class="token number">8888</span>serverAddr <span class="token operator">=</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span>SEND_BUF_SIZE <span class="token operator">=</span> <span class="token number">921600</span>  <span class="token comment"># 设置接收缓冲域大小</span>RECV_BUF_SIZE <span class="token operator">=</span> <span class="token number">921600</span>  <span class="token comment"># 设置发送缓冲域套接字关联的选项</span>udpClient<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>    socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span>    socket<span class="token punctuation">.</span>SO_SNDBUF<span class="token punctuation">,</span>    SEND_BUF_SIZE<span class="token punctuation">)</span><span class="token comment"># 设置接收缓冲域套接字关联的选项</span>udpClient<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>    socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span>    socket<span class="token punctuation">.</span>SO_RCVBUF<span class="token punctuation">,</span>    RECV_BUF_SIZE<span class="token punctuation">)</span><span class="token comment"># udpClient.setblocking(False)  # 设置为非阻塞模式</span>flag <span class="token operator">=</span> <span class="token number">0</span>js <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        flag <span class="token operator">=</span> <span class="token number">1</span>        data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入要的内容"</span><span class="token punctuation">)</span>        udpClient<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serverAddr<span class="token punctuation">)</span>  <span class="token comment"># 发送数据给服务端</span>    serverData<span class="token punctuation">,</span> serverAddr <span class="token operator">=</span> udpClient<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">921600</span><span class="token punctuation">)</span>  <span class="token comment"># 接收来自服务端的数据</span>    <span class="token keyword">if</span> js <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">:</span>        receive_data <span class="token operator">=</span> np<span class="token punctuation">.</span>frombuffer<span class="token punctuation">(</span>serverData<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'uint8'</span><span class="token punctuation">)</span>        r_img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imdecode<span class="token punctuation">(</span>receive_data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>r_img<span class="token punctuation">,</span> <span class="token string">"server"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>FONT_HERSHEY_SIMPLEX<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        r_img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imdecode<span class="token punctuation">(</span>receive_data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'server'</span><span class="token punctuation">,</span> r_img<span class="token punctuation">)</span>        key <span class="token operator">=</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 致命伤</span>        <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    js <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"帧图像"</span><span class="token punctuation">)</span>udpClient<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>树莓派</p><p><img src="/2023/05/14/%E6%A0%91%E8%8E%93%E6%B4%BE-%E9%98%BF%E9%87%8C%E4%BA%91-PC%E9%80%9A%E8%BF%87opencv%E5%AE%9E%E6%97%B6%E4%BC%A0%E8%BE%93%E5%9B%BE%E5%83%8F/image-20230514213650266.png" alt="image-20230514213650266"></p><p><img src="/2023/05/14/%E6%A0%91%E8%8E%93%E6%B4%BE-%E9%98%BF%E9%87%8C%E4%BA%91-PC%E9%80%9A%E8%BF%87opencv%E5%AE%9E%E6%97%B6%E4%BC%A0%E8%BE%93%E5%9B%BE%E5%83%8F/image-20230514213704031.png" alt="image-20230514213704031"></p><p><img src="/2023/05/14/%E6%A0%91%E8%8E%93%E6%B4%BE-%E9%98%BF%E9%87%8C%E4%BA%91-PC%E9%80%9A%E8%BF%87opencv%E5%AE%9E%E6%97%B6%E4%BC%A0%E8%BE%93%E5%9B%BE%E5%83%8F/image-20230514213712074.png" alt="image-20230514213712074"></p><p>vim还得下插件粘贴代码，直接截图吧。</p><p>以后换成两个热点试试。应该是没啥问题的。</p><p>都是得到IP和端口，可能那样网络环境会复杂很多。</p>]]></content>
      
      
      
        <tags>
            
            <tag> UDP穿透（打洞） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UDP穿透热点+云服务器实现</title>
      <link href="/2023/05/14/UDP%E7%A9%BF%E9%80%8F%E7%83%AD%E7%82%B9-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/05/14/UDP%E7%A9%BF%E9%80%8F%E7%83%AD%E7%82%B9-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="UDP穿透原理"><a href="#UDP穿透原理" class="headerlink" title="UDP穿透原理"></a>UDP穿透原理</h3><p>借助一个公网IP，这个服务器可以完美解决，客户端A 向服务器发送信息，这个信息随意，我们只是为了得到客户端A的公网IP地址而已，之后客户端B向服务器发送信息，也是随意发一个就行，这时候我们通过服务器这个公网IP地址，得到了客户端A和客户的B的公网IP和端口，这块的认知不是很清晰，可能是公网IP也可能是网关的IP信息，不确定，这块资料网上也很少。</p><p>有了客户端A，客户端B的地址后，那么此时服务器可以被抛弃了，但是我还是借助了一下服务器，通过服务器做了一个数据转发的过程，客户端A给服务器发送信息，然后服务器转发给客户端B，这样理论上来说就完成了2个不同局域网下的设备互联，但是我此时只有热点，现在不确定这种方式会不会受到公网下复杂网络环境的影响，不好说。</p><p>先粘一下代码保存一下，省的过几天服务器过期了。那直接GG了</p><h3 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h3><p>启动方式，先启动服务器，之后启动树莓派，启动PC端，然后先用树莓派发送一条消息，然后用PC发送一条消息，这是服务器就保存下了客户端A和客户端B的IP和端口信息，此时客户端B也相当于是一个服务器了，此时可以看成是树莓派像阿里云服务器发送信息，然后阿里云服务器转发给PC端。</p><p>至此树莓派和PC再同一网络下的UDP穿透就完成了。</p><h3 id="UDP穿透实现"><a href="#UDP穿透实现" class="headerlink" title="UDP穿透实现"></a>UDP穿透实现</h3><p>阿里云服务器端</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">import</span> socket     udpServer <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span> <span class="token comment"># 创建socket对象，走udp通道</span> host <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 获取本地主机名</span> port <span class="token operator">=</span> <span class="token number">8888</span> serverAddr <span class="token operator">=</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span> udpServer<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>serverAddr<span class="token punctuation">)</span> <span class="token comment"># 绑定服务端地址</span> clientlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 存储客户端的ip地址    规定第一个接收到的时树莓派的地址 第二个时win的地址</span><span class="token comment"># 那么， 我们只接收第一个地址的数据 然后发送给第二个地址</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> flag <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token comment"># 前两次通信用来存储 两个客户端的IP地址 用来穿透使用 </span>        clientData<span class="token punctuation">,</span>clientAddr <span class="token operator">=</span> udpServer<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token comment"># 接收来自客户端的数据</span>        clientlist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>clientAddr<span class="token punctuation">)</span>        udpServer<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span><span class="token string">'wyt'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientlist<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 发送数据给客户端</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>clientAddr<span class="token punctuation">)</span>        flag <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第一个"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>clientlist<span class="token punctuation">)</span>        flag <span class="token operator">+=</span> <span class="token number">1</span>    clientData<span class="token punctuation">,</span>clientAddr <span class="token operator">=</span> udpServer<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token comment"># 接收来自客户端的数据</span>    clientlist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>clientAddr<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>clientData<span class="token punctuation">,</span>clientAddr<span class="token punctuation">)</span>    clientData <span class="token operator">=</span> clientData<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    msg <span class="token operator">=</span> <span class="token punctuation">(</span>clientData <span class="token operator">+</span> <span class="token string">'Hello Clienti'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    udpServer<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>msg<span class="token punctuation">,</span> clientlist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 发送数据给客户端</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"发送成功"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>clientlist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>树莓派端，也就是客户端A</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socketudpClient <span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>port <span class="token operator">=</span> <span class="token number">8888</span>host <span class="token operator">=</span> <span class="token string">'8.130.115.65'</span>serverAddr <span class="token operator">=</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"发送的数据为"</span><span class="token punctuation">)</span>    udpClient<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>serverAddr<span class="token punctuation">)</span>udpCleient<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PC端 也就是客户端B</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socketudpClient <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>  <span class="token comment"># 创建socket对象，走udp通道</span>host <span class="token operator">=</span> <span class="token string">'8.130.115.65'</span>port <span class="token operator">=</span> <span class="token number">8888</span>serverAddr <span class="token operator">=</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token comment">#udpClient.setblocking(False)  # 设置为非阻塞模式</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        flag <span class="token operator">=</span> <span class="token number">1</span>        data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入要的内容"</span><span class="token punctuation">)</span>        udpClient<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serverAddr<span class="token punctuation">)</span>  <span class="token comment"># 发送数据给服务端</span>    serverData<span class="token punctuation">,</span> serverAddr <span class="token operator">=</span> udpClient<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>  <span class="token comment"># 接收来自服务端的数据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>serverData<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serverAddr<span class="token punctuation">)</span>udpClient<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> UDP穿透（打洞） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派与阿里云的通讯实现</title>
      <link href="/2023/05/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8E%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E9%80%9A%E8%AE%AF%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/05/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8E%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E9%80%9A%E8%AE%AF%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>1</p><p>树莓派和阿里云的通讯实现过程，</p><p>整体流程和自己对于TCP/IP协议以及ip和端口的一些理解，在此记录一下。</p><p>首先这几天，总结的异界东西，</p><p>当前设备无法访问外网IP， 但是TCP和UDP发送时可以写外网的IP地址。</p><p>树莓派连接阿里云，首先就是要知道阿里云的外网IP和内网IP。</p><p>以我这个为例，</p><p><img src="/2023/05/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8E%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E9%80%9A%E8%AE%AF%E5%AE%9E%E7%8E%B0/image-20230511214833741.png" alt="image-20230511214833741"></p><p>外网IP和内网IP都如图所示，</p><p>那么，我们在树莓派，也就是客户端，我们要发送数据给阿里云服务器，那么我们要写的IP和端口可以如下理解，IP就是你要访问的地址的门牌号，也就是公网的IP，毕竟人太多了，不可能一人一个公网IP，这时候就有了私网的概念，通过公网IP我们找到了阿里云的服务器位置，但是有了门牌号，你不知道那个们是我们要到达的地方，这块可能涉及内网渗透，根本看不懂，先这样理解，这时候我们又知道阿里云的私网IP也就是我们通过UDP服务端监听这个IP地址和对应的端口，就可以得到树莓派发送的消息了。</p><h3 id="纸上学来终觉浅，直接上代码"><a href="#纸上学来终觉浅，直接上代码" class="headerlink" title="纸上学来终觉浅，直接上代码"></a><strong>纸上学来终觉浅，直接上代码</strong></h3><p>阿里云服务器端：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2<span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> threadingdata <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment">#addr1 = ('223.104.102.82',8888)  # 要转发的地址</span>addr2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'172.24.34.71'</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span>   <span class="token comment"># 监听的端口</span><span class="token keyword">def</span> <span class="token function">img_rece</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> data<span class="token punctuation">,</span>flag    rece1 <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">)</span>    rece1<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>addr2<span class="token punctuation">)</span>    rece1<span class="token punctuation">.</span>setblocking<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># 设置为非阻塞模式</span>    js <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data<span class="token punctuation">,</span> aa <span class="token operator">=</span> rece1<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>            <span class="token comment">#rece1.sendto(data, addr1)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> BlockingIOError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span>  <span class="token string">"__main__"</span><span class="token punctuation">:</span>    img_rece<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端代码也就是，树莓派的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2<span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> threadingdata <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment">#addr1 = ('223.104.102.82',8888)  # 要转发的地址</span>addr2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'172.24.34.71'</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span>   <span class="token comment"># 监听的端口</span><span class="token keyword">def</span> <span class="token function">img_rece</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> data<span class="token punctuation">,</span>flag    rece1 <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">)</span>    rece1<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>addr2<span class="token punctuation">)</span>    rece1<span class="token punctuation">.</span>setblocking<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># 设置为非阻塞模式</span>    js <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data<span class="token punctuation">,</span> aa <span class="token operator">=</span> rece1<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>            <span class="token comment">#rece1.sendto(data, addr1)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> BlockingIOError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span>  <span class="token string">"__main__"</span><span class="token punctuation">:</span>    img_rece<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">~</span>                 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个客户端的代码包含了传输<strong>opencv</strong>处理过的摄像头图像数据，但是现在还不确定这个数据是否是准确的。</p><p>最重要的一点，阿里云在配置时，一定要关闭防火墙，并且在安全组那块配置好端口和协议，否则天王老子也调不通它。这块是血的教训，千万记住！！！</p><p>最后看看结果吧</p><p><img src="/2023/05/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8E%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E9%80%9A%E8%AE%AF%E5%AE%9E%E7%8E%B0/image-20230511215758061.png" alt="image-20230511215758061"></p><p>看着应该是对的。不过好像丢了挺多的。这种以后再调吧。马上10点了，今天先这样。每天继续搞，如何将阿里云收到的图像数据转到笔记本上去。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派与Win之间的socket通信测试</title>
      <link href="/2023/05/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8EWin%E4%B9%8B%E9%97%B4%E7%9A%84socket%E9%80%9A%E4%BF%A1%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/05/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8EWin%E4%B9%8B%E9%97%B4%E7%9A%84socket%E9%80%9A%E4%BF%A1%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment"># 创建套接字</span>sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment"># 连接服务端</span>sock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.43.10'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 建立通讯循环</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'Enter your message: '</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token string">'quit'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'communication ended'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Mac操作系统使用utf-8编码方式</span><span class="token comment"># 断开连接</span>sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment"># 创建套接字</span>sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment"># 绑定ip地址与端口号</span>sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.43.10'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 建立监听，最大连接数为5个</span>sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># 接收客户端的连接</span>conn<span class="token punctuation">,</span> client_addr <span class="token operator">=</span> sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 通讯循环</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment"># 接收消息</span>    msg <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>  <span class="token comment"># 最大接收字节数为1024</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> msg<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'client is sending: '</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 断开连接</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 关闭套接字</span>sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在局域网下实现消息传递，下一步计划做一个，局域网下的聊天软件，支持多人聊天。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>只出现一次的数字</title>
      <link href="/2023/05/08/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>/2023/05/08/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>1</p><p>这题有个大坑，在这卡了很久还是   vector的使用   遇到这个东西必须要用这个来存储数据</p><p>一直用数组，一直报错，移位越界。</p><p>思路：判断所有数字的各个位相加后是否为3的倍数，如果是则说明它确实是出现了3次，否则就是剩下的那个数的对应位。</p><p>最后粘上代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span> <span class="token comment">// 思路 数字也是可以二进制相加的 一个数字最大也就是2的32次方</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bits</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> value<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                bits<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>num <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">31</span><span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 对每个数的31位都相加</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            result <span class="token operator">=</span>  <span class="token punctuation">(</span>result <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">+</span> bits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/05/08/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/image-20230508204332048.png" alt="image-20230508204332048"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前n个二进制形式种1的个数</title>
      <link href="/2023/05/08/%E5%89%8Dn%E4%B8%AA%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%BD%A2%E5%BC%8F%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
      <url>/2023/05/08/%E5%89%8Dn%E4%B8%AA%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%BD%A2%E5%BC%8F%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="自己在编译器的写法"><a href="#自己在编译器的写法" class="headerlink" title="自己在编译器的写法"></a>自己在编译器的写法</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bits</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            bits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> bits<span class="token punctuation">[</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> bits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> bits<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Solution s<span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">countBits</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在LeetCode的写法"><a href="#在LeetCode的写法" class="headerlink" title="在LeetCode的写法"></a>在LeetCode的写法</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">1.</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bits</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            bits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> bits<span class="token punctuation">[</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> bits<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token number">2.</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bits</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 后边右移的操作 所以从  1  开始       3有关 的个数与 1的个数</span>        <span class="token punctuation">&#123;</span>            bits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> bits<span class="token punctuation">[</span>i <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> bits<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/05/08/%E5%89%8Dn%E4%B8%AA%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%BD%A2%E5%BC%8F%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/image-20230508193201452.png" alt="image-20230508193201452"></p><p><img src="/2023/05/08/%E5%89%8Dn%E4%B8%AA%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%BD%A2%E5%BC%8F%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/image-20230508195140032.png" alt="image-20230508195140032"></p><p>2种不同的方法实现。</p><p>学到一个知识点</p><p>c++里的vector，类似于数组的作用。</p><p>在 c++ 中，vector 是一个十分有用的容器。它能够像容器一样存放各种类型的对象，简单地说，vector是一个能够存放任意类型的动态数组，能够增加和压缩数据。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ivec<span class="token punctuation">;</span> <span class="token comment">//ivec保存int类型的对象</span>vector<span class="token operator">&lt;</span>Sales_item<span class="token operator">></span> Sales_vec<span class="token punctuation">;</span><span class="token comment">//保存Sales_item类型的对象</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> file<span class="token punctuation">;</span> <span class="token comment">//一个二维数组，该元素的vector对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>个人没有深入的使用，只是把它当成数组使用了，依稀记得，之前在学寻路算法的时候，那会经常用到栈，他好像也可以当成栈来使用，</p><p>一样和栈有一样都可以分出进来的顺序。在这就是下标了，正好他也有插入的函数，应该是可以当成栈来用。</p><p>参考<a href="https://zhuanlan.zhihu.com/p/286187973">什么？还不懂c++vector的用法，你凭什么勇气来的！ - 知乎 (zhihu.com)</a></p><p><a href="https://www.runoob.com/w3cnote/cpp-vector-container-analysis.html">C++ vector 容器浅析 | 菜鸟教程 (runoob.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派串口的基本使用</title>
      <link href="/2023/05/08/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%B2%E5%8F%A3%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/05/08/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%B2%E5%8F%A3%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>树莓派通过多线程进行串口的收发，由于input的特殊性只能选择多线程来完成这个功能了。</p><p><img src="/2023/05/08/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%B2%E5%8F%A3%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20230508165615930.png" alt="image-20230508165615930"></p><p><img src="/2023/05/08/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%B2%E5%8F%A3%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20230508165628659.png" alt="image-20230508165628659"></p><p>下边是一个多线程的例子</p><p><img src="/2023/05/08/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%B2%E5%8F%A3%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20230508165800536.png" alt="image-20230508165800536"></p><p><img src="/2023/05/08/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%B2%E5%8F%A3%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20230508165810619.png" alt="image-20230508165810619"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手机热点与win10与树莓派之间的网络关系</title>
      <link href="/2023/05/07/%E6%89%8B%E6%9C%BA%E7%83%AD%E7%82%B9%E4%B8%8Ewin10%E4%B8%8E%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B9%8B%E9%97%B4%E7%9A%84%E7%BD%91%E7%BB%9C%E5%85%B3%E7%B3%BB/"/>
      <url>/2023/05/07/%E6%89%8B%E6%9C%BA%E7%83%AD%E7%82%B9%E4%B8%8Ewin10%E4%B8%8E%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B9%8B%E9%97%B4%E7%9A%84%E7%BD%91%E7%BB%9C%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>先说明一下它们仨之间的线路连接 ，手机开热点，<strong>win10</strong>笔记本连接手机热点，树莓派通过网卡连接网线与笔记本电脑连接，然后树莓派配置<strong>WiFi</strong>与热点直接连接， 修改树莓派静态ip之后，发现不能上网了，鼓捣3天，重装系统3次，血的教训，答案很简单，最后在所，先说说，经历了什么，首先，怀疑就是静态ip区段错了，不应该是<strong>192.168.137.xx</strong> 而应该是手机热点的那个网段<strong>192.168.43.xx</strong>。</p><p>这是第一次重装系统的原因，改成<strong>192.168.43.xx</strong>之后会发生一件事，就是你发现在<strong>win10</strong>通过<strong>arp-a</strong>命令不能找到你树莓派的<strong>ip</strong>了。</p><p>我认为的原因是 不同的网段只能找相同字段的ip，137 找不到 43 也正常。再就是就是看网上教程改了配置WiFi的文件，之后也是找不到了IP了，也没有树莓派的显示器，也没有ip不能远程ssh连接，自然只能选择重装系统了。第三次，记不太清了。</p><p>怎么好的呢，最后发现是网线是管ssh连接的，而WiFi是负责上网的，也就是说ip网关一直都设置错了，以前一直按照树莓派的ip来设置网关，其实应该是针对手机来设置网关，因为所有的网络全是基于手机热点完成的，通俗说就是你的网络都是用的手机的流量。</p><p>所以你的网关应该是和电脑连手机热点的手机热点一样，才行，果然设置了一下，ping 通了。</p><p>但是现在还有一个问题就是，每次打开手机热点他都是不一样的网关，这就尴尬了，总不能每次都要改吧，？？？</p><p>暂时还是没有好的方法来解决这个问题，这可能是路由器为啥这么nb的原因了，一个稳定的网络环境对于开发还是影响很大的啊。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派点灯</title>
      <link href="/2023/05/05/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%82%B9%E7%81%AF/"/>
      <url>/2023/05/05/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%82%B9%E7%81%AF/</url>
      
        <content type="html"><![CDATA[<p>树莓派引脚分布</p><p><img src="/2023/05/05/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%82%B9%E7%81%AF/image-20230505190144453.png" alt="image-20230505190144453"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO<span class="token keyword">import</span> time<span class="token comment">#注意BOARD和BCM编码的不同，这里设置的是BCM编码</span>GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span><span class="token comment">#如果是把BCM换成BOARD，下方则为GPIO.setup（物理编码，XX）</span>GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span><span class="token comment">#这里的18就表示BCM编码</span><span class="token comment">#闪5次</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span>GPIO<span class="token punctuation">.</span>HIGH<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span>GPIO<span class="token punctuation">.</span>LOW<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#建议每次退出时都用cleanup设置GPIO引脚为低电平状态</span>GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现了5次闪烁</p><p><img src="/2023/05/05/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%82%B9%E7%81%AF/image-20230505190241158.png" alt="image-20230505190241158"></p><p>感觉上和跑裸机还是有区别的，不用烧录程序的感觉，直接运行代码直接出结果，感觉比跑裸机高级多了。😎😎😎😎😎😎</p>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制加法</title>
      <link href="/2023/05/04/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95/"/>
      <url>/2023/05/04/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="自己在编译器的写法"><a href="#自己在编译器的写法" class="headerlink" title="自己在编译器的写法"></a>自己在编译器的写法</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>string a <span class="token operator">=</span> <span class="token string">"11"</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string b <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string c <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string d <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token function">addBinary</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string b<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> va <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> vb <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> jinwei <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            va <span class="token operator">=</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> a<span class="token punctuation">[</span>i<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            vb <span class="token operator">=</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> b<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> va <span class="token operator">+</span> vb <span class="token operator">+</span> jinwei<span class="token punctuation">;</span>            jinwei <span class="token operator">=</span> sum <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">?</span> sum <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">:</span> sum<span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jinwei <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            c<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string d <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    Solution s<span class="token punctuation">;</span>    d <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">addBinary</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>a<span class="token punctuation">,</span> s<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在LeetCode的写法"><a href="#在LeetCode的写法" class="headerlink" title="在LeetCode的写法"></a>在LeetCode的写法</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>string c <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token function">addBinary</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string b<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> va <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> vb <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> jinwei <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            va <span class="token operator">=</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> a<span class="token punctuation">[</span>i<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            vb <span class="token operator">=</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> b<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> va <span class="token operator">+</span> vb <span class="token operator">+</span> jinwei<span class="token punctuation">;</span>            jinwei <span class="token operator">=</span> sum <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">?</span> sum <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">:</span> sum<span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jinwei <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            c<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/05/04/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95/image-20230504125036157.png" alt="image-20230504125036157"></p><p>另外知道了c++的字符串反转函数</p><p><strong>reverse(c.begin(), c.end());</strong></p><p>以及std：：是在调用c++的函数库</p><p>真是边刷算法边学语法， 不得不说这库多了，就是比c语言好使。c真是太麻烦了。这个实现个小功能直接调用库函数就OK了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数除法</title>
      <link href="/2023/05/04/%E6%95%B4%E6%95%B0%E9%99%A4%E6%B3%95/"/>
      <url>/2023/05/04/%E6%95%B4%E6%95%B0%E9%99%A4%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="自己在编译器的写法"><a href="#自己在编译器的写法" class="headerlink" title="自己在编译器的写法"></a>自己在编译器的写法</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;class Solution&#123;    int zfjs &#x3D; 2;public:    int Judge(int a, int b) &#x2F;&#x2F; 非0 判断    &#123;        if (b &#x3D;&#x3D; 0)            return 1;        return 0;    &#125;    int pretreatment(int *a, int *b) &#x2F;&#x2F; 我们假设 a是被除数  b是除数 那么也就是说b不能是0否则直接死循环    &#123;        Judge(*a, *b); &#x2F;&#x2F; 首先进行除数非0 的判断 如果 为0 则直接退出        if (*a &gt; 0)        &#123;            zfjs--;            *a &#x3D; -*a;        &#125;        if (*b &gt; 0)        &#123;            zfjs--;            *b &#x3D; -*b;        &#125;        return 0;    &#125;    int divide(int a, int b)    &#123;        int result &#x3D; 0;        pretreatment(&amp;a, &amp;b);        while (a &lt;&#x3D; b)        &#123;            &#x2F;&#x2F; 先定义一个数保存余数            int value &#x3D; b;            int shang &#x3D; 1;            while (value &gt;&#x3D; 0x80000000 &amp;&amp; a &lt;&#x3D; value + value) &#x2F;&#x2F; 如果余数大于int_min &amp;&amp; a &lt; 1248 倍的余数            &#123;                shang +&#x3D; shang; &#x2F;&#x2F; 商成倍增加                value +&#x3D; value; &#x2F;&#x2F; 值也是            &#125;            result +&#x3D; shang;            a -&#x3D; value;        &#125;        return zfjs &#x3D;&#x3D; 1 ? -result : result;    &#125;&#125;;int main(void)&#123;    int c &#x3D; 0;    Solution solution;    c &#x3D; solution.divide(10, 3);    printf(&quot;%d&quot;, c);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在LeetCode的写法"><a href="#在LeetCode的写法" class="headerlink" title="在LeetCode的写法"></a>在LeetCode的写法</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> zfjs <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">Judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token comment">// 非0 判断</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0x80000000</span> <span class="token operator">&amp;&amp;</span>  b <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0x80000000</span> <span class="token operator">&amp;&amp;</span>  b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            flag <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">pretreatment</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token comment">// 我们假设 a是被除数  b是除数 那么也就是说b不能是0否则直接死循环</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Judge</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 首先进行除数非0 的判断 如果 为0 则直接退出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>a <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            zfjs<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">-</span><span class="token operator">*</span>a<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>b <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            zfjs<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token operator">-</span><span class="token operator">*</span>b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">pretreatment</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0x7FFFFFFF</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2147483648</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">// 先定义一个数保存余数</span>            <span class="token keyword">int</span> value <span class="token operator">=</span> b<span class="token punctuation">;</span>            <span class="token keyword">int</span> shang <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>value <span class="token operator">>=</span> <span class="token number">0xc0000000</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;=</span> value <span class="token operator">+</span> value<span class="token punctuation">)</span> <span class="token comment">// 如果余数大于int_min &amp;&amp; a &lt; 1248 倍的余数</span>            <span class="token punctuation">&#123;</span>                shang <span class="token operator">+=</span> shang<span class="token punctuation">;</span> <span class="token comment">// 商成倍增加</span>                value <span class="token operator">+=</span> value<span class="token punctuation">;</span> <span class="token comment">// 值也是</span>            <span class="token punctuation">&#125;</span>            result <span class="token operator">+=</span> shang<span class="token punctuation">;</span>            a <span class="token operator">-=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> zfjs <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token operator">-</span>result <span class="token operator">:</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法章节第一题"><a href="#算法章节第一题" class="headerlink" title="算法章节第一题"></a>算法章节第一题</h3><p><img src="/2023/05/04/%E6%95%B4%E6%95%B0%E9%99%A4%E6%B3%95/image-20230504105724896.png" alt="image-20230504105724896"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32与STM32串口通信</title>
      <link href="/2023/05/02/ESP32%E4%B8%8ESTM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/"/>
      <url>/2023/05/02/ESP32%E4%B8%8ESTM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>首先上手册，编程前必看手册。用了这么久还是没记住引脚位置。</p><p><img src="/2023/05/02/ESP32%E4%B8%8ESTM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/image-20230502191018535.png" alt="image-20230502191018535"></p><p><img src="/2023/05/02/ESP32%E4%B8%8ESTM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/image-20230502191045200.png" alt="image-20230502191045200"></p><p>首先串口发送和接收这块的接线ESP的TX 接 Stm32的RX 如果不需要反馈的话，那就不用管其他的了，这两根线就足够通讯使用了，如果需要主从校验的话，那就得有来有往了。</p><p>借这个机会复习一下串口方面的基础知识：</p><p>​    一般情况下，设备之间的通信方式可以分成<strong>并行通信和串行通信</strong>两种。它们的区别是：</p><h3 id="串行通信的分类"><a href="#串行通信的分类" class="headerlink" title="串行通信的分类"></a>串行通信的分类</h3><p>1、<strong>按照数据传送方向</strong>，分为：</p><ul><li><strong>单工：数据传输只支持数据在一个方向上传输；</strong></li><li><strong>半双工：允许数据在两个方向上传输。但是，在某一时刻，只允许数据在一个方向上传输</strong>，它实际上是一种切换方向的单工通信；<strong>它不需要独立的接收端和发送端，两者可以合并一起使用一个端口</strong>。</li><li><strong>全双工：允许数据同时在两个方向上传输</strong>。因此，全双工通信是两个单工通信方式的结合，<strong>需要独立的接收端和发送端</strong>。</li></ul><p><img src="/2023/05/02/ESP32%E4%B8%8ESTM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/image-20230502191455688.png" alt="image-20230502191455688"></p><p>2、<strong>按照通信方式</strong>，分为：</p><ul><li><strong>同步通信：带时钟同步信号传输。比如：SPI，IIC通信接口。</strong></li><li><strong>异步通信：不带时钟同步信号。比如：UART(通用异步收发器)，单总线。</strong></li></ul><p><strong>在同步通讯中，收发设备上方会使用一根信号线传输信号，在时钟信号的驱动下双方进行协调，同步数据。</strong>例如，通讯中通常双方会统一规定在时钟信号的上升沿或者下降沿对数据线进行采样。</p><p><strong>在异步通讯中不使用时钟信号进行数据同步，它们直接在数据信号中穿插一些用于同步的信号位，或者将主题数据进行打包，以数据帧的格式传输数据。通讯中还需要双方规约好数据的传输速率（也就是波特率）等，以便更好地同步。</strong>常用的波特率有4800bps、9600bps、115200bps等。</p><p><strong>在同步通讯中，数据信号所传输的内容绝大部分是有效数据，而异步通讯中会则会包含数据帧的各种标识符，所以同步通讯效率高， 但是同步通讯双方的时钟允许误差小，稍稍时钟出错就可能导致数据错乱，异步通讯双方的时钟允许误差较大。</strong></p><h3 id="常见的串行通信接口"><a href="#常见的串行通信接口" class="headerlink" title="常见的串行通信接口"></a>常见的串行通信接口</h3><p>STM32的串口通信接口有两种，分别是：<strong>UART（通用异步收发器）、USART（通用同步异步收发器）。而对于大容量STM32F10x系列芯片，分别有3个USART和2个UART。</strong></p><h3 id="UART引脚连接方法"><a href="#UART引脚连接方法" class="headerlink" title="UART引脚连接方法"></a>UART引脚连接方法</h3><ul><li>RXD：数据输入引脚，数据接受；</li><li>TXD：数据发送引脚，数据发送。</li><li><img src="/2023/05/02/ESP32%E4%B8%8ESTM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/image-20230502191851078.png" alt="image-20230502191851078"></li><li>对于两个芯片之间的连接，两个芯片GND共地，同时TXD和RXD交叉连接。这里的交叉连接的意思就是，芯片1的RxD连接芯片2的TXD，芯片2的RXD连接芯片1的TXD。这样，<strong>两个芯片之间就可以进行TTL电平通信了</strong>。</li><li><img src="/2023/05/02/ESP32%E4%B8%8ESTM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/image-20230502191904855.png" alt="image-20230502191904855"></li></ul><p>若是芯片与PC机（或上位机）相连，除了共地之外，就不能这样直接交叉连接了。尽管PC机和芯片都有TXD和RXD引脚，但是<strong>通常PC机（或上位机）通常使用的都是RS232接口（通常为DB9封装）</strong>，因此不能直接交叉连接。<strong>RS232接口是9针（或引脚），通常是TxD和RxD经过电平转换得到的。故，要想使得芯片与PC机的RS232接口直接通信，需要也将芯片的输入输出端口也电平转换成rs232类型，再交叉连接。</strong></p><p>经过电平转换后，芯片串口和rs232的电平标准是不一样的：</p><ul><li><strong>单片机的电平标准（TTL电平）：+5V表示1，0V表示0；</strong></li><li><strong>Rs232的电平标准：+15/+13 V表示0，-15/-13表示1。</strong></li></ul><p>RS-232通讯协议标准串口的设备间通讯结构图如下：</p><p><img src="/2023/05/02/ESP32%E4%B8%8ESTM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/image-20230502191919017.png" alt="image-20230502191919017"></p><p>所以单<strong>片机串口与PC串口通信就应该遵循下面的连接方式：在单片机串口与上位机给出的rs232口之间，通过电平转换电路(如下面图中的Max232芯片) 实现TTL电平与RS232电平之间的转换。</strong></p><p><img src="/2023/05/02/ESP32%E4%B8%8ESTM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/image-20230502191931267.png" alt="image-20230502191931267"></p><h3 id="STM32的UART特点"><a href="#STM32的UART特点" class="headerlink" title="STM32的UART特点"></a>STM32的UART特点</h3><ul><li><strong>全双工异步通信</strong>；</li><li><strong>分数波特率发生器系统，提供精确的波特率</strong>。发送和接受共用的可编程波特率，最高可达4.5Mbits/s；</li><li>可编程的数据字长度（8位或者9位）；</li><li>可配置的停止位（支持1或者2位停止位）；</li><li><strong>可配置的使用DMA多缓冲器通信</strong>；</li><li><strong>单独的发送器和接收器使能位</strong>；</li><li>检测标志：① 接受缓冲器 ②发送缓冲器空 ③传输结束标志；</li><li><strong>多个带标志的中断源，触发中断</strong>；</li><li>其他：校验控制，四个错误检测标志。</li></ul><h2 id="串口通信过程"><a href="#串口通信过程" class="headerlink" title="串口通信过程"></a>串口通信过程</h2><p><img src="/2023/05/02/ESP32%E4%B8%8ESTM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/image-20230502192005512.png" alt="image-20230502192005512"></p><h3 id="STM32中UART参数"><a href="#STM32中UART参数" class="headerlink" title="STM32中UART参数"></a>STM32中UART参数</h3><p>串口通讯的数据包由发送设备通过自身的TXD接口传输到接收设备的RXD接口，通讯双方的数据包格式要规约一致才能正常收发数据。STM32中串口异步通信需要定义的参数：<strong>起始位、数据位（8位或者9位）、奇偶校验位（第9位）、停止位（1,15,2位）、波特率设置。</strong></p><p><strong>UART串口通信的数据包以帧为单位，常用的帧结构为：1位起始位+8位数据位+1位奇偶校验位（可选）+1位停止位。</strong>如下图所示：</p><p><img src="/2023/05/02/ESP32%E4%B8%8ESTM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/image-20230502192021545.png" alt="image-20230502192021545"></p><p>奇偶校验位分为奇校验和偶校验两种，是一种简单的数据误码校验方法。<strong>奇校验是指每帧数据中，包括数据位和奇偶校验位的全部9个位中1的个数必须为奇数；偶校验是指每帧数据中，包括数据位和奇偶校验位的全部9个位中1的个数必须为偶数。</strong></p><p><strong>校验方法除了奇校验(odd)、偶校验(even)之外，还可以有：0 校验(space)、1 校验(mark)以及无校验(noparity)。</strong> 0/1校验：不管有效数据中的内容是什么，校验位总为0或者1。</p><h3 id="UART（USART）框图"><a href="#UART（USART）框图" class="headerlink" title="UART（USART）框图"></a>UART（USART）框图</h3><p><img src="/2023/05/02/ESP32%E4%B8%8ESTM32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/image-20230502192226785.png" alt="image-20230502192226785"></p><p>这个框图分成上、中、下三个部分。本文大概地讲述一下各个部分的内容，具体的可以看《STM32中文参考手册》中的描述。</p><p>框图的上部分，<strong>数据从RX进入到接收移位寄存器，后进入到接收数据寄存器，最终供CPU或者DMA来进行读取；数据从CPU或者DMA传递过来，进入发送数据寄存器，后进入发送移位寄存器，最终通过TX发送出去。</strong></p><p>然而，UART的发送和接收都需要波特率来进行控制的，波特率是怎样控制的呢？</p><p>这就到了框图的下部分，<strong>在接收移位寄存器、发送移位寄存器都还有一个进入的箭头，分别连接到接收器控制、发送器控制。而这两者连接的又是接收器时钟、发送器时钟。也就是说，异步通信尽管没有时钟同步信号，但是在串口内部，是提供了时钟信号来进行控制的。</strong>而接收器时钟和发送器时钟有是由什么控制的呢？</p><p>可以看到，<strong>接收器时钟和发送器时钟又被连接到同一个控制单元，也就是说它们共用一个波特率发生器。</strong>同时也可以看到接收器时钟（发生器时钟）的计算方法、USRRTDIV的计算方法。</p><p>这里需要知道一个知识点：</p><ul><li><strong>UART1的时钟：PCLK2（高速）；</strong></li><li><strong>UART2、UART3、UART4的时钟：PCLK1（低速）。</strong></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WIFI中的AP和STA的区别</title>
      <link href="/2023/05/01/WIFI%E4%B8%AD%E7%9A%84AP%E5%92%8CSTA%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/05/01/WIFI%E4%B8%AD%E7%9A%84AP%E5%92%8CSTA%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="WIFI模块中-AP和STA模式中分别意思是"><a href="#WIFI模块中-AP和STA模式中分别意思是" class="headerlink" title="WIFI模块中,AP和STA模式中分别意思是:"></a>WIFI模块中,AP和STA模式中分别意思是:</h3><p>1.AP:也就是无线接入点,是一个无线网络的创建者,是网络的中心节点。一般家庭或办公室使用的无线路由器就是一个AP。</p><p>2.STA站点就是每一个连接到无线网络中的终端(如笔记本电脑、PDA及其它可以联网的用户设备)都可称为一个站点。</p><p>AP模式: Access Point，提供无线接入服务，允许其它无线设备接入，提供数据访问，一般的无线路由/网桥工作在该模式下。AP和AP之间允许相互连接</p><p>Sta模式: Station, 类似于无线终端，sta本身并不接受无线的接入，它可以连接到AP，一般无线网卡即工作在该模式。</p><p>1、工作在AP的模式下<br>      工作在AP模式下，手机、PAD、电脑等设备可以直接连上模块，可以很方便对用户设备进行控制</p><p><img src="/2023/05/01/WIFI%E4%B8%AD%E7%9A%84AP%E5%92%8CSTA%E7%9A%84%E5%8C%BA%E5%88%AB/image-20230501160544601.png" alt="image-20230501160544601">2、工作在STA的模式下<br>      这是一种基木的组网方式，由一个AP和许多STA组成，如下图。其特点是AP处于中心地位，STA之间的相互通信都通过AP转发完成。该模式下，WIFI模块工作在STA(CLIENT)模式。通过适当的设置，COM的数据与WIFI的网路数据相互转换。</p><p><img src="/2023/05/01/WIFI%E4%B8%AD%E7%9A%84AP%E5%92%8CSTA%E7%9A%84%E5%8C%BA%E5%88%AB/image-20230501160607207.png" alt="image-20230501160607207"></p><p>总结AP更像一个服务器 供手机，电脑这类的服务接入。</p><p>STA更像时手机电脑这些需要联网才能使用的设备。</p>]]></content>
      
      
      
        <tags>
            
            <tag> WIFI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM堆栈溢出问题</title>
      <link href="/2023/05/01/STM%E5%A0%86%E6%A0%88%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98/"/>
      <url>/2023/05/01/STM%E5%A0%86%E6%A0%88%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在进行STM32运算浮点数时遇到了变量内存越界的问题，一直有两个数算不对，算出来的数非常大，但是3个数一样的公式，有一个对或者2个对，</p><p><img src="/2023/05/01/STM%E5%A0%86%E6%A0%88%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98/image-20230501104454467.png" alt="image-20230501104454467"></p><p>通过修改<strong>Stack_Size</strong>大小解决该问题。</p><p>初始化堆栈空间大小，声明的变量会存放在堆栈区，如果太小那么，在调用时会发生，越界错误。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 堆内存和栈内存 </tag>
            
            <tag> Stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32的定时器</title>
      <link href="/2023/04/29/stm32%E7%9A%84%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
      <url>/2023/04/29/stm32%E7%9A%84%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Stm32纯软件方式实现定时功能"><a href="#Stm32纯软件方式实现定时功能" class="headerlink" title="Stm32纯软件方式实现定时功能"></a>Stm32纯软件方式实现定时功能</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> us<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>us <span class="token operator">*=</span> <span class="token number">72</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>us<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法肯定是不好的，造成CPU资源浪费，并且必然是不准确的延时，原因：1. 函数调用会有压栈和出栈的过程。2. ARM架构流水线的存在，执行一个命令的时间也是不确定的。 所以这种方式来延时 在准确度要求高的情况下是不可取的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket实现图像传输</title>
      <link href="/2023/04/28/Socket%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%83%8F%E4%BC%A0%E8%BE%93/"/>
      <url>/2023/04/28/Socket%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%83%8F%E4%BC%A0%E8%BE%93/</url>
      
        <content type="html"><![CDATA[<p>关于Socket的知识在这就不提了，这几天搞得太多了。</p><p><video src="../../../../../../../../123/WeChat Files/wxid_pk2e34ssqfdv22/FileStorage/Video/2023-04/cb2e26ae722b20ed36d181207fa037b3.mp4"></video></p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2<span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span>s <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">)</span> <span class="token comment"># 创建UDP套接字</span>addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'192.168.245.1'</span><span class="token punctuation">,</span> <span class="token number">8084</span><span class="token punctuation">)</span>  <span class="token comment"># 0.0.0.0表示本机</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>s<span class="token punctuation">.</span>setblocking<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 设置为非阻塞模式</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        data<span class="token punctuation">,</span> _ <span class="token operator">=</span> s<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">921600</span><span class="token punctuation">)</span>        receive_data <span class="token operator">=</span> np<span class="token punctuation">.</span>frombuffer<span class="token punctuation">(</span>data<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'uint8'</span><span class="token punctuation">)</span>        r_img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imdecode<span class="token punctuation">(</span>receive_data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>r_img<span class="token punctuation">,</span> <span class="token string">"server"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>FONT_HERSHEY_SIMPLEX<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'server'</span><span class="token punctuation">,</span> r_img<span class="token punctuation">)</span>    <span class="token keyword">except</span> BlockingIOError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 127.0.0.1表示本机的IP，用于测试，使用时需要改为服务端的ip</span>addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'192.168.245.1'</span><span class="token punctuation">,</span> <span class="token number">8084</span><span class="token punctuation">)</span>cap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 设置镜头分辨率，默认是640x480</span>cap<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>CAP_PROP_FRAME_WIDTH<span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>cap<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>CAP_PROP_FRAME_HEIGHT<span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span>s <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">)</span> <span class="token comment"># 创建UDP套接字</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    _<span class="token punctuation">,</span> img <span class="token operator">=</span> cap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 压缩图片</span>    _<span class="token punctuation">,</span> send_data <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imencode<span class="token punctuation">(</span><span class="token string">'.jpg'</span><span class="token punctuation">,</span> img<span class="token punctuation">,</span> <span class="token punctuation">[</span>cv2<span class="token punctuation">.</span>IMWRITE_JPEG_QUALITY<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>send_data<span class="token punctuation">,</span> addr<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'正在发送数据，大小:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>img<span class="token punctuation">.</span>size<span class="token punctuation">&#125;</span></span><span class="token string"> Byte'</span></span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">"client"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>FONT_HERSHEY_SIMPLEX<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'client'</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>    <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客突破5W字大关</title>
      <link href="/2023/04/26/%E5%8D%9A%E5%AE%A2%E7%AA%81%E7%A0%B45W%E5%AD%97%E5%A4%A7%E5%85%B3/"/>
      <url>/2023/04/26/%E5%8D%9A%E5%AE%A2%E7%AA%81%E7%A0%B45W%E5%AD%97%E5%A4%A7%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p><strong>不知不觉 3个月过去了，日常在博客的学习记录也突破了5W字。</strong></p><p>就简单做个总结庆祝一下吧。</p><p>以前从来没有写日记的习惯，但是有了这个博客之后确实在日常学习过程中多了很多总结和记录。这3个月感觉自己变化还是挺大的，感觉算是在嵌入式入门了吧，操作系统也会用3个了吧，</p><p>Windows，   linux 学的很杂，我自己电脑是Ubantu ，上课是Centos7 ， 树莓派是Respian，嗯linux学了3个版本，我都佩服我自己，</p><p>再就是在裸机上跑的FreeRTOS 实时操作系统了，做了一个雷达扫描建模的项目，也算是用了用，但是效果不好，还是雷达精度不够高。</p><p>Linux的话， 基本的命令 我觉得我用的还不错，这种有桌面的linux版本和Windows也差不多，总体来说Linux给人感觉就是高大上。现在</p><p>就是Vi编译器使得还是不熟。经过这几个项目给我的体会就是嵌入式数学真的很重要啊，很多东西都是要算的，最简单的小车走多远这就是最简单的计算，再就是雷达的坐标系变换， 再难就是汽车转向4个轮分别该怎么动，再难就是多自由度那种机械臂的逆运动求解。</p><p>无人机姿态计算。无人机项目现在是属于暂停状态了，怎么说呢，想进车企，但是2年过去了，车企的门槛一下子就高起来了，要不名校，要不研究生，我这一个破二本很难进去啊。难受（ :(  ）。</p><p>哦对了，明天新买的双目摄像头就到了，拿它做点什么呢。还没想出来，明天又该去搞一遍摄像头标定了，一开始还觉得很麻烦，现在果然是一件事干多了，你就干多了，也就会了。！经典的废话文学。！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Andorid开发之Socket编程</title>
      <link href="/2023/04/26/Andorid%E5%BC%80%E5%8F%91%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/04/26/Andorid%E5%BC%80%E5%8F%91%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/04/26/Andorid%E5%BC%80%E5%8F%91%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/image-20230426180624287.png" alt="image-20230426180624287"></p><h3 id="XML文件"><a href="#XML文件" class="headerlink" title="XML文件"></a>XML文件</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#f1f3f4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>700dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ffffff<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WIFI<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/mEtIP<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>autofillHints</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>drawableStart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/ic_tree<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>drawablePadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入服务器IP<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textWebEditText<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--端口 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/mEtPort<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>autofillHints</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>drawableStart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/ic_tree<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>drawablePadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入服务器端口<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--发送 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/mEtOut<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>autofillHints</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>drawableStart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/ic_tree<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>drawablePadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入发送数据<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/mBt1<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>连接<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">tools:</span>ignore</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UsingOnClickInXml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/mBt8<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>清除<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">tools:</span>ignore</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UsingOnClickInXml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/mBt7<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_marginBottom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>发送数据<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">tools:</span>ignore</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UsingOnClickInXml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/shipin2<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>传输状态<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button_shipin<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>开始传输视频<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/receive<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>384dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>65dp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/capturedImage<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>adjustViewBounds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>scaleType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fitXY<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/show_img<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tcp_led</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">AppCompatActivity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span></span><span class="token class-name">Bitmap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span></span><span class="token class-name">BitmapFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">Button</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">EditText</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">ImageView</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">TextView</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">Toast</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">UnknownHostException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    connectthread lianjie<span class="token punctuation">;</span>    <span class="token class-name">TextView</span> receive<span class="token punctuation">,</span> shipin2<span class="token punctuation">;</span>    <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Button</span> connect<span class="token punctuation">;</span>    <span class="token class-name">Button</span> shipin<span class="token punctuation">;</span>    <span class="token class-name">ImageView</span> capturedImage<span class="token punctuation">;</span>    <span class="token comment">//图像显示控件</span>    <span class="token class-name">String</span> jieshou<span class="token punctuation">;</span>    <span class="token keyword">int</span> aa <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">Bitmap</span> bitmap1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EditText</span> ip <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>mEtIP<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EditText</span> port <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>mEtPort<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EditText</span> out <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>mEtOut<span class="token punctuation">)</span><span class="token punctuation">;</span>        shipin <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_shipin<span class="token punctuation">)</span><span class="token punctuation">;</span>        shipin2 <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>shipin2<span class="token punctuation">)</span><span class="token punctuation">;</span>        receive <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>receive<span class="token punctuation">)</span><span class="token punctuation">;</span>        connect <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>mBt1<span class="token punctuation">)</span><span class="token punctuation">;</span>        capturedImage <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>capturedImage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//控制按键定义</span>        <span class="token class-name">Button</span> send <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>mBt7<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Button</span> <span class="token class-name">Clear</span> <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>mBt8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Clear</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shipin<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//                Bitmap bitmap = null;</span><span class="token comment">//                bitmap = BitmapFactory.decodeResource(getResources(),R.drawable.bh_round);</span><span class="token comment">//                //capturedImage.setImageResource(R.drawable.ganyukeqing);</span><span class="token comment">//                Log.e("main", String.valueOf(bitmap));</span><span class="token comment">//                capturedImage.setImageBitmap(bitmap);</span>                shipin2<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> aa <span class="token operator">+</span> <span class="token string">"次的图片大小为"</span> <span class="token operator">+</span> jieshou<span class="token punctuation">)</span><span class="token punctuation">;</span>                capturedImage<span class="token punctuation">.</span><span class="token function">setImageBitmap</span><span class="token punctuation">(</span>bitmap1<span class="token punctuation">)</span><span class="token punctuation">;</span>                aa<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment">//创建一个线程用来控制视频的传输和中断</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 判断是否连接上了 如果已经连接上了 则可以发送否则提示连接服务器</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>socket <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                                jieshou <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                                <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">"0x1111"</span><span class="token punctuation">;</span>  <span class="token comment">//发送0x11FF  提示可以开始传输 上位机接收到后 发送图片大小</span>                                lianjie<span class="token punctuation">.</span>outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                receive<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>text <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//进入循环接收</span>                                    <span class="token comment">// 接收图像的实现逻辑</span>                                    <span class="token comment">// 1. 首先服务器发送图片的大小消息  客户端第一次接收到图片的大小 这个大小应该在某个范围内做一个判断</span>                                    <span class="token comment">// 2. 接收到正确的图片大小消息之后，向服务器发送反馈  也就是完成第一次通信的握手， 发送开始发送图像的信号。</span>                                    <span class="token comment">// 3. 服务器接收到开始发送图像的消息后，开始传输图像的bytes数据，客户端进行while（1）式的接收。</span>                                    <span class="token comment">// 4. 当图像大小 js == imglen 之后 结束本次握手，</span>                                    <span class="token comment">// 5. 向服务器发送本次图像传输完成，可以开始下一次的循环。</span>                                    <span class="token comment">// 注意 socket接收的数据好像都是byte类型 都要转成字符串处理</span>                                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> img_Len_Buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                                    <span class="token keyword">int</span> imglen <span class="token operator">=</span> lianjie<span class="token punctuation">.</span>inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>img_Len_Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token class-name">String</span> imglen_str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>img_Len_Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 得到图片的大小</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>lianjie<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>imglen_str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//正则判断是否为数字字符串</span>                                        <span class="token keyword">int</span> imglen_int <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>imglen_str<span class="token punctuation">)</span><span class="token punctuation">;</span>                                        jieshou <span class="token operator">=</span> imglen_str<span class="token punctuation">;</span>                                        <span class="token keyword">int</span> js <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>imglen_int<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//声明一个这么大的byte数组 来接受 数据</span>                                        <span class="token class-name">String</span> text1 <span class="token operator">=</span> <span class="token string">"0xFFFF"</span><span class="token punctuation">;</span>  <span class="token comment">//发送0xFFFF  提示可以开始传输 上位机接收到进行传输</span>                                        lianjie<span class="token punctuation">.</span>outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>text1<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token keyword">while</span> <span class="token punctuation">(</span>js <span class="token operator">&lt;=</span> imglen_int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                            <span class="token keyword">int</span> recelen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                            recelen <span class="token operator">=</span> lianjie<span class="token punctuation">.</span>inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            js <span class="token operator">+=</span> recelen<span class="token punctuation">;</span>                                        <span class="token punctuation">&#125;</span>                                        <span class="token comment">//Log.e("main", new String(img));</span>                                        <span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                                        <span class="token class-name">BitmapFactory<span class="token punctuation">.</span>Options</span> opts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitmapFactory<span class="token punctuation">.</span>Options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token comment">//opts.inJustDecodeBounds = false; //为true时，返回的bitmap为null</span>                                        <span class="token keyword">if</span><span class="token punctuation">(</span>opts <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                            bitmap <span class="token operator">=</span> <span class="token class-name">BitmapFactory</span><span class="token punctuation">.</span><span class="token function">decodeByteArray</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                                            bitmap <span class="token operator">=</span> <span class="token class-name">BitmapFactory</span><span class="token punctuation">.</span><span class="token function">decodeByteArray</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>length<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token punctuation">&#125;</span>                                        bitmap1 <span class="token operator">=</span> bitmap<span class="token punctuation">;</span>                                        <span class="token comment">// 得到图片数据 img byte类型</span><span class="token comment">//                                    Bitmap bitmap = BitmapFactory.decodeByteArray(img, 0, img.length);</span><span class="token comment">//                                    Bitmap bitmap1 = Bitmap.createScaledBitmap(bitmap, capturedImage.getWidth(), capturedImage.getHeight(), true);</span><span class="token comment">//</span>                                        js <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                        jieshou <span class="token operator">=</span> imglen_str<span class="token punctuation">;</span> <span class="token comment">//记录执行次数</span>                                    <span class="token punctuation">&#125;</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token comment">// TODO Auto-generated catch block</span>                                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            <span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//不允许其他线程直接操作组件，用提供的此方法可以</span>                            <span class="token punctuation">&#123;</span>                                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token comment">// TODO Auto-generated method stub</span>                                    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"视频连接出错"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    receive<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"视频连接出错"</span> <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 连接 按键底层代码 在手机端 随便数个数  点连接就OK了 直接对a b 赋值</span>        connect<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//                a = ip.getText().toString();</span><span class="token comment">//                String c = port.getText().toString();</span><span class="token comment">//                if ("".equals(a) || "".equals(c)) &#123;</span><span class="token comment">//                    Toast.makeText(MainActivity.this, "请输入ip和端口号", Toast.LENGTH_SHORT).show();</span><span class="token comment">//                    receive.append("请输入ip和端口号" + "\r\n");</span><span class="token comment">//                &#125; else &#123;</span><span class="token comment">//                    b = Integer.parseInt(c);</span>                    a <span class="token operator">=</span> <span class="token string">"192.168.137.1"</span><span class="token punctuation">;</span>                    b <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">;</span>                    lianjie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">connectthread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    lianjie<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 发送数据</span>        send<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//子线程中进行网络操作</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>socket <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                                <span class="token class-name">String</span> text <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                lianjie<span class="token punctuation">.</span>outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                receive<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>text <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//Toast.makeText(MainActivity.this,text,Toast.LENGTH_SHORT).show();</span>                            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token comment">// TODO Auto-generated catch block</span>                                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            <span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//不允许其他线程直接操作组件，用提供的此方法可以</span>                            <span class="token punctuation">&#123;</span>                                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token comment">// TODO Auto-generated method stub</span>                                    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"请先建立连接"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    receive<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"请先建立连接"</span> <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这上边写代码</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> js <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        receive<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//子线程中进行网络相关操作</span>    <span class="token comment">// 联网子线程</span>    <span class="token keyword">class</span> connectthread <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^[-\\+]?[\\d]*$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"InfiniteLoopStatement"</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//连接</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//不允许其他线程直接操作组件，用提供的此方法可以</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// TODO Auto-generated method stub</span>                        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"连接成功"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        receive<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span> <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// TODO Auto-generated catch block</span>                <span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//不允许其他线程直接操作组件，用提供的此方法可以</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// TODO Auto-generated method stub</span>                        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"连接失败"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        receive<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"连接失败"</span> <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//不允许其他线程直接操作组件，用提供的此方法可以</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// TODO Auto-generated method stub</span>                        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"连接失败"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        receive<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"连接失败"</span> <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 接收图像</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>socket <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//获取输出流对象</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//不允许其他线程直接操作组件，用提供的此方法可以</span>                    <span class="token punctuation">&#123;</span>                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token comment">//Log.i("main", imglen_str);</span>                            <span class="token comment">//receive.append(new String(buffer, 0, len) + "\r\n");</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// MainActivity</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.tcp_led<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--需要对WiFi进行操作，所以需要设置网络权限--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.permission.BLUETOOTH_CONNECT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.permission.INTERNET<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--对蓝牙进行操作  开启蓝牙时，mBluetoothAdapter.enable()需要以下权限--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.permission.BLUETOOTH<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.permission.BLUETOOTH_ADMIN<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>        <span class="token attr-name"><span class="token namespace">android:</span>usesCleartextTraffic</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>allowBackup</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/show_img<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/app_name<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>roundIcon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/show_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>supportsRtl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@style/Theme.TCP_LED<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">tools:</span>ignore</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UnusedAttribute<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.action.MAIN<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发之第一个计算器</title>
      <link href="/2023/04/26/Android%E5%BC%80%E5%8F%91%E4%B9%8B%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
      <url>/2023/04/26/Android%E5%BC%80%E5%8F%91%E4%B9%8B%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/04/26/Android%E5%BC%80%E5%8F%91%E4%B9%8B%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/image-20230426180525920.png" alt="image-20230426180525920"></p><p>首先是<strong>XMl</strong>的布局，我这整体布局不算好看，没有UI的脑细胞，就这样吧，代码能跑就行。</p><h3 id="XMl文件"><a href="#XMl文件" class="headerlink" title="XMl文件"></a><strong>XMl文件</strong></h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 数值按钮   --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/s1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button2<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/s2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button3<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/s3<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button4<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/s4<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button5<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/s5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button6<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/s6<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button7<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/s7<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button8<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/s8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button9<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/s9<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 特殊点 0 没位置放了   --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/Button0<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/s0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button15<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/sshanchu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button16<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/sqingkong<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--  加减乘除 按键  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button10<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/sjia<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button11<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/sjian<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button12<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/scheng<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button13<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/schu<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/button14<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/sjisuan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/TextView1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/sjieguo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TextView</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="java文件"><a href="#java文件" class="headerlink" title="java文件"></a>java文件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>myapplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">AppCompatActivity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">Button</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">TextView</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">TextView</span> textView<span class="token punctuation">;</span>    <span class="token class-name">Button</span> bt0<span class="token punctuation">,</span> bt1<span class="token punctuation">,</span> bt2<span class="token punctuation">,</span> bt3<span class="token punctuation">,</span> bt4<span class="token punctuation">,</span> bt5<span class="token punctuation">,</span> bt6<span class="token punctuation">,</span> bt7<span class="token punctuation">,</span> bt8<span class="token punctuation">,</span> bt9<span class="token punctuation">,</span> bt10<span class="token punctuation">,</span> bt11<span class="token punctuation">,</span> bt12<span class="token punctuation">,</span> bt13<span class="token punctuation">,</span> bt14<span class="token punctuation">,</span> bt15<span class="token punctuation">,</span> bt16<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> id <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>Button0<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button1<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button2<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button3<span class="token punctuation">,</span>            <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button4<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button5<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button6<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button7<span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button8<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button9<span class="token punctuation">,</span>            <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button10<span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button11<span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button12<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button13<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button14<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button15<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button16<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">Button</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buttons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>bt0<span class="token punctuation">,</span> bt1<span class="token punctuation">,</span> bt2<span class="token punctuation">,</span> bt3<span class="token punctuation">,</span> bt4<span class="token punctuation">,</span> bt5<span class="token punctuation">,</span> bt6<span class="token punctuation">,</span> bt7<span class="token punctuation">,</span> bt8<span class="token punctuation">,</span> bt9<span class="token punctuation">,</span> bt10<span class="token punctuation">,</span> bt11<span class="token punctuation">,</span> bt12<span class="token punctuation">,</span> bt13<span class="token punctuation">,</span> bt14<span class="token punctuation">,</span> bt15<span class="token punctuation">,</span> bt16<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isclickeq <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">//是否点击了 ” = “ 号</span>    <span class="token class-name">String</span> strnum1<span class="token punctuation">,</span> strnum2 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> num1<span class="token punctuation">,</span> num2 <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> op <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> an <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag_jia<span class="token punctuation">,</span> flag_jian<span class="token punctuation">,</span> flag_cheng<span class="token punctuation">,</span> flag_chu <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        textView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>TextView1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buttons<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            buttons<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Button</span> button <span class="token operator">:</span> buttons<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>Button0<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isclickeq<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isclickeq <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                result <span class="token operator">+=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button1<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isclickeq<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isclickeq <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                result <span class="token operator">+=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button2<span class="token operator">:</span>                result <span class="token operator">+=</span> <span class="token string">"2"</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isclickeq<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isclickeq <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button3<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isclickeq<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isclickeq <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                result <span class="token operator">+=</span> <span class="token string">"3"</span><span class="token punctuation">;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button4<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isclickeq<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isclickeq <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                result <span class="token operator">+=</span> <span class="token string">"4"</span><span class="token punctuation">;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button5<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isclickeq<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isclickeq <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                result <span class="token operator">+=</span> <span class="token string">"5"</span><span class="token punctuation">;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button6<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isclickeq<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isclickeq <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                result <span class="token operator">+=</span> <span class="token string">"6"</span><span class="token punctuation">;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button7<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isclickeq<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isclickeq <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                result <span class="token operator">+=</span> <span class="token string">"7"</span><span class="token punctuation">;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button8<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isclickeq<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isclickeq <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                result <span class="token operator">+=</span> <span class="token string">"8"</span><span class="token punctuation">;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button9<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isclickeq<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isclickeq <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                result <span class="token operator">+=</span> <span class="token string">"9"</span><span class="token punctuation">;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button10<span class="token operator">:</span>                strnum1 <span class="token operator">=</span> textView<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//保存第一个操作数</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>strnum1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                num1 <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>strnum1<span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                op <span class="token operator">=</span> <span class="token string">"+"</span><span class="token punctuation">;</span>                isclickeq <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button11<span class="token operator">:</span>                strnum1 <span class="token operator">=</span> textView<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>strnum1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                num1 <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>strnum1<span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                op <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">;</span>                isclickeq <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button12<span class="token operator">:</span>                strnum1 <span class="token operator">=</span> textView<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>strnum1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                num1 <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>strnum1<span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                op <span class="token operator">=</span> <span class="token string">"*"</span><span class="token punctuation">;</span>                isclickeq <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button13<span class="token operator">:</span>                strnum1 <span class="token operator">=</span> textView<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>strnum1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                num1 <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>strnum1<span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                op <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">;</span>                isclickeq <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button15<span class="token operator">:</span>        <span class="token comment">//删除</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isclickeq<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isclickeq <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                    result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button16<span class="token operator">:</span>     <span class="token comment">//清空</span>                result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button14<span class="token operator">:</span>     <span class="token comment">//计算   也就是 ” = “号</span>                strnum2 <span class="token operator">=</span> textView<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>strnum2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                num2 <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>strnum2<span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token operator">:</span>                        an <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token operator">:</span>                        an <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"*"</span><span class="token operator">:</span>                        an <span class="token operator">=</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"/"</span><span class="token operator">:</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>num2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                        an <span class="token operator">=</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token operator">:</span>                        an <span class="token operator">=</span> <span class="token number">0.00</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>an <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                op <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                isclickeq <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python之opencv常用的几个功能实现</title>
      <link href="/2023/04/26/python%E4%B9%8Bopencv%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/04/26/python%E4%B9%8Bopencv%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="对图像灰度处理"><a href="#对图像灰度处理" class="headerlink" title="对图像灰度处理"></a>对图像灰度处理</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @Time    : 2023/4/15 11:58</span><span class="token comment"># @Author  : Wyt</span><span class="token comment"># @File    : 图像灰度处理.py</span><span class="token keyword">import</span> cv2<span class="token keyword">import</span> osimg_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>input_path <span class="token operator">=</span> <span class="token string">"./RightP"</span>  <span class="token comment"># 要处理的图片所在的文件夹</span>output_path <span class="token operator">=</span> <span class="token string">"./Right1"</span>  <span class="token comment"># 处理完的图片放在这里</span><span class="token keyword">for</span> item <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>input_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    img_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>input_path<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> imagepath <span class="token keyword">in</span> img_list<span class="token punctuation">:</span>    <span class="token comment"># print(imagepath)</span>    image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>imagepath<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>IMREAD_GRAYSCALE<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output_path <span class="token operator">+</span> <span class="token string">'%dR.jpg'</span> <span class="token operator">%</span> count<span class="token punctuation">)</span>  <span class="token comment"># 显示保存文件的路径及保存的文件名</span>    cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>output_path <span class="token operator">+</span> <span class="token string">'%dR.jpg'</span> <span class="token operator">%</span> count<span class="token punctuation">,</span> image<span class="token punctuation">)</span>    <span class="token comment"># 按一定路径将图片保存下来并命名，加号左边代表保存路径，右边代表文件命</span>    <span class="token comment"># %d代表后面的% count中的count的数值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------执行中，保存第&#123;&#125;张----------"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    count <span class="token operator">+=</span> <span class="token number">1</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>output_path<span class="token punctuation">)</span><span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'garyimg'</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span>    <span class="token comment">#cv2.waitKey(0)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单击拍照并存到某个目录中"><a href="#单击拍照并存到某个目录中" class="headerlink" title="单击拍照并存到某个目录中"></a>单击拍照并存到某个目录中</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @Time    : 2023/4/13 21:23</span><span class="token comment"># @Author  : Wyt</span><span class="token comment"># @File    : 单击拍照.py</span><span class="token keyword">import</span> cv2js <span class="token operator">=</span> <span class="token number">1</span>cap1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">+</span> cv2<span class="token punctuation">.</span>CAP_DSHOW<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>  <span class="token comment"># 这里Property identifier要求是int</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>  <span class="token comment"># 见下图,3表示CV_CAP_PROP_FRAME_WIDTH,设为270.（设为1和270的效果一样）</span><span class="token comment"># 注意顺序，先设置分辨率，再实例化另一个摄像头。否则依旧报错。</span>cap2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> cv2<span class="token punctuation">.</span>CAP_DSHOW<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>ret1<span class="token punctuation">,</span> frame1 <span class="token operator">=</span> cap1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>ret2<span class="token punctuation">,</span> frame2 <span class="token operator">=</span> cap2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> ret1 <span class="token keyword">and</span> ret2<span class="token punctuation">:</span>    ret1<span class="token punctuation">,</span> frame1 <span class="token operator">=</span> cap1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    ret2<span class="token punctuation">,</span> frame2 <span class="token operator">=</span> cap2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'frame1'</span><span class="token punctuation">,</span> frame1<span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'frame2'</span><span class="token punctuation">,</span> frame2<span class="token punctuation">)</span>    key <span class="token operator">=</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"./number/nun1/num_&#123;&#125;.jpg"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token punctuation">,</span> frame1<span class="token punctuation">)</span>  <span class="token comment"># 自己设置拍摄的照片的存储位置</span>        <span class="token comment"># cv2.imwrite("right0.bmp", frame2)  # 自己设置拍摄的照片的存储位置</span>        js <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>cap1<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cap2<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打开双目摄像头"><a href="#打开双目摄像头" class="headerlink" title="打开双目摄像头"></a>打开双目摄像头</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打开摄像头实现拍照</span><span class="token keyword">import</span> cv2cap1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> cv2<span class="token punctuation">.</span>CAP_DSHOW<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>  <span class="token comment"># 这里Property identifier要求是int</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>  <span class="token comment"># 见下图,3表示CV_CAP_PROP_FRAME_WIDTH,设为270.（设为1和270的效果一样）</span><span class="token comment"># 注意顺序，先设置分辨率，再实例化另一个摄像头。否则依旧报错。</span>cap2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> cv2<span class="token punctuation">.</span>CAP_DSHOW<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>ret1<span class="token punctuation">,</span> frame1 <span class="token operator">=</span> cap1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>ret2<span class="token punctuation">,</span> frame2 <span class="token operator">=</span> cap2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> ret1 <span class="token keyword">and</span> ret2<span class="token punctuation">:</span>    ret1<span class="token punctuation">,</span> frame1 <span class="token operator">=</span> cap1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    ret2<span class="token punctuation">,</span> frame2 <span class="token operator">=</span> cap2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'frame1'</span><span class="token punctuation">,</span> frame1<span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'frame2'</span><span class="token punctuation">,</span> frame2<span class="token punctuation">)</span>    key <span class="token operator">=</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>cap1<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cap2<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="双目测距"><a href="#双目测距" class="headerlink" title="双目测距"></a>双目测距</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @Time    : 2023/4/15 14:12</span><span class="token comment"># @Author  : Wyt</span><span class="token comment"># @File    : 测距.py</span><span class="token keyword">import</span> cv2<span class="token keyword">import</span> camera_configs<span class="token keyword">import</span> mathcap1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> cv2<span class="token punctuation">.</span>CAP_DSHOW<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>  <span class="token comment"># 这里Property identifier要求是int</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>  <span class="token comment"># 见下图,3表示CV_CAP_PROP_FRAME_WIDTH,设为270.（设为1和270的效果一样）</span><span class="token comment"># 注意顺序，先设置分辨率，再实例化另一个摄像头。否则依旧报错。</span>cap2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> cv2<span class="token punctuation">.</span>CAP_DSHOW<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span><span class="token comment"># 鼠标回调函数</span><span class="token keyword">def</span> <span class="token function">onmouse_pick_points</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> event <span class="token operator">==</span> cv2<span class="token punctuation">.</span>EVENT_LBUTTONDOWN<span class="token punctuation">:</span>        threeD <span class="token operator">=</span> param        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n像素坐标 x = %d, y = %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># print("世界坐标是：", threeD[y][x][0], threeD[y][x][1], threeD[y][x][2], "mm")</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"世界坐标xyz 是："</span><span class="token punctuation">,</span> threeD<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">,</span> threeD<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">,</span> threeD<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">,</span> <span class="token string">"m"</span><span class="token punctuation">)</span>        distance <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>threeD<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> threeD<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> threeD<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>        distance <span class="token operator">=</span> distance <span class="token operator">/</span> <span class="token number">1000.0</span>  <span class="token comment"># mm -> m</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"距离是："</span><span class="token punctuation">,</span> distance<span class="token punctuation">,</span> <span class="token string">"m"</span><span class="token punctuation">)</span>WIN_NAME <span class="token operator">=</span> <span class="token string">'Deep'</span>cv2<span class="token punctuation">.</span>namedWindow<span class="token punctuation">(</span>WIN_NAME<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>WINDOW_AUTOSIZE<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    ret1<span class="token punctuation">,</span> frame1 <span class="token operator">=</span> cap1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    ret2<span class="token punctuation">,</span> frame2 <span class="token operator">=</span> cap2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    imgL <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>frame1<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>  <span class="token comment"># 将BGR格式转换成灰度图片</span>    imgR <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>frame2<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>    <span class="token comment"># cv2.remap 重映射，就是把一幅图像中某位置的像素放置到另一个图片指定位置的过程。</span>    <span class="token comment"># 依据MATLAB测量数据重建无畸变图片</span>    img1_rectified <span class="token operator">=</span> cv2<span class="token punctuation">.</span>remap<span class="token punctuation">(</span>imgL<span class="token punctuation">,</span> camera_configs<span class="token punctuation">.</span>left_map1<span class="token punctuation">,</span> camera_configs<span class="token punctuation">.</span>left_map2<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>INTER_LINEAR<span class="token punctuation">)</span>    img2_rectified <span class="token operator">=</span> cv2<span class="token punctuation">.</span>remap<span class="token punctuation">(</span>imgR<span class="token punctuation">,</span> camera_configs<span class="token punctuation">.</span>right_map1<span class="token punctuation">,</span> camera_configs<span class="token punctuation">.</span>right_map2<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>INTER_LINEAR<span class="token punctuation">)</span>    imageL <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img1_rectified<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_GRAY2BGR<span class="token punctuation">)</span>    imageR <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img2_rectified<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_GRAY2BGR<span class="token punctuation">)</span>    <span class="token comment"># BM</span>    numberOfDisparities <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">640</span> <span class="token operator">//</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">-</span><span class="token number">16</span>  <span class="token comment"># 640对应是分辨率的宽</span>    stereo <span class="token operator">=</span> cv2<span class="token punctuation">.</span>StereoBM_create<span class="token punctuation">(</span>numDisparities<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> blockSize<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token comment"># 立体匹配</span>    stereo<span class="token punctuation">.</span>setROI1<span class="token punctuation">(</span>camera_configs<span class="token punctuation">.</span>validPixROI1<span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setROI2<span class="token punctuation">(</span>camera_configs<span class="token punctuation">.</span>validPixROI2<span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setPreFilterCap<span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setBlockSize<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setMinDisparity<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setNumDisparities<span class="token punctuation">(</span>numberOfDisparities<span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setTextureThreshold<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setUniquenessRatio<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setSpeckleWindowSize<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setSpeckleRange<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setDisp12MaxDiff<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    disparity <span class="token operator">=</span> stereo<span class="token punctuation">.</span>compute<span class="token punctuation">(</span>img1_rectified<span class="token punctuation">,</span> img2_rectified<span class="token punctuation">)</span>  <span class="token comment"># 计算视差</span>    disp <span class="token operator">=</span> cv2<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span>disparity<span class="token punctuation">,</span> disparity<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> norm_type<span class="token operator">=</span>cv2<span class="token punctuation">.</span>NORM_MINMAX<span class="token punctuation">,</span> dtype<span class="token operator">=</span>cv2<span class="token punctuation">.</span>CV_8U<span class="token punctuation">)</span>  <span class="token comment"># 归一化函数算法</span>    threeD <span class="token operator">=</span> cv2<span class="token punctuation">.</span>reprojectImageTo3D<span class="token punctuation">(</span>disparity<span class="token punctuation">,</span> camera_configs<span class="token punctuation">.</span>Q<span class="token punctuation">,</span> handleMissingValues<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 计算三维坐标数据值</span>    threeD <span class="token operator">=</span> threeD <span class="token operator">*</span> <span class="token number">16</span>    <span class="token comment"># threeD[y][x] x:0~640; y:0~480;   !!!!!!!!!!</span>    cv2<span class="token punctuation">.</span>setMouseCallback<span class="token punctuation">(</span>WIN_NAME<span class="token punctuation">,</span> onmouse_pick_points<span class="token punctuation">,</span> threeD<span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">,</span> frame1<span class="token punctuation">)</span>    <span class="token comment"># cv2.imshow("right", frame2)</span>    <span class="token comment"># cv2.imshow("left_r", imgL)</span>    <span class="token comment"># cv2.imshow("right_r", imgR)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>WIN_NAME<span class="token punctuation">,</span> disp<span class="token punctuation">)</span>  <span class="token comment"># 显示深度图的双目画面</span>    key <span class="token operator">=</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>cap1<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之文字转语音</title>
      <link href="/2023/04/26/Python%E4%B9%8B%E6%96%87%E5%AD%97%E8%BD%AC%E8%AF%AD%E9%9F%B3/"/>
      <url>/2023/04/26/Python%E4%B9%8B%E6%96%87%E5%AD%97%E8%BD%AC%E8%AF%AD%E9%9F%B3/</url>
      
        <content type="html"><![CDATA[<p>自制 <strong>Jarvis</strong>的第一步 文字转语音 先让<strong>Jarvis</strong>学会说话。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @Time    : 2023/4/20 18:28</span><span class="token comment"># @Author  : Wyt</span><span class="token comment"># @File    : Hello Jarvis.py</span><span class="token comment"># import pyttsx3 as pyttsx</span><span class="token comment">#</span><span class="token comment"># # 调用初始化方法，获取讲话对象</span><span class="token comment"># engine = pyttsx.init()</span><span class="token comment"># engine.say('加油！努力吧少年')</span><span class="token comment"># engine.runAndWait()</span><span class="token keyword">from</span> win32com<span class="token punctuation">.</span>client <span class="token keyword">import</span> Dispatch<span class="token comment"># 获取讲话对象</span>speaker <span class="token operator">=</span> Dispatch<span class="token punctuation">(</span><span class="token string">'SAPI.SpVoice'</span><span class="token punctuation">)</span><span class="token comment"># 讲话内容</span>speaker<span class="token punctuation">.</span>Speak<span class="token punctuation">(</span><span class="token string">'Hello, Jarvis'</span><span class="token punctuation">)</span><span class="token comment"># 释放对象</span><span class="token keyword">del</span> speaker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这东西还要改windows的语音，怕把电脑搞废废，没改。</p><p>凑活听吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> python之文字转语音 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之人脸识别</title>
      <link href="/2023/04/26/Python%E4%B9%8B%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
      <url>/2023/04/26/Python%E4%B9%8B%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>浅尝一下人脸识别这种高级东西的使用用法。</p><p>在同学面前装装逼用。</p><p>奈何自己电脑太垃圾，一个Windows系统就不行了，本来打算安个好的Ubantu系统，奈何内存太小，安不了太好的，很多事在linux上干不了，遗憾。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># 摄像头头像识别</span><span class="token keyword">import</span> face_recognition<span class="token keyword">import</span> cv2video_capture <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 本地图像</span>chenduling_image <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>load_image_file<span class="token punctuation">(</span><span class="token string">"left0.jpg"</span><span class="token punctuation">)</span>chenduling_face_encoding <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>face_encodings<span class="token punctuation">(</span>chenduling_image<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 本地图像二</span>sunyizheng_image <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>load_image_file<span class="token punctuation">(</span><span class="token string">"./picture/face1.jpg"</span><span class="token punctuation">)</span>sunyizheng_face_encoding <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>face_encodings<span class="token punctuation">(</span>sunyizheng_image<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 本地图片三</span>zhangzetian_image <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>load_image_file<span class="token punctuation">(</span><span class="token string">"./picture/face1.jpg"</span><span class="token punctuation">)</span>zhangzetian_face_encoding <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>face_encodings<span class="token punctuation">(</span>zhangzetian_image<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># Create arrays of known face encodings and their names</span><span class="token comment"># 脸部特征数据的集合</span>known_face_encodings <span class="token operator">=</span> <span class="token punctuation">[</span>    chenduling_face_encoding<span class="token punctuation">,</span>    sunyizheng_face_encoding<span class="token punctuation">,</span>    zhangzetian_face_encoding<span class="token punctuation">]</span><span class="token comment"># 人物名称的集合</span>known_face_names <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"master"</span><span class="token punctuation">,</span>    <span class="token string">"sunyizheng"</span><span class="token punctuation">,</span>    <span class="token string">"chenduling"</span><span class="token punctuation">]</span>face_locations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>face_encodings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>face_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>process_this_frame <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 读取摄像头画面</span>    ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> video_capture<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 改变摄像头图像的大小，图像小，所做的计算就少</span>    small_frame <span class="token operator">=</span> cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fx<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span> fy<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">)</span>    <span class="token comment"># opencv的图像是BGR格式的，而我们需要是的RGB格式的，因此需要进行一个转换。</span>    rgb_small_frame <span class="token operator">=</span> small_frame<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment"># Only process every other frame of video to save time</span>    <span class="token keyword">if</span> process_this_frame<span class="token punctuation">:</span>        <span class="token comment"># 根据encoding来判断是不是同一个人，是就输出true，不是为flase</span>        face_locations <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>face_locations<span class="token punctuation">(</span>rgb_small_frame<span class="token punctuation">)</span>        face_encodings <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>face_encodings<span class="token punctuation">(</span>rgb_small_frame<span class="token punctuation">,</span> face_locations<span class="token punctuation">)</span>        face_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> face_encoding <span class="token keyword">in</span> face_encodings<span class="token punctuation">:</span>            <span class="token comment"># 默认为unknown</span>            matches <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>compare_faces<span class="token punctuation">(</span>known_face_encodings<span class="token punctuation">,</span> face_encoding<span class="token punctuation">)</span>            name <span class="token operator">=</span> <span class="token string">"Unknown"</span>            <span class="token comment"># if match[0]:</span>            <span class="token comment">#     name = "michong"</span>            <span class="token comment"># If a match was found in known_face_encodings, just use the first one.</span>            <span class="token keyword">if</span> <span class="token boolean">True</span> <span class="token keyword">in</span> matches<span class="token punctuation">:</span>                flag <span class="token operator">=</span> <span class="token number">1</span>                first_match_index <span class="token operator">=</span> matches<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>                name <span class="token operator">=</span> known_face_names<span class="token punctuation">[</span>first_match_index<span class="token punctuation">]</span>            face_names<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    process_this_frame <span class="token operator">=</span> <span class="token keyword">not</span> process_this_frame    <span class="token comment"># 将捕捉到的人脸显示出来</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">,</span> name <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>face_locations<span class="token punctuation">,</span> face_names<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Scale back up face locations since the frame we detected in was scaled to 1/4 size</span>        top <span class="token operator">*=</span> <span class="token number">4</span>        right <span class="token operator">*=</span> <span class="token number">4</span>        bottom <span class="token operator">*=</span> <span class="token number">4</span>        left <span class="token operator">*=</span> <span class="token number">4</span>        <span class="token comment"># 矩形框</span>        cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>right<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment"># 加上标签</span>        cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token punctuation">(</span>left<span class="token punctuation">,</span> bottom <span class="token operator">-</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>right<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>FILLED<span class="token punctuation">)</span>        font <span class="token operator">=</span> cv2<span class="token punctuation">.</span>FONT_HERSHEY_DUPLEX        cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">,</span> bottom <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> font<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># Display</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'monitor'</span><span class="token punctuation">,</span> frame<span class="token punctuation">)</span>    <span class="token comment"># 按Q退出</span>    <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token comment"># 向从机发送执行指令</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"识别到目标了"</span><span class="token punctuation">)</span>video_capture<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 人脸识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>can总线深入学习</title>
      <link href="/2023/04/26/can%E6%80%BB%E7%BA%BF%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/04/26/can%E6%80%BB%E7%BA%BF%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>CAN总线 </p><h3 id="标准标识符-和-扩展标识符区别"><a href="#标准标识符-和-扩展标识符区别" class="headerlink" title="标准标识符 和 扩展标识符区别"></a>标准标识符 和 扩展标识符区别</h3><p><img src="/2023/04/26/can%E6%80%BB%E7%BA%BF%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20230426164432167.png" alt="image-20230426164432167"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">TxMessage<span class="token punctuation">.</span>IDE<span class="token operator">=</span> CAN_ID_EXT<span class="token punctuation">;</span><span class="token comment">//CAN_Id_Standard; // 标准帧  CAN_Id_Extended //拓展帧</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">TxMessage<span class="token punctuation">.</span>StdId <span class="token operator">=</span> <span class="token number">0x7FF</span><span class="token punctuation">;</span> <span class="token comment">// 标准标识符  此时扩展帧为0x00</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>标准帧：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//CAN_Id_Standard 或 CAN_ID_STD</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>StdId 是一个11为的寄存器。所以最大为）0X7FF</p><p>标准表示符最大值为0X7FF 最小值为0 。</p><p> 在定义时可以直接写0X7FF 也可以写0XFFFF去进行左移操作 左移5位也是0X7FF。</p><p>这样接收端收到的数据是对的，如果标识符越界这半位直接没了 如果写成0XFFF 那收到的id为 0XFF。</p><p>扩展帧：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//CAN_Id_Extended 或 CAN_ID_EXT</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">TxMessage<span class="token punctuation">.</span>ExtId <span class="token operator">=</span> <span class="token number">0xFFFFFFFF</span><span class="token operator">>></span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 设置扩展标示符  此时标准帧为0x00</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>总结：</p><p>CAN总线的标准帧和扩展帧主要决定帧ID的长度，</p><p>标准帧的帧ID长度是11位，帧ID的范围是000-7FF。</p><p>扩展帧的帧ID长度是29位，帧ID的范围是0000 0000-1FFF FFFF。CANopen帧ID最多是11位的，因此是标准帧；而SAE 1939协议通常是18XX XXXX的帧ID，是29位的，因此是扩展帧。</p><h3 id="数据帧-和-远程帧的区别"><a href="#数据帧-和-远程帧的区别" class="headerlink" title="数据帧 和 远程帧的区别"></a>数据帧 和 远程帧的区别</h3><p>数据帧：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">TxMessage<span class="token punctuation">.</span>RTR<span class="token operator">=</span> CAN_RTR_Data<span class="token punctuation">;</span> <span class="token comment">//数据帧  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">TxMessage<span class="token punctuation">.</span>RTR<span class="token operator">=</span> CAN_RTR_Remote<span class="token punctuation">;</span> <span class="token comment">//远程帧</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数据帧就是会发送这个 CanTxMsg TxMessage结构体中的Data数据。</p><p>但是远程帧只会发送id信息， 更多的用法是 向节点去要数据，请求数据的功能。</p><p>总结： 数据帧发数据， 远程帧  去要数据。</p><h3 id="屏蔽滤波的使用"><a href="#屏蔽滤波的使用" class="headerlink" title="屏蔽滤波的使用"></a>屏蔽滤波的使用</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//高16 低16位</span>CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterIdHigh<span class="token operator">=</span><span class="token number">0x0000</span><span class="token punctuation">;</span> <span class="token comment">////32位ID</span>CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterIdLow<span class="token operator">=</span><span class="token number">0x0000</span><span class="token punctuation">;</span><span class="token comment">//屏蔽滤波位 当为1 关心这个位 当为0 不关心这个位  就是这么好理解啊</span>CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterMaskIdHigh<span class="token operator">=</span><span class="token number">0x0000</span><span class="token punctuation">;</span><span class="token comment">//32位MASK</span>CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterMaskIdLow<span class="token operator">=</span><span class="token number">0x0000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//高16 低16位</span>CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterIdHigh<span class="token operator">=</span><span class="token number">0xFF00</span><span class="token punctuation">;</span> <span class="token comment">////32位ID</span>CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterIdLow<span class="token operator">=</span><span class="token number">0x0000</span><span class="token punctuation">;</span><span class="token comment">//屏蔽滤波位 当为1 关心这个位 当为0 不关心这个位  就是这么好理解啊</span>CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterMaskIdHigh<span class="token operator">=</span><span class="token number">0xFF00</span><span class="token punctuation">;</span><span class="token comment">//32位MASK</span>CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterMaskIdLow<span class="token operator">=</span><span class="token number">0x0000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种情况就是 只能接收到ID高16位 为 0xFF 开头的ID的数据。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//高16 低16位</span>CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterIdHigh<span class="token operator">=</span><span class="token number">0xFF00</span><span class="token punctuation">;</span> <span class="token comment">////32位ID</span>CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterIdLow<span class="token operator">=</span><span class="token number">0x0000</span><span class="token punctuation">;</span><span class="token comment">//这32位使用来配匹ID信息的 </span><span class="token comment">//屏蔽滤波位 当为1 关心这个位 当为0 不关心这个位  就是这么好理解啊</span>CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterMaskIdHigh<span class="token operator">=</span><span class="token number">0xFF00</span><span class="token punctuation">;</span><span class="token comment">//32位MASK</span>CAN_FilterInitStructure<span class="token punctuation">.</span>CAN_FilterMaskIdLow<span class="token operator">=</span><span class="token number">0x0000</span><span class="token punctuation">;</span><span class="token comment">//这32位是用来设置我们需要进行判断哪一位</span><span class="token comment">//如果只想要 我这一个id 那么 屏蔽滤波就设置为和ID一样就OK了 ，这样肯定能收到   不知道有没有特例存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="另外附一个CAN的高级用法。可以将29位拓展ID也用来当成数据来传输-，这样每次就不用呗CAN的8位通信方式限制住了。"><a href="#另外附一个CAN的高级用法。可以将29位拓展ID也用来当成数据来传输-，这样每次就不用呗CAN的8位通信方式限制住了。" class="headerlink" title="另外附一个CAN的高级用法。可以将29位拓展ID也用来当成数据来传输 ，这样每次就不用呗CAN的8位通信方式限制住了。"></a>另外附一个CAN的高级用法。可以将29位拓展ID也用来当成数据来传输 ，这样每次就不用呗CAN的8位通信方式限制住了。</h4>]]></content>
      
      
      
        <tags>
            
            <tag> CAN学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolo5第一次训练成功</title>
      <link href="/2023/04/22/yolo5%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%AE%AD%E7%BB%83%E6%88%90%E5%8A%9F/"/>
      <url>/2023/04/22/yolo5%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%AE%AD%E7%BB%83%E6%88%90%E5%8A%9F/</url>
      
        <content type="html"><![CDATA[<p>w</p><p>yolo5图像识别之前训练过2次，但是之前的数据量太小了，效果不好，这次选择只用1和2这两个数字进行识别，一个数字大概50张图片左右。 看着效果还不错，之前训练完之后效果不好的原因可能和摄像头也有关系，用的双目摄像头进行拍照，之后用笔记本自带的摄像头进行识别可能图像上有误差存在造成效果不好，这次1和2两个数字的识别感觉好了很多，数据量了上去效果还是可以的，不管是笔记本摄像头还是双目摄像头都可以识别出1 和 2 来，但是仍然有问题就是其他的数字也随机的被认为是1 2。</p><p><img src="/2023/04/22/yolo5%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%AE%AD%E7%BB%83%E6%88%90%E5%8A%9F/image-20230422162134085.png" alt="image-20230422162134085"></p><p>效果还可以 反着放也可以识别出来。</p><p><img src="/2023/04/22/yolo5%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%AE%AD%E7%BB%83%E6%88%90%E5%8A%9F/image-20230422162213207.png" alt="image-20230422162213207"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Yolo5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己编写的一段CAN通信校验</title>
      <link href="/2023/04/22/%E8%87%AA%E5%B7%B1%E7%BC%96%E5%86%99%E7%9A%84%E4%B8%80%E6%AE%B5CAN%E9%80%9A%E4%BF%A1%E6%A0%A1%E9%AA%8C/"/>
      <url>/2023/04/22/%E8%87%AA%E5%B7%B1%E7%BC%96%E5%86%99%E7%9A%84%E4%B8%80%E6%AE%B5CAN%E9%80%9A%E4%BF%A1%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>这块分为CAN主节点，和CAN挂载节点。</p><p>主节点部分</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//开始第一次发送数据</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>TendBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//填充发送缓冲区</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token function">LCD_ShowxNum</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">210</span><span class="token punctuation">,</span>TendBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0X80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示数据</span><span class="token keyword">else</span> <span class="token function">LCD_ShowxNum</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span>TendBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0X80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示数据</span><span class="token punctuation">&#125;</span>isTend <span class="token operator">=</span> <span class="token function">Can_Send_Msg</span><span class="token punctuation">(</span>TendBuf<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送8个字节</span><span class="token keyword">while</span><span class="token punctuation">(</span>isTend<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果发送失败 则继续尝试发送</span>isTend <span class="token operator">=</span> <span class="token function">Can_Send_Msg</span><span class="token punctuation">(</span>TendBuf<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//接收数据</span>isRece <span class="token operator">=</span> <span class="token function">Can_Receive_Msg</span><span class="token punctuation">(</span>ReceBuf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> isRece<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token function">LCD_ShowxNum</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">270</span><span class="token punctuation">,</span>CheckBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0X80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示数据</span><span class="token keyword">else</span> <span class="token function">LCD_ShowxNum</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">290</span><span class="token punctuation">,</span>CheckBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0X80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示数据</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token function">LCD_ShowxNum</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">310</span><span class="token punctuation">,</span>ReceBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0X80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示数据</span><span class="token keyword">else</span> <span class="token function">LCD_ShowxNum</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">330</span><span class="token punctuation">,</span>ReceBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0X80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示数据</span><span class="token punctuation">&#125;</span><span class="token comment">//进行校验</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> isRece<span class="token punctuation">;</span> j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ReceBuf<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> CheckBuf<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">LCD_ShowxNum</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">370</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0X80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示数据</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">" Success:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//提示接收到的数据</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">" fail:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//提示接收到的数据</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> isRece<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>CheckBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TendBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//测试是否成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>挂载节点部分</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">isRece <span class="token operator">=</span> <span class="token function">Can_Receive_Msg</span><span class="token punctuation">(</span>ReceBuf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//接收主节点数据</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>isRece<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果没有收到则一直收 直到接收到一次数据后 继续进行之后的任务</span>isRece <span class="token operator">=</span> <span class="token function">Can_Receive_Msg</span><span class="token punctuation">(</span>ReceBuf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//发送数据</span>isTend <span class="token operator">=</span> <span class="token function">Can_Send_Msg</span><span class="token punctuation">(</span>ReceBuf<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送8个字节</span><span class="token keyword">while</span><span class="token punctuation">(</span>isTend<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果失败了就一直发送</span>isTend <span class="token operator">=</span> <span class="token function">Can_Send_Msg</span><span class="token punctuation">(</span>ReceBuf<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//执行操作 否则没接收到</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> isRece<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ReceBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写完了才知道CAN这个东西好像很稳定，只要是接收到了，就是对的。嗯。。。1小时白白浪费，当练逻辑了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CAN学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAN的主从通信测试</title>
      <link href="/2023/04/20/CAN%E7%9A%84%E4%B8%BB%E4%BB%8E%E9%80%9A%E4%BF%A1%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/04/20/CAN%E7%9A%84%E4%B8%BB%E4%BB%8E%E9%80%9A%E4%BF%A1%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="CAN通信测试"><a href="#CAN通信测试" class="headerlink" title="CAN通信测试"></a>CAN通信测试</h3><p>CAN通信知道了很久了，一直没机会去学，雷达项目结束之后，找了几个can模块计划做点什么东西，拿到一个新模块首先就是测试之间的通信，两个之间互相进行最简单的信息传递。CAN应该是属于串行的通信方式，发送的时候并不能接收，同一时刻只能单向通信，</p><p>现在用的是精英版和C8T6 进行互相通信，0.5秒发送一次数据。 接线和串口是相反的，类似SPI和IIC的接线，相同的线号去接在一起就OK。</p><p>注意这块都要是普通模式下进行。 回环的化，那精英版直接就自己玩自己的了，不理C8T6了，在屏幕上看就是一闪一闪的 但是数据并没有更新。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  u8 key<span class="token punctuation">;</span>u8 i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>u8 cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>u8 canbuf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>u8 res<span class="token punctuation">;</span><span class="token comment">//CAN工作模式;CAN_Mode_Normal(0)：普通模式，CAN_Mode_LoopBack(1)：环回模式</span><span class="token function">delay_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//延时函数初始化  </span><span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置中断优先级分组为组2：2位抢占优先级，2位响应优先级</span><span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//串口初始化为115200</span><span class="token comment">// 波特率 = Fpclk1/((tbs1+1+tbs2+1+1)*brp);</span><span class="token comment">// bt = 36M / (7 + 1 + 8 + 1)* 4)  =  36 / (16 * 4) = 36M / 64 = 500Kbps</span><span class="token function">CAN_Mode_Init</span><span class="token punctuation">(</span>CAN_SJW_1tq<span class="token punctuation">,</span>CAN_BS2_8tq<span class="token punctuation">,</span>CAN_BS1_9tq<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>CAN_Mode_Normal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//CAN初始化环回模式,波特率500Kbps    </span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//发</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>canbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token operator">+</span>i<span class="token punctuation">;</span><span class="token comment">//填充发送缓冲区</span>cnt <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>canbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>res<span class="token operator">=</span><span class="token function">Can_Send_Msg</span><span class="token punctuation">(</span>canbuf<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送8个字节</span><span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//收</span>key<span class="token operator">=</span><span class="token function">Can_Receive_Msg</span><span class="token punctuation">(</span>canbuf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment">//接收到有数据</span><span class="token punctuation">&#123;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>key<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>canbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两边的代码都是一样的。</p><h3 id="波特率计算"><a href="#波特率计算" class="headerlink" title="波特率计算"></a>波特率计算</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 波特率 = Fpclk1/((tbs1+1+tbs2+1+1)*brp);</span><span class="token comment">// bt = 36M / (7 + 1 + 8 + 1)* 4)  =  36 / (16 * 4) = 36M / 64 = 500Kbps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CAN学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda常用命令</title>
      <link href="/2023/04/08/conda%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/04/08/conda%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="查看conda版本"><a href="#查看conda版本" class="headerlink" title="查看conda版本"></a>查看conda版本</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">conda <span class="token operator">--</span>version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查看conda的环境配置"><a href="#查看conda的环境配置" class="headerlink" title="查看conda的环境配置"></a>查看conda的环境配置</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">conda config <span class="token operator">--</span>show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="更新conda"><a href="#更新conda" class="headerlink" title="更新conda"></a>更新conda</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">conda update conda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="更新Anaconda整体"><a href="#更新Anaconda整体" class="headerlink" title="更新Anaconda整体"></a>更新Anaconda整体</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">conda update Anaconda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查询某个命令的帮助"><a href="#查询某个命令的帮助" class="headerlink" title="查询某个命令的帮助"></a>查询某个命令的帮助</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">conda create <span class="token operator">--</span>help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><p>这表示创建python版本为3.8、名字为env_name的虚拟环境。 创建后，env_name文件可以在Anaconda安装目录envs文件下找到。在不指定python版本时，自动创建基于最新python版本的虚拟环境.   </p><pre class="line-numbers language-c" data-language="c"><code class="language-c">conda create <span class="token operator">-</span>n env_name python<span class="token operator">=</span><span class="token number">3.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建虚拟环境的同时安装必要的包"><a href="#创建虚拟环境的同时安装必要的包" class="headerlink" title="创建虚拟环境的同时安装必要的包"></a>创建虚拟环境的同时安装必要的包</h2><p>​    但是并不建议这样做，简化每一条命令的任务在绝大多数时候都是明智的（一个例外是需要反复执行的脚本）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">conda create <span class="token operator">-</span>n env_name numpy matplotlib python<span class="token operator">=</span><span class="token number">3.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查看有哪些虚拟环境"><a href="#查看有哪些虚拟环境" class="headerlink" title="查看有哪些虚拟环境"></a>查看有哪些虚拟环境</h2><p>​    以下三条命令都可以。注意最后一个是”–”，而不是“-”.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">env</span> listconda info <span class="token parameter variable">-e</span>conda info <span class="token parameter variable">--envs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所显示的列表中，前面带星号“*“的表示当前活动环境。比如说当前我的环境列表：</p><h2 id="使用如下命令即可激活创建的虚拟环境。"><a href="#使用如下命令即可激活创建的虚拟环境。" class="headerlink" title="使用如下命令即可激活创建的虚拟环境。"></a><strong>使用如下命令即可激活创建的虚拟环境。</strong></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda activate env_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    此时使用python –version可以检查当前python版本是否为所想要的（即虚拟环境的python版本）。</p><h2 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h2><p>​    使用如下命令即可退出当前工作的虚拟环境。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda activateconda deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="删除虚拟环境"><a href="#删除虚拟环境" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h2><h3 id="执行以下命令可以将该指定虚拟环境及其中所安装的包都删除。"><a href="#执行以下命令可以将该指定虚拟环境及其中所安装的包都删除。" class="headerlink" title="执行以下命令可以将该指定虚拟环境及其中所安装的包都删除。"></a>执行以下命令可以将该指定虚拟环境及其中所安装的包都删除。</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda remove <span class="token parameter variable">--name</span> env_name <span class="token parameter variable">--all</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="如果只删除虚拟环境中的某个或者某些包则是："><a href="#如果只删除虚拟环境中的某个或者某些包则是：" class="headerlink" title="如果只删除虚拟环境中的某个或者某些包则是："></a>如果只删除虚拟环境中的某个或者某些包则是：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda remove <span class="token parameter variable">--name</span> env_name  package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="导出环境"><a href="#导出环境" class="headerlink" title="导出环境"></a>导出环境</h2><p>很多的软件依赖特定的环境，我们可以导出环境，这样方便自己在需要时恢复环境，也可以提供给别人用于创建完全相同的环境。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#获得环境中的所有配置</span>conda <span class="token function">env</span> <span class="token builtin class-name">export</span> <span class="token parameter variable">--name</span> myenv <span class="token operator">></span> myenv.yml<span class="token comment">#重新还原环境</span>conda <span class="token function">env</span> create <span class="token parameter variable">-f</span>  myenv.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查询包的安装情况"><a href="#查询包的安装情况" class="headerlink" title="查询包的安装情况"></a>查询包的安装情况</h2><p>​    查询看当前环境中安装了哪些包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 查询当前Anaconda repository中是否有你想要安装的包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda search package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="包的安装和更新"><a href="#包的安装和更新" class="headerlink" title="包的安装和更新"></a>包的安装和更新</h2><p>​    在当前（虚拟）环境中安装一个包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="conda卸载包"><a href="#conda卸载包" class="headerlink" title="conda卸载包"></a>conda卸载包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda uninstall package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="清理anaconda缓存"><a href="#清理anaconda缓存" class="headerlink" title="清理anaconda缓存"></a>清理anaconda缓存</h2><pre class="line-numbers language-none"><code class="language-none">conda clean -p      # 删除没有用的包 --packages****conda clean -t      # 删除tar打包 --tarballs****conda clean -y -all # 删除所有的安装包及cache(索引缓存、锁定文件、未使用过的包和tar包)**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="将python版本更新到最新版本"><a href="#将python版本更新到最新版本" class="headerlink" title="将python版本更新到最新版本"></a>将python版本更新到最新版本</h2><p>​    如果你想将python版本更新到最新版本，可以使用以下命令：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">conda <span class="token keyword">update</span> python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Anaconda conda常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超声波项目结尾工作代码总结</title>
      <link href="/2023/04/03/%E8%B6%85%E5%A3%B0%E6%B3%A2%E9%A1%B9%E7%9B%AE%E7%BB%93%E5%B0%BE%E5%B7%A5%E4%BD%9C%E4%BB%A3%E7%A0%81%E6%80%BB%E7%BB%93/"/>
      <url>/2023/04/03/%E8%B6%85%E5%A3%B0%E6%B3%A2%E9%A1%B9%E7%9B%AE%E7%BB%93%E5%B0%BE%E5%B7%A5%E4%BD%9C%E4%BB%A3%E7%A0%81%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="发送端代码"><a href="#发送端代码" class="headerlink" title="发送端代码"></a>发送端代码</h3><p>ffaa、</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"usart.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"FreeRTOS.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"task.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"timer.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"hc05.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"usart3.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token comment">// 任务优先级</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">START_TASK_PRIO</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token comment">// 任务堆栈大小</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">START_STK_SIZE</span> <span class="token expression"><span class="token number">128</span></span></span><span class="token comment">// 任务句柄</span>TaskHandle_t StartTask_Handler<span class="token punctuation">;</span><span class="token comment">// 任务函数</span><span class="token keyword">void</span> <span class="token function">start_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 任务优先级</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED0_TASK_PRIO</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token comment">// 任务堆栈大小</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED0_STK_SIZE</span> <span class="token expression"><span class="token number">1024</span></span></span><span class="token comment">// 任务句柄</span>TaskHandle_t LED0Task_Handler<span class="token punctuation">;</span><span class="token comment">// 任务函数</span><span class="token keyword">void</span> <span class="token function">led0_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 任务优先级</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED1_TASK_PRIO</span> <span class="token expression"><span class="token number">3</span></span></span><span class="token comment">// 任务堆栈大小</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED1_STK_SIZE</span> <span class="token expression"><span class="token number">1024</span></span></span><span class="token comment">// 任务句柄</span>TaskHandle_t LED1Task_Handler<span class="token punctuation">;</span><span class="token comment">// 任务函数</span><span class="token keyword">void</span> <span class="token function">led1_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 任务优先级</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FLOAT_TASK_PRIO</span> <span class="token expression"><span class="token number">4</span></span></span><span class="token comment">// 任务堆栈大小</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FLOAT_STK_SIZE</span> <span class="token expression"><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">2</span></span></span><span class="token comment">// 任务句柄</span>TaskHandle_t FLOATTask_Handler<span class="token punctuation">;</span><span class="token comment">// 任务函数</span><span class="token keyword">void</span> <span class="token function">float_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * @brief 求2个数的绝对值 * * @param x 参数1 * @param y参数2 * @return float 是否可以传输 */</span><span class="token keyword">int</span> <span class="token function">my_abs</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> y <span class="token operator">>=</span> <span class="token number">1.0f</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> x <span class="token operator">>=</span> <span class="token number">1.0f</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义成全局变量</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 水平面上转过的角度</span><span class="token keyword">float</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 竖直面上转过的角度</span><span class="token keyword">int</span> flag_bj <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 步进电机旋转flag 步进电机每转1°   舵机转180°</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BOOL</span> <span class="token expression"><span class="token keyword">int</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TRUE</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FALSE</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token keyword">float</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>BOOL flag <span class="token operator">=</span> FALSE<span class="token punctuation">;</span><span class="token comment">/** * @brief 步进电机控制 * */</span><span class="token keyword">int</span> js <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Motor_con</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag_bj <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 步进电机开启</span><span class="token punctuation">&#123;</span>j <span class="token operator">=</span> <span class="token number">3200</span> <span class="token operator">*</span> <span class="token number">360</span><span class="token punctuation">;</span> <span class="token comment">// 速度控制   公式为 1 / 360 = 3200 / x   x即为所要的参数也就是现在的360</span><span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>GPIOE<span class="token operator">-></span>ODR <span class="token operator">^=</span> GPIO_Pin_3<span class="token punctuation">;</span><span class="token comment">// 这块 控制什么时候转向 也用不到 直接注释了</span><span class="token comment">/*if (flag)&#123;--i;js++;if (js > 18)&#123;flag_bj = 0;js = 0;&#125;&#125;*/</span><span class="token comment">// else</span><span class="token comment">//&#123;</span><span class="token operator">++</span>i<span class="token punctuation">;</span>js<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>js <span class="token operator">></span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x <span class="token operator">=</span> x <span class="token operator">-</span> <span class="token number">360</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>js <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>flag_bj <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//&#125;</span><span class="token comment">// 这块控制旋转方向 用不到 直接注释了</span><span class="token comment">/*if (i >= 6400) // 走一圈 要的步数&#123;GPIO_SetBits(GPIOE, GPIO_Pin_4);flag = TRUE;vTaskDelay(1000); // 切换方向转动&#125;else if (i == 0)&#123;GPIO_ResetBits(GPIOE, GPIO_Pin_4);flag = FALSE;vTaskDelay(1000); // 切换方向转动&#125;*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置系统中断优先级分组4</span><span class="token function">delay_init</span><span class="token punctuation">(</span><span class="token number">168</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 初始化延时函数</span><span class="token function">csb1_IO_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">csb2_IO_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Tim3_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Tim4_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">TIM2_PWM_Init</span><span class="token punctuation">(</span><span class="token number">2000</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">840</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// T = 84M / (ARR + 1) / (PSC + 1) = 20ms</span><span class="token function">Motor_init_Io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">HC05_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 初始化ATK-HC05模块</span><span class="token punctuation">&#123;</span><span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>USART3_RX_STA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待步进电机上电完成</span><span class="token comment">// 创建开始任务</span><span class="token function">xTaskCreate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TaskFunction_t<span class="token punctuation">)</span>start_task<span class="token punctuation">,</span> <span class="token comment">// 任务函数</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"start_task"</span><span class="token punctuation">,</span> <span class="token comment">// 任务名称</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span>START_STK_SIZE<span class="token punctuation">,</span> <span class="token comment">// 任务堆栈大小</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token comment">// 传递给任务函数的参数</span><span class="token punctuation">(</span>UBaseType_t<span class="token punctuation">)</span>START_TASK_PRIO<span class="token punctuation">,</span> <span class="token comment">// 任务优先级</span><span class="token punctuation">(</span>TaskHandle_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>StartTask_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 任务句柄</span><span class="token function">vTaskStartScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开启任务调度</span><span class="token punctuation">&#125;</span><span class="token comment">// 开始任务任务函数</span><span class="token keyword">void</span> <span class="token function">start_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">taskENTER_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 进入临界区</span><span class="token comment">// 创建LED0任务</span><span class="token function">xTaskCreate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TaskFunction_t<span class="token punctuation">)</span>led0_task<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"led0_task"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span>LED0_STK_SIZE<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token punctuation">(</span>UBaseType_t<span class="token punctuation">)</span>LED0_TASK_PRIO<span class="token punctuation">,</span><span class="token punctuation">(</span>TaskHandle_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>LED0Task_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建LED1任务</span><span class="token function">xTaskCreate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TaskFunction_t<span class="token punctuation">)</span>led1_task<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"led1_task"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span>LED1_STK_SIZE<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token punctuation">(</span>UBaseType_t<span class="token punctuation">)</span>LED1_TASK_PRIO<span class="token punctuation">,</span><span class="token punctuation">(</span>TaskHandle_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>LED1Task_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 浮点测试任务</span><span class="token function">xTaskCreate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TaskFunction_t<span class="token punctuation">)</span>float_task<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"float_task"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span>FLOAT_STK_SIZE<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token punctuation">(</span>UBaseType_t<span class="token punctuation">)</span>FLOAT_TASK_PRIO<span class="token punctuation">,</span><span class="token punctuation">(</span>TaskHandle_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>FLOATTask_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">vTaskDelete</span><span class="token punctuation">(</span>StartTask_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除开始任务</span><span class="token function">taskEXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 退出临界区</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @brief 超声波控制部分 * * @param pvParameters */</span><span class="token keyword">void</span> <span class="token function">led0_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">float</span> juli <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">float</span> juli2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">float</span> juli_end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">float</span> zuobiao<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// x y z  接收端 村的数据库是 z y x 有点差异</span>juli <span class="token operator">=</span> <span class="token function">Get_CSB1_Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>juli2 <span class="token operator">=</span> <span class="token function">Get_CSB2_Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>juli <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> juli <span class="token operator">&lt;=</span> <span class="token number">400</span> <span class="token operator">&amp;&amp;</span> juli2 <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> juli2 <span class="token operator">&lt;=</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">my_abs</span><span class="token punctuation">(</span>juli<span class="token punctuation">,</span> juli2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>juli_end <span class="token operator">=</span> <span class="token punctuation">(</span>juli <span class="token operator">+</span> juli2<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0f</span><span class="token punctuation">;</span>zuobiao<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> juli_end <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x 坐标</span>zuobiao<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> juli_end <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// y 坐标</span>zuobiao<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> juli_end <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// z 坐标</span><span class="token function">u3_printf</span><span class="token punctuation">(</span><span class="token string">"%f,%f,%f,juli=%f, x=%d,y=%f\r\n"</span><span class="token punctuation">,</span> zuobiao<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> zuobiao<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> zuobiao<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> juli_end<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送到蓝牙模块</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @brief 电机控制任务越大方波越小 * * @param pvParameters */</span><span class="token keyword">void</span> <span class="token function">led1_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Motor_con</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 步进电机控制  正转一圈  反转1圈</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义成全局变量</span><span class="token comment">// float x = 0; // 水平面上转过的角度</span><span class="token comment">// float y = 0; // 竖直面上转过的角度</span><span class="token keyword">void</span> <span class="token function">float_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">1950</span><span class="token punctuation">;</span><span class="token keyword">int</span> dir <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 开始时按正方向转</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dir <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 正方向  这要考虑 电机的角度问题 是 0 ---> 360 还是 360 ----> 0 这块会影响计算</span><span class="token keyword">for</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">1950</span><span class="token punctuation">;</span> t <span class="token operator">>=</span> <span class="token number">1750</span><span class="token punctuation">;</span> t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">TIM_SetCompare1</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y <span class="token operator">+=</span> <span class="token number">0.9</span><span class="token punctuation">;</span> <span class="token comment">// 舵机</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">1750</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dir <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 舵机方向改变</span>flag_bj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 通知步进电机可以转了</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dir <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 反方向</span><span class="token keyword">for</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">1750</span><span class="token punctuation">;</span> t <span class="token operator">&lt;=</span> <span class="token number">1950</span><span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">TIM_SetCompare1</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y <span class="token operator">-=</span> <span class="token number">0.9</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">1950</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dir <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 舵机方向改变</span>flag_bj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 通知步进电机可以转了</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接收端代码"><a href="#接收端代码" class="headerlink" title="接收端代码"></a>接收端代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> serial<span class="token keyword">import</span> serial<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>list_ports<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> pymysql<span class="token comment"># 获取所有串口设备实例。</span><span class="token comment"># 如果没找到串口设备，则输出：“无串口设备。”</span><span class="token comment"># 如果找到串口设备，则依次输出每个设备对应的串口号和描述信息。</span><span class="token keyword">def</span> <span class="token function">Get_All_IO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ports_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>serial<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>list_ports<span class="token punctuation">.</span>comports<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ports_list<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"无串口设备。"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"可用的串口设备如下："</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> comport <span class="token keyword">in</span> ports_list<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>comport<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span>comport<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 得到的点云数据</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">Get_Date_img</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> j    <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        j <span class="token operator">=</span> <span class="token number">0</span>        plt<span class="token punctuation">.</span>clf<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清除上一幅图像</span>    <span class="token keyword">global</span> i<span class="token punctuation">,</span> s1    Juli <span class="token operator">=</span> ser<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 每次读取一行</span>    s1 <span class="token operator">=</span> Juli<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span> <span class="token keyword">or</span> <span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token comment"># 将数据写入 txt文件中</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>  <span class="token comment"># 得到串口的数据</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    z<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>projection<span class="token operator">=</span><span class="token string">'3d'</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个三维的绘图工程</span>    ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'3d_image_show'</span><span class="token punctuation">)</span>  <span class="token comment"># 设置本图名称</span>    ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">)</span>  <span class="token comment"># 设置x坐标轴</span>    ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span>  <span class="token comment"># 设置y坐标轴</span>    ax<span class="token punctuation">.</span>set_zlabel<span class="token punctuation">(</span><span class="token string">'Z'</span><span class="token punctuation">)</span>  <span class="token comment"># 设置z坐标轴</span>    <span class="token comment"># 要是报错 可能是这块  还没进行测试</span>    ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ioff<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭画图的窗口</span>    <span class="token comment"># 防止数据库索引ID错误 所以 ＋ 3</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment"># 插入数据  id , z , y , x</span>    cursor<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span>        <span class="token string">"insert into csb_xyz values(%s,%s,%s,%s)"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    Get_All_IO<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 得到所有串口 并打印出来</span>    ser <span class="token operator">=</span> serial<span class="token punctuation">.</span>Serial<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token string">"COM6"</span><span class="token punctuation">,</span> baudrate<span class="token operator">=</span><span class="token number">38400</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token comment"># 创建连接</span>    conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'csb'</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8mb4'</span><span class="token punctuation">)</span>    <span class="token comment"># 创建游标</span>    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 要先查表 连接只确定了数据库名</span>    <span class="token comment"># 这块应当是确定数据库名的</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select * from csb_xyz"</span><span class="token punctuation">)</span>    <span class="token comment"># 执行前首先清空这个数据库表  防止和以前的数据混了</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"delete from csb_xyz"</span><span class="token punctuation">)</span>    <span class="token comment"># 记得加上这句 否则它是不执行上边的SQL语句的 ！！！！！ 搞了半天发现是根本没有执行 这个查表得这句好像没什么用 当是个检测数据表是否存在了</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 好了 数据库已经清空了 可以开始存数据了 至于txt要不要清空  要不还是算了总得有一个存下来全部的执行记录 当是打Log日志了 不过是打在了txt里</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        Get_Date_img<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 显示串口的数据</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个串口要时时调整。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 超声波3D建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学寻路算法时突然听到的一句玩笑话</title>
      <link href="/2023/04/02/%E5%AD%A6%E5%AF%BB%E8%B7%AF%E7%AE%97%E6%B3%95%E6%97%B6%E7%AA%81%E7%84%B6%E5%90%AC%E5%88%B0%E7%9A%84%E4%B8%80%E5%8F%A5%E7%8E%A9%E7%AC%91%E8%AF%9D/"/>
      <url>/2023/04/02/%E5%AD%A6%E5%AF%BB%E8%B7%AF%E7%AE%97%E6%B3%95%E6%97%B6%E7%AA%81%E7%84%B6%E5%90%AC%E5%88%B0%E7%9A%84%E4%B8%80%E5%8F%A5%E7%8E%A9%E7%AC%91%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<p>一个不会装逼的程序员不是一个好程序员。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈学习</title>
      <link href="/2023/04/02/%E6%A0%88%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/04/02/%E6%A0%88%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="学习栈之前-先来点指针的知识"><a href="#学习栈之前-先来点指针的知识" class="headerlink" title="学习栈之前 先来点指针的知识"></a>学习栈之前 先来点指针的知识</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> p<span class="token punctuation">;</span> <span class="token comment">//这是一个普通的整型变量</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">//首先从P 处开始,先与*结合,所以说明P 是一个指针,然后再与int 结合,说明指针所指向的内容的类型为int 型.所以P是一个返回整型数据的指针</span><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//首先从P 处开始,先与[]结合,说明P 是一个数组,然后与int 结合,说明数组里的元素是整型的,所以P 是一个由整型数据组成的数组</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//首先从P 处开始,先与[]结合,因为其优先级比*高,所以P 是一个数组,然后再与*结合,说明数组里的元素是指针类型,然后再与int 结合,说明指针所指向的内容的类型是整型的,所以P 是一个由返回整型数据的指针所组成的数组</span><span class="token comment">//是一个数组</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//首先从P 处开始,先与*结合,说明P 是一个指针然后再与[]结合(与"()"这步可以忽略,只是为了改变优先级),说明指针所指向的内容是一个数组,然后再与int 结合,说明数组里的元素是整型的.所以P 是一个指向由整型数据组成的数组的指针</span><span class="token comment">//是一个指针</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">//首先从P 开始,先与*结合,说是P 是一个指针,然后再与*结合,说明指针所指向的元素是指针,然后再与int 结合,说明该指针所指向的元素是整型数据.由于二级指针以及更高级的指针极少用在复杂的类型中,所以后面更复杂的类型我们就不考虑多级指针了,最多只考虑一级指针.</span><span class="token keyword">int</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从P 处起,先与()结合,说明P 是一个函数,然后进入()里分析,说明该函数有一个整型变量的参数,然后再与外面的int 结合,说明函数的返回值是一个整型数据</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从P 处开始,先与指针结合,说明P 是一个指针,然后与()结合,说明指针指向的是一个函数,然后再与()里的int 结合,说明函数有一个int 型的参数,再与最外层的int 结合,说明函数的返回类型是整型,所以P 是一个指向有一个整型参数且返回类型为整型的函数的指针</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//可以先跳过,不看这个类型,过于复杂从P 开始,先与()结合,说明P 是一个函数,然后进入()里面,与int 结合,说明函数有一个整型变量参数,然后再与外面的*结合,说明函数返回的是一个指针,,然后到最外面一层,先与[]结合,说明返回的指针指向的是一个数组,然后再与*结合,说明数组里的元素是指针,然后再与int 结合,说明指针指向的内容是整型数据.所以P 是一个参数为一个整数据且返回一个指向由整型指针变量组成的数组的指针变量的函数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用指针创建数组"><a href="#使用指针创建数组" class="headerlink" title="使用指针创建数组"></a>使用指针创建数组</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 存int类型数据的顺序栈</span><span class="token keyword">int</span> <span class="token operator">*</span>pStack<span class="token punctuation">;</span> <span class="token comment">// 指向栈的指针</span><span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment">// 存储栈中的元素个数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 初始化队列</span>    <span class="token function">InitStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 为数组开辟内存</span>    <span class="token keyword">int</span> <span class="token operator">*</span>pNew <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     pStack <span class="token operator">=</span> pNew<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        pStack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d  "</span><span class="token punctuation">,</span> pStack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于<strong>malloc</strong>很神奇的函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">InitStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>pNew <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pStack <span class="token operator">=</span> pNew<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        pStack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span> pStack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pStack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>pNew<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 需要主动释放内存</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>上边这段代码可以运行不会报错！！！</strong></p><p><strong>只申请了1个int型的内存但是它是对的。</strong></p><p><strong>malloc 默认比申请内存大小大5个字节</strong></p><p>但是我们申请2个内存 它并不能执行到7</p><p>申请3个也不行</p><p>申请4个的时候 神奇的事又发生了</p><p>有时候可以创建20多个</p><p>有时候只能到11 就报错了</p><p>？？？？？</p><p>查百度得到</p><p><img src="/2023/04/02/%E6%A0%88%E5%AD%A6%E4%B9%A0/image-20230402203628242.png" alt="image-20230402203628242"></p><p>但是这个规律和测得的并不一样啊！！！</p><p>神奇的函数，不过使用最好还有要多大申请多大，可以得到结论这个函数申请内存只会多不会少。</p><p> 没想到在今天再一次被编译环境逼得回到了VS2010，那个最初接触C语言的编译器，easyX 真是不简单，记得当初下了一个Clion就是为了去用这个东西，但是当时不知道这个库只针对VS这个环境试用，不得已回到了VS2010这个远古环境。写代码一点提示没有还真是不习惯，好在还有VSCODE在，可以联合使用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FreeRTOS关于报错271是为什么</title>
      <link href="/2023/04/02/FreeRTOS%E5%85%B3%E4%BA%8E%E6%8A%A5%E9%94%99271%E6%98%AF%E4%B8%BA%E4%BB%80%E4%B9%88/"/>
      <url>/2023/04/02/FreeRTOS%E5%85%B3%E4%BA%8E%E6%8A%A5%E9%94%99271%E6%98%AF%E4%B8%BA%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p>FreeRTOS报错271：</p><p>​    原因：大概率是有一个任务没写在while(1)里边，或者看网上也有人说是栈满了，爆栈了。这俩办法都可以试试。</p>]]></content>
      
      
      
        <tags>
            
            <tag> FreeRTOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PCB设计</title>
      <link href="/2023/04/01/PCB%E8%AE%BE%E8%AE%A1/"/>
      <url>/2023/04/01/PCB%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么我要学这个PCB呢？"><a href="#为什么我要学这个PCB呢？" class="headerlink" title="为什么我要学这个PCB呢？"></a>为什么我要学这个PCB呢？</h2><p>​    答：这几天快要被这个杜邦线搞得心态爆炸了，插头太容易松了，而且做点东西也是丑的狠。所以只能来学PCB了。（近乎是😬这个状态了）</p><p>本来做智能车心情好好的，下午来了烧录完程序一开驱动发现轮不转了，昨天走的时候还好好的呢，这么不好使了呢，一看线掉了，靠！</p><p>画板子，给他焊死！！！（超大声 哎 悲催的学习之路 好多的外部中断事件）</p><p>PCB的设计大体上分为4个过程：</p><p>​    1.原理图库的设计</p><p>​    2.原理图的设计</p><p>​    3.PCB布局和布线</p><p>​    4.PCB封装库的设计</p><p><img src="/2023/04/01/PCB%E8%AE%BE%E8%AE%A1/image-20230401155333923.png" alt="image-20230401155333923"></p><p>基本的项目目录结构如下图： PCB元件库 ，PCB，原理图，原理图库。 4个主要部分。</p><p><img src="/2023/04/01/PCB%E8%AE%BE%E8%AE%A1/image-20230401160241397.png" alt="image-20230401160241397"></p><p>打开工程的方法</p><p><img src="/2023/04/01/PCB%E8%AE%BE%E8%AE%A1/image-20230401160530248.png" alt="image-20230401160530248"></p><p>这个<strong>PrjPcb</strong>后缀的是工程名，直接打开它就打开了工程了。</p><p>尽量不要只打开原理图或者PCB，要打开就一块打开。省的不能原理图生成PCB ，单独打开是一个离散的状态，相对于2个word文档之间没有联系。单独打开看可以但是别动！！！！。哈哈（威胁）</p><p>快捷键 <strong>vgs</strong> 设置捕捉栅格一个格子多大。</p><p><img src="/2023/04/01/PCB%E8%AE%BE%E8%AE%A1/image-20230401162632014.png" alt="image-20230401162632014"></p><p>发现了画板子的秘密</p><p>有了原理图库 和 PCB图库之后 好像就是复制粘贴的事了。</p><p>嗯。。。。</p><p>至少现在是这么认为的吧。布线的话应该接触不到那种逆天的板子。</p><p>好了看看搞了一下午的成果吧，这下子应该是解放了杜邦线了。</p><p><img src="/2023/04/01/PCB%E8%AE%BE%E8%AE%A1/image-20230401201135420.png" alt="image-20230401201135420"></p><p>就这几个插排。搞了将近一下午，做了这个记录，过几天应该还是会忘。哈哈健忘没办法啊！</p>]]></content>
      
      
      
        <tags>
            
            <tag> PCB设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超声波测距数据存入数据库</title>
      <link href="/2023/04/01/%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%B5%8B%E8%B7%9D%E6%95%B0%E6%8D%AE%E5%AD%98%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2023/04/01/%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%B5%8B%E8%B7%9D%E6%95%B0%E6%8D%AE%E5%AD%98%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>由于超声波测距数据都是用一个列表来存放这个空间坐标数据的，之后将数据存入到一个txt文件里，但是这txt文件给人一种不靠谱的感觉，相比于数据库这种名词来说就显得低级了太多太多，所以在此基础上，又加上了“入库”操作，将所有的记录都存到一个数据库表里，方便记录，也可以以后随时查看。</p><p>连接数据库的基本代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment"># 这个创建连接是在读取数据之间执行的 要不然会发生已经有数据传过来了 但是数据库连接这块还没建好，发生丢数据。</span><span class="token comment"># 创建连接</span>    conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'csb'</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8mb4'</span><span class="token punctuation">)</span>    <span class="token comment"># 创建游标</span>    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 要先查表 连接只确定了数据库名</span>    <span class="token comment"># 这块应当是确定数据库名的</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select * from csb_xyz"</span><span class="token punctuation">)</span>    <span class="token comment"># 执行前首先清空这个数据库表  防止和以前的数据混了</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"delete from csb_xyz"</span><span class="token punctuation">)</span>    <span class="token comment"># 记得加上这句 否则它是不执行上边的SQL语句的 ！！！！！ 搞了半天发现是根本没有执行 这个查表得这句好像没什么用 当是个检测数据表是否存在了</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 好了 数据库已经清空了 可以开始存数据了 至于txt要不要清空  要不还是算了总得有一个存下来全部的执行记录 当是打Log日志了 不过是打在了txt里</span>    <span class="token comment"># 插入数据  id , z , y , x</span>    cursor<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span>        <span class="token string">"insert into csb_xyz values(%s,%s,%s,%s)"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看上篇的处理 看</p><p><a href="https://wyt-loc.xyz/2023/03/31/matplolib%E5%AE%9E%E6%97%B6%E7%94%BB%E5%9B%BE%E6%98%BE%E7%A4%BA%E8%B6%8A%E6%9D%A5%E8%B6%8A%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">matplolib实时画图显示越来越慢的问题解决 | Wyt-Blog (wyt-loc.xyz)</a></p><p><a href="https://wyt-loc.xyz/2023/03/29/%E4%B8%A4%E4%B8%AA%E8%93%9D%E7%89%99%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/">两个蓝牙之间的通信 | Wyt-Blog (wyt-loc.xyz)</a></p><h3 id="所有代码如下"><a href="#所有代码如下" class="headerlink" title="所有代码如下"></a>所有代码如下</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> serial<span class="token keyword">import</span> serial<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>list_ports<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> pymysql<span class="token comment"># 获取所有串口设备实例。</span><span class="token comment"># 如果没找到串口设备，则输出：“无串口设备。”</span><span class="token comment"># 如果找到串口设备，则依次输出每个设备对应的串口号和描述信息。</span><span class="token keyword">def</span> <span class="token function">Get_All_IO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ports_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>serial<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>list_ports<span class="token punctuation">.</span>comports<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ports_list<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"无串口设备。"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"可用的串口设备如下："</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> comport <span class="token keyword">in</span> ports_list<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>comport<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span>comport<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 得到的点云数据</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>ser <span class="token operator">=</span> serial<span class="token punctuation">.</span>Serial<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token string">"COM14"</span><span class="token punctuation">,</span> baudrate<span class="token operator">=</span><span class="token number">38400</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Get_Date_img</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>clf<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清除上一幅图像</span>    <span class="token keyword">global</span> i<span class="token punctuation">,</span> s1    Juli <span class="token operator">=</span> ser<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 每次读取一行</span>    s1 <span class="token operator">=</span> Juli<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span> <span class="token keyword">or</span> <span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token comment"># 将数据写入 txt文件中</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>  <span class="token comment"># 得到串口的数据</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    z<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>projection<span class="token operator">=</span><span class="token string">'3d'</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个三维的绘图工程</span>    ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'3d_image_show'</span><span class="token punctuation">)</span>  <span class="token comment"># 设置本图名称</span>    ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">)</span>  <span class="token comment"># 设置x坐标轴</span>    ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span>  <span class="token comment"># 设置y坐标轴</span>    ax<span class="token punctuation">.</span>set_zlabel<span class="token punctuation">(</span><span class="token string">'Z'</span><span class="token punctuation">)</span>  <span class="token comment"># 设置z坐标轴</span>    <span class="token comment"># 要是报错 可能是这块  还没进行测试</span>    ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ioff<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭画图的窗口</span>    <span class="token comment"># 防止数据库索引ID错误 所以 ＋ 3</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment"># 插入数据  id , z , y , x</span>    cursor<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span>        <span class="token string">"insert into csb_xyz values(%s,%s,%s,%s)"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    Get_All_IO<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 得到所有串口 并打印出来</span>    <span class="token comment"># 创建连接</span>    conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'csb'</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8mb4'</span><span class="token punctuation">)</span>    <span class="token comment"># 创建游标</span>    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 要先查表 连接只确定了数据库名</span>    <span class="token comment"># 这块应当是确定数据库名的</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select * from csb_xyz"</span><span class="token punctuation">)</span>    <span class="token comment"># 执行前首先清空这个数据库表  防止和以前的数据混了</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"delete from csb_xyz"</span><span class="token punctuation">)</span>    <span class="token comment"># 记得加上这句 否则它是不执行上边的SQL语句的 ！！！！！ 搞了半天发现是根本没有执行 这个查表得这句好像没什么用 当是个检测数据表是否存在了</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 好了 数据库已经清空了 可以开始存数据了 至于txt要不要清空  要不还是算了总得有一个存下来全部的执行记录 当是打Log日志了 不过是打在了txt里</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        Get_Date_img<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 显示串口的数据</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 超声波3D建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言的volatile关键字</title>
      <link href="/2023/03/31/c%E8%AF%AD%E8%A8%80%E7%9A%84volatile%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2023/03/31/c%E8%AF%AD%E8%A8%80%E7%9A%84volatile%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p><strong>个人理解：</strong> 被这个关键字修饰的值，随时会发生变化，每次读取这个变量都去初始化它的那个内存地址去访问。被这个关键字修饰的变量在编译时不会被编译器优化，防止出现意想不到的错误。</p><p>volatile是一个类型修饰符（type specifier）。它是被设计用来修饰被不同线程访问和修改的变量。如果没有volatile，基本上会导致这样的结果：要么无法编写多线程程序，要么编译器失去大量优化的机会。</p><h3 id="1-原理作用"><a href="#1-原理作用" class="headerlink" title="1.原理作用"></a>1.原理作用</h3><p>Volatile意思是“易变的”，应该解释为“直接存取原始内存地址”比较合适。“易变”是因为外在因素引起的，像多线程，中断等。</p><p><strong>C语言书籍这样定义volatile关键字：</strong></p><p>volatile提醒编译器它后面所定义的变量随时都有可能改变，因此编译后的程序每次需要存储或读取这个变量的时候，告诉编译器对该变量不做优化，都会直接从变量内存地址中读取数据，从而可以提供对特殊地址的稳定访问。</p><p>如果没有volatile关键字，则编译器可能优化读取和存储，可能暂时使用寄存器中的值，如果这个变量由别的程序更新了的话，将出现不一致的现象。（简洁的说就是：volatile关键词影响编译器编译的结果，用volatile声明的变量表示该变量随时可能发生变化，与该变量有关的运算，不要进行编译优化，以免出错）</p>]]></content>
      
      
      
        <tags>
            
            <tag> volatile关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让智能车跑动起来</title>
      <link href="/2023/03/31/%E8%AE%A9%E6%99%BA%E8%83%BD%E8%BD%A6%E8%B7%91%E5%8A%A8%E8%B5%B7%E6%9D%A5/"/>
      <url>/2023/03/31/%E8%AE%A9%E6%99%BA%E8%83%BD%E8%BD%A6%E8%B7%91%E5%8A%A8%E8%B5%B7%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<p>最单的跑起来，无非就是电机+舵机+编码器。</p><p>通过一些很简单的函数就可以做到跑起来，但是跑起来之后的事情就难了。</p><p>还是直接贴代码吧，都是直接去掉用一些龙邱的官方库，</p><h4 id="分别是，电机，舵机，编码器的初始化"><a href="#分别是，电机，舵机，编码器的初始化" class="headerlink" title="分别是，电机，舵机，编码器的初始化"></a>分别是，电机，舵机，编码器的初始化</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* * My_Servos.c * *  Created on: 2023年3月31日 *      Author: Wyt */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;My_Servos.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;LQ_GTM.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;LQ_Atom_Motor.h></span></span><span class="token keyword">void</span> <span class="token function">Servos_Io_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ATOM_PWM_InitConfig</span><span class="token punctuation">(</span>ATOMSERVO2<span class="token punctuation">,</span> <span class="token number">1900</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Servos_Set_Angle</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ATOM_PWM_SetDuty</span><span class="token punctuation">(</span>ATOMSERVO2<span class="token punctuation">,</span> <span class="token number">1940</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* * My_Motor.c * *  Created on: 2023年3月31日 *      Author: Wyt */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;LQ_Atom_Motor.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;My_Motor.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;LQ_GTM.h></span></span><span class="token comment">/** * 电机PWM输出角初始化  刚开始默认电机没有电压 防止直接跑出去 */</span><span class="token keyword">void</span> <span class="token function">Mortor_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ATOM_PWM_InitConfig</span><span class="token punctuation">(</span>ATOMPWM0<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ATOM_PWM_InitConfig</span><span class="token punctuation">(</span>ATOMPWM1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 电机速度设置 */</span><span class="token keyword">void</span> <span class="token function">Morter_Set_V</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ATOM_PWM_SetDuty</span><span class="token punctuation">(</span>ATOMPWM0<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">12500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//驱动两个电机   1000应该是最小的再小不走了</span>    <span class="token function">ATOM_PWM_SetDuty</span><span class="token punctuation">(</span>ATOMPWM1<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">12500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* * My_Encoder.c * *  Created on: 2023年3月31日 *      Author: Wyt */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;LQ_TFT18.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;My_encoder.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;LQ_GPT12_ENC.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">volatile</span> <span class="token keyword">int</span> encv_left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">//左轮编码器值</span><span class="token keyword">volatile</span> <span class="token keyword">int</span> encv_right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//右轮编码器值</span><span class="token keyword">volatile</span> <span class="token keyword">int</span> left_sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">//左轮总共的距离</span><span class="token keyword">volatile</span> <span class="token keyword">int</span> right_sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">//右轮总共的距离</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TFT_flag</span>  <span class="token expression"><span class="token number">0</span></span></span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">/** *  编码器IO初始化 */</span><span class="token keyword">void</span> <span class="token function">Encoder_Io_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ENC_InitConfig</span><span class="token punctuation">(</span>ENC2_InPut_P33_7<span class="token punctuation">,</span> ENC2_Dir_P33_6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ENC_InitConfig</span><span class="token punctuation">(</span>ENC5_InPut_P10_3<span class="token punctuation">,</span> ENC5_Dir_P10_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">TFT_flag</span></span>    <span class="token function">TFTSPI_Init</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//LCD初始化  0:横屏  1：竖屏</span>    <span class="token function">TFTSPI_CLS</span><span class="token punctuation">(</span>u16BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//蓝色屏幕</span>    <span class="token function">TFTSPI_P8X16Str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Test Encoder"</span><span class="token punctuation">,</span>u16WHITE<span class="token punctuation">,</span>u16BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//字符串显示</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span class="token comment">/** * 得到编码器反馈数值 * 针对不同情况进行处理 当前状态编码器2数值前进为负，编码器4前进为正 */</span><span class="token keyword">void</span> <span class="token function">Get_Encoder_Data</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> txt<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    encv_left  <span class="token operator">=</span>  <span class="token function">ENC_GetCounter</span><span class="token punctuation">(</span>ENC2_InPut_P33_7<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//注意左轮为负</span>    encv_right <span class="token operator">=</span> <span class="token operator">-</span><span class="token function">ENC_GetCounter</span><span class="token punctuation">(</span>ENC5_InPut_P10_3<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//右轮值正常</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">TFT_flag</span></span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>txt<span class="token punctuation">,</span> <span class="token string">"Enc2: %05d; "</span><span class="token punctuation">,</span> encv_left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFTSPI_P8X16Str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> txt<span class="token punctuation">,</span> u16WHITE<span class="token punctuation">,</span> u16BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//字符串显示</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>txt<span class="token punctuation">,</span> <span class="token string">"Enc4: %05d; "</span><span class="token punctuation">,</span> encv_right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFTSPI_P8X16Str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> txt<span class="token punctuation">,</span> u16WHITE<span class="token punctuation">,</span> u16BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//字符串显示</span>    left_sum <span class="token operator">+=</span>  encv_left<span class="token punctuation">;</span>    right_sum <span class="token operator">+=</span> encv_right<span class="token punctuation">;</span>    <span class="token comment">//龙邱512带方向编码器1米5790个脉冲    经过测试发现 差不多 半米2900多个脉冲计数</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>txt<span class="token punctuation">,</span> <span class="token string">"left:%05d; "</span><span class="token punctuation">,</span> left_sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFTSPI_P8X16Str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> txt<span class="token punctuation">,</span> u16WHITE<span class="token punctuation">,</span> u16BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//字符串显示</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>txt<span class="token punctuation">,</span> <span class="token string">"right: %05d; "</span><span class="token punctuation">,</span> right_sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFTSPI_P8X16Str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> txt<span class="token punctuation">,</span> u16WHITE<span class="token punctuation">,</span> u16BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//字符串显示</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;include.h></span><span class="token comment">//各个模块的头文件</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;IfxCpu.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;IfxScuCcu.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;IfxScuWdt.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;IfxStm.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;IfxStm_reg.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;LQ_GPIO_LED.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;LQ_TFT18.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;LQ_UART.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Main.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;My_encoder.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;My_Motor.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;My_Servos.h></span></span>App_Cpu0 g_AppCpu0<span class="token punctuation">;</span> <span class="token comment">// brief CPU 0 global data</span>IfxCpu_mutexLock mutexCpu0InitIsOk <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// CPU0 初始化完成标志位</span><span class="token keyword">volatile</span> <span class="token keyword">char</span> mutexCpu0TFTIsOk<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment">// CPU1 0占用/  1释放 TFT</span><span class="token keyword">void</span> <span class="token function">CPU_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 关闭CPU总中断</span>    <span class="token function">IfxCpu_disableInterrupts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭看门狗，如果不设置看门狗喂狗需要关闭</span>    <span class="token function">IfxScuWdt_disableCpuWatchdog</span><span class="token punctuation">(</span><span class="token function">IfxScuWdt_getCpuWatchdogPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">IfxScuWdt_disableSafetyWatchdog</span><span class="token punctuation">(</span><span class="token function">IfxScuWdt_getSafetyWatchdogPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读取总线频率</span>    g_AppCpu0<span class="token punctuation">.</span>info<span class="token punctuation">.</span>pllFreq <span class="token operator">=</span> <span class="token function">IfxScuCcu_getPllFrequency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    g_AppCpu0<span class="token punctuation">.</span>info<span class="token punctuation">.</span>cpuFreq <span class="token operator">=</span> <span class="token function">IfxScuCcu_getCpuFrequency</span><span class="token punctuation">(</span><span class="token function">IfxCpu_getCoreIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    g_AppCpu0<span class="token punctuation">.</span>info<span class="token punctuation">.</span>sysFreq <span class="token operator">=</span> <span class="token function">IfxScuCcu_getSpbFrequency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    g_AppCpu0<span class="token punctuation">.</span>info<span class="token punctuation">.</span>stmFreq <span class="token operator">=</span> <span class="token function">IfxStm_getFrequency</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MODULE_STM0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 开启CPU总中断</span>    <span class="token function">IfxCpu_enableInterrupts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**************************************************************************  函数名称：int core0_main (void)*  功能说明：CPU0主函数*  参数说明：无*  函数返回：无*  修改时间：2020年3月10日*  备    注：*************************************************************************/</span><span class="token keyword">int</span> <span class="token function">core0_main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">CPU_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 芯片初始化</span>    <span class="token function">GPIO_LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// LED初始化</span>    <span class="token function">TFTSPI_Init</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//LCD初始化  0:横屏  1：竖屏</span>    <span class="token function">TFTSPI_CLS</span><span class="token punctuation">(</span>u16BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//蓝色屏幕</span>    <span class="token function">TFTSPI_P8X16Str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Test Encoder"</span><span class="token punctuation">,</span>u16WHITE<span class="token punctuation">,</span>u16BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//字符串显示</span>    <span class="token function">Servos_Io_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 舵机初始化</span>    <span class="token function">Mortor_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 电机初始化</span><span class="token function">Encoder_Io_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 编码器初始化</span><span class="token function">Morter_Set_V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 速度设置</span><span class="token function">Servos_Set_Angle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//设置舵机角度</span><span class="token comment">// 中断太快的话  导致编码器不能更新数据</span><span class="token function">STM_InitConfig</span><span class="token punctuation">(</span>STM0<span class="token punctuation">,</span> STM_Channel_0<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 定时器STM0_0  10000us  0.01s进入一次中断</span><span class="token comment">// 通知CPU1，CPU0初始化完成</span><span class="token function">IfxCpu_releaseMutex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutexCpu0InitIsOk<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 切记CPU0,CPU1...不可以同时开启屏幕显示，否则冲突不显示</span>mutexCpu0TFTIsOk<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment">// CPU1： 0占用/1释放 TFT</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//主循环</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这其实是有一个问题需要我们思考的，那就是，电机，舵机，还有编码器，究竟要不要放到定时器里，有没有必要都放进去，定时器对编码器来说存在一定的误差，通过测试得到定时器执行间隔太快的话，好像是测不到编码器数值的，也有可能是TFT还没刷新，但是下一次定时器中断已经开始了，直接将数据覆盖了，一直这么循环下去，造成这种屏幕数字不变的情况，在加长时间之后确实是可以测到编码器的数值了，但是它应该是会丢掉一部分的反馈的。</p><p>至于该怎么处理这个问题，暂时还没想出来。但是这样应该不耽误使用，对于智能车来说应该是足够了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 如何让智能车跑起来 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplolib实时画图显示越来越慢的问题解决</title>
      <link href="/2023/03/31/matplolib%E5%AE%9E%E6%97%B6%E7%94%BB%E5%9B%BE%E6%98%BE%E7%A4%BA%E8%B6%8A%E6%9D%A5%E8%B6%8A%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2023/03/31/matplolib%E5%AE%9E%E6%97%B6%E7%94%BB%E5%9B%BE%E6%98%BE%E7%A4%BA%E8%B6%8A%E6%9D%A5%E8%B6%8A%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>2023年3月的最后一天的下午，外边很热，汽电楼依旧是那么冷，下午刚来汽电楼，试了以下昨天晚上在百度找到的解决方法，</p><p><strong>关于使用Python的Matplotlib实时画图但是越来越卡的问题</strong></p><p>找了很多方法，有的说是这个库会内存泄漏，打开任务管理器，果然，内存以每秒0.1MB的速度增长。嗯，确实是内存泄漏了，但是仔细找一下问题发现，这种情况可以使用一个函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>clf<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清除上一幅图像</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决，至此这个问题也就解决的差不多了，再就是一些数据细节方面的处理思路，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个函数 x，y，z，三个参数可以是数字，当然前提是float类型的，我怎么知道的？看报错得到的。</p><p>也可以是列表，当然前提要是数值型的列表。有了这 x，y，z，三个轴的数据接下来就好办了，直接套函数就OK了，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>y<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>z<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这三行代码是将一个字符串类型的列表值，转换为我们需要的<strong>float</strong>型。</p><p>然后就是串口接收那块的问题，串口收过来的数据是一个<strong>bytes</strong>类型的数据，而我们需要的参数是一个列表，所以如何将<strong>bytes</strong>类型转换为<strong>list</strong>？这时候又是好一顿百度。嗯，遇事不觉就百度，好使。</p><p>首先我们想要的数据那肯定是很干净的数据，最好是只给我3个坐标轴的坐标数据最好了，但是读取串口是一个<strong>bytes</strong>类型的数据，而且这个<strong>bytes****数据中还包含了  <strong>，逗号</strong>这种东西，所以我们首先要做的就是将这个</strong>bytes<strong>通过</strong>bytes.decode()<strong>函数转为</strong>str<strong>类型，之后再用</strong>str.split(“,” or ‘ ‘)**这个函数将里边的逗号 和 空格都去掉，得到干净的坐标数据。</p><p>再将坐标数都存到一个列表中，OK至此这个问题也就完了，</p><p>我在这块还将数据都保存到一个txt文件里了，关键部分代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#记得关了文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下边贴出全部代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gc<span class="token keyword">import</span> serial<span class="token keyword">import</span> serial<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>list_ports<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> open3d <span class="token keyword">as</span> o3d<span class="token comment"># 获取所有串口设备实例。</span><span class="token comment"># 如果没找到串口设备，则输出：“无串口设备。”</span><span class="token comment"># 如果找到串口设备，则依次输出每个设备对应的串口号和描述信息。</span><span class="token keyword">def</span> <span class="token function">Get_All_IO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ports_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>serial<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>list_ports<span class="token punctuation">.</span>comports<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ports_list<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"无串口设备。"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"可用的串口设备如下："</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> comport <span class="token keyword">in</span> ports_list<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>comport<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span>comport<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 得到的点云数据</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>i <span class="token operator">=</span> <span class="token number">0</span>ser <span class="token operator">=</span> serial<span class="token punctuation">.</span>Serial<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token string">"COM14"</span><span class="token punctuation">,</span> baudrate<span class="token operator">=</span><span class="token number">38400</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Get_Date_img</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>clf<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清除上一幅图像</span>    <span class="token keyword">global</span> i<span class="token punctuation">,</span> s1    Juli <span class="token operator">=</span> ser<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 每次读取一行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>Juli<span class="token punctuation">)</span><span class="token punctuation">)</span>        s1 <span class="token operator">=</span> Juli<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span> <span class="token keyword">or</span> <span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>  <span class="token comment"># 得到串口的数据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    z<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>projection<span class="token operator">=</span><span class="token string">'3d'</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个三维的绘图工程</span>    ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'3d_image_show'</span><span class="token punctuation">)</span>  <span class="token comment"># 设置本图名称</span>    ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">)</span>  <span class="token comment"># 设置x坐标轴</span>    ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span>  <span class="token comment"># 设置y坐标轴</span>    ax<span class="token punctuation">.</span>set_zlabel<span class="token punctuation">(</span><span class="token string">'Z'</span><span class="token punctuation">)</span>  <span class="token comment"># 设置z坐标轴</span>    <span class="token comment"># 要是报错 可能是这块  还没进行测试</span>    ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ioff<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭画图的窗口</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    Get_All_IO<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 得到所有串口</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        Get_Date_img<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 显示串口的数据</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Python接收串口信息并画图展示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近几日的状态</title>
      <link href="/2023/03/29/%E8%BF%91%E5%87%A0%E6%97%A5%E7%9A%84%E7%8A%B6%E6%80%81/"/>
      <url>/2023/03/29/%E8%BF%91%E5%87%A0%E6%97%A5%E7%9A%84%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p>好几天没有写博客，迄今为止，这应该是搭了这个博客之后发文间隔最大的一段时间了，最近迷上了微信读书这个软件，发现里边有很多的好书，关于编程方面的，关于电子方面的，很多，我个人看着比较好的基本到后边都收费了。很憋屈，感觉充钱太亏了，就换着看，也学到不少东西，起码每天都静下来了，没事看看书也挺好的，班里大半都去考研了，宿舍每天就剩一个兄弟也是考研的，整个宿舍就我一个没走考研这条路，现在返回也来不及了，虽然从来就没打算过，高中时候对研究生的印象到现在也每怎么变，一直感觉考研是一件很难的事.毕竟来了大一 一年可以说是整个荒废了,大二进了学校实验室,总算是找到路了,而且这东西相比于软件确实更有吸引力.</p><p>所以从大二下半年开始基本上是天天必打卡的地方了, 怎么说呢应该,在学生层面也算是排行第三位了,也就是第三个进入这个地方的人,其他陆陆续续来了不少,到现在真正留下的也就5个吗,希望是吧,怎么感觉听着这么沮丧呢,人多不挺好嘛,哈哈,去年新来了2个大一的学弟,还是挺用功的,毕竟咱大一的时候还在那LOL呢.</p><p>现在整个实验室可以说 就我一个干活的了,压力还是挺大的,不管是同学上,还是家里,还是自己马上要找工作了,反正总的来说还是要赶紧利用这最后一年的大学,多学点东西,争取追上大哥的脚步,找个好的行业,好的工作,狠狠的赚一笔,现在想想,大学也挺快的开学大一的是现在还记得挺清晰的, 转眼马上要毕业找工作了,先不管这么多了,前几天去参加学校的挑战杯答辩,发现现在的大学生确实是挺水的,很多东西在脑子一想大概就出来了,自己第一次参加答辩也挺紧张的,好在评委没怎么故意刁难,否则感觉还真不好弄了哈哈,也不至于毕竟东西又不是抄来的,蹲了2星期一点一点调试,最后换了个全校第三也可以了,毕竟这东西我都不信他能在学校排第三,也算是个惊喜,也让我错误的认为付出真的会有回报.</p><p>再有就是经过这回比赛,明显感觉到不一样了,知道成绩的第二天就找来了,要做了3D成像超声波雷达.感觉现在的生活应该和研究生的生活也差不多了,导师给个题目,要什么东西说,给钱买,有啥问题一起商量商量,当然多半是自己想吧,不知道什么时候能见一次面,平时都是微信联系的多,现在这东西也搞得差不多了,<strong>步进电机,超声波,蓝牙,串口,c,python,实时操作系统</strong>,很简单的东西,涉及的东西倒是不少,经过这个东西学到了不少东西,</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个蓝牙之间的通信</title>
      <link href="/2023/03/29/%E4%B8%A4%E4%B8%AA%E8%93%9D%E7%89%99%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
      <url>/2023/03/29/%E4%B8%A4%E4%B8%AA%E8%93%9D%E7%89%99%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>计划做一个用超声波测距模块实现3D成像的项目，一直在想用什么方法去传输信息，如果用串口那如果距离10几米，那不可能手里一直提着一盘子线。正好实验室里有好几个蓝牙模块一直没怎么用，之前都是蓝牙做从机使用电脑或者手机去控制。而且还有一个问题是<strong>python</strong> 的蓝牙库对<strong>Windows</strong>系统一点也不友好，也可能是我这电脑蓝牙有问题，毕竟直接给我炸了一个蓝牙耳机，之后就一直连不上了（doge)。回到正题，不提那个已经被实验室哥们给拆了的悲催的耳机了。</p><p>所以只能换一个方法，两个蓝牙模块之间进行通信，但是连着电脑的作为主机，接单片机的作为从机。</p><p>分别对两个蓝牙模块连接串口进行设置，这块用的是AT指令。</p><p><img src="/2023/03/29/%E4%B8%A4%E4%B8%AA%E8%93%9D%E7%89%99%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/image-20230329160005672.png" alt="image-20230329160005672"></p><p><img src="/2023/03/29/%E4%B8%A4%E4%B8%AA%E8%93%9D%E7%89%99%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/image-20230329160025924.png" alt="image-20230329160025924"></p><p>两个蓝牙之间的设置如上图所示。</p><p>之后就是接线了，千万记得别把从机的<strong>key</strong>在接上高电平了，这块没试，但是我感觉一上电可能又会进入AT模式，还有记得将串口三的波特率改了，第一次烧完之后传过来一堆菱形。很奇怪，一想才知道原来是波特率忘了调了。</p><p>接下来的工作就是继续在<strong>python</strong> 用串口接收数据用<strong>matplotlib</strong>画3d图了。至于保存的数据是存到txt文件 还是进数据库 之后做个网页去显示，还是先把当前的东西弄出来再说吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 蓝牙通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程多进程多协程</title>
      <link href="/2023/03/27/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E5%8D%8F%E7%A8%8B/"/>
      <url>/2023/03/27/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E5%8D%8F%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>CPU密集型计算</p><p>​    CPU需要大量计算和处理，IO在很短时间内就可以完成任务</p><p> IO密集型计算</p><p>​    系统运行大部分状况是CPU在等IO的读写操作，CPU占用率较低</p><p><img src="/2023/03/27/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E5%8D%8F%E7%A8%8B/image-20230327163810753.png" alt="image-20230327163810753"></p><p>为什么Python执行慢</p><p><img src="/2023/03/27/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E5%8D%8F%E7%A8%8B/image-20230327164359549.png" alt="image-20230327164359549"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLO5学习（1）</title>
      <link href="/2023/03/21/YOLO5%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/"/>
      <url>/2023/03/21/YOLO5%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="各个包的作用"><a href="#各个包的作用" class="headerlink" title="各个包的作用"></a>各个包的作用</h3><p>├── data：主要是存放一些超参数的配置文件（这些文件（yaml文件）是用来配置训练集和测试集还有验证集的路径的，其中还包括目标检测的种类数和种类的名称）；还有一些官方提供测试的图片。如果是训练自己的数据集的话，那么就需要修改其中的yaml文件。但是自己的数据集不建议放在这个路径下面，而是建议把数据集放到yolov5项目的同级目录下面。</p><p>├── models：里面主要是一些网络构建的配置文件和函数，其中包含了该项目的四个不同的版本，分别为是s、m、l、x。从名字就可以看出，这几个版本的大小。他们的检测测度分别都是从快到慢，但是精确度分别是从低到高。这就是所谓的鱼和熊掌不可兼得。如果训练自己的数据集的话，就需要修改这里面相对应的yaml文件来训练自己模型。</p><p>├── utils：存放的是工具类的函数，里面有loss函数，metrics函数，plots函数等等。</p><p>├── weights：放置训练好的权重参数。</p><p>├── detect.py：利用训练好的权重参数进行目标检测，可以进行图像、视频和摄像头的检测。</p><p>├── train.py：训练自己的数据集的函数。</p><p>├── test.py：测试训练的结果的函数。</p><p>├──requirements.txt：这是一个文本文件，里面写着使用yolov5项目的环境依赖包的一些版本，可以利用该文本导入相应版本的包。</p><p><img src="/2023/03/21/YOLO5%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/image-20230321205356661.png" alt="image-20230321205356661"></p>]]></content>
      
      
      
        <tags>
            
            <tag> YOLO5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QMC5883解算YAW</title>
      <link href="/2023/03/18/QMC5883%E8%A7%A3%E7%AE%97YAW/"/>
      <url>/2023/03/18/QMC5883%E8%A7%A3%E7%AE%97YAW/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c" data-language="c"><code class="language-c">Yaw <span class="token operator">=</span> <span class="token function">atan2</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">180</span> <span class="token operator">/</span> <span class="token number">3.14159265</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">180</span><span class="token punctuation">;</span> <span class="token comment">// y 和 x  得到YAW角</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="QMC5883-C"><a href="#QMC5883-C" class="headerlink" title="QMC5883.C"></a>QMC5883.C</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"qmc5883.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token keyword">void</span> <span class="token function">i2c_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>GPIO_InitTypeDef GPIO_Init_Structure<span class="token punctuation">;</span><span class="token function">RCC_AHB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_AHB1Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>GPIO_Init_Structure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_8 <span class="token operator">|</span> GPIO_Pin_11<span class="token punctuation">;</span> <span class="token comment">// 推挽输出 拉高</span>GPIO_Init_Structure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_OUT<span class="token punctuation">;</span>GPIO_Init_Structure<span class="token punctuation">.</span>GPIO_OType <span class="token operator">=</span> GPIO_OType_PP<span class="token punctuation">;</span>GPIO_Init_Structure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_Init_Structure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_8 <span class="token operator">|</span> GPIO_Pin_11<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">SDA_IN1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_11<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN<span class="token punctuation">;</span>  <span class="token comment">// 普通输入模式</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span> <span class="token comment">// 100M</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_PuPd <span class="token operator">=</span> GPIO_PuPd_UP<span class="token punctuation">;</span>  <span class="token comment">// 上拉</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">SDA_OUT1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_11<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_OUT<span class="token punctuation">;</span>  <span class="token comment">// 普通输出模式</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_OType <span class="token operator">=</span> GPIO_OType_PP<span class="token punctuation">;</span> <span class="token comment">// 推挽输出</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">qmc_5883_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待上电平稳</span><span class="token function">i2c_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待IIC稳定</span><span class="token function">hmc_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// SDA_IN1();</span><span class="token comment">// SDA_OUT1();</span><span class="token punctuation">&#125;</span><span class="token comment">// 产生IIC起始信号</span><span class="token keyword">void</span> <span class="token function">IIC_Start1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">SDA_OUT1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IIC_SDA1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>IIC_SCL1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IIC_SDA1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IIC_SCL1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 产生IIC停止信号</span><span class="token keyword">void</span> <span class="token function">IIC_Stop1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">SDA_OUT1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// IIC_SCL1=0;</span>IIC_SDA1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>IIC_SCL1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// IIC_SCL1=1;</span>IIC_SDA1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">IIC_Ack1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>IIC_SCL1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">SDA_OUT1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IIC_SDA1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IIC_SCL1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IIC_SCL1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">IIC_NAck1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>IIC_SCL1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">SDA_OUT1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IIC_SDA1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IIC_SCL1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IIC_SCL1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等待应答信号到来</span><span class="token comment">// 返回值：1，接收应答失败</span><span class="token comment">//         0，接收应答成功</span>u8 <span class="token function">IIC_Wait_Ack1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>u8 ucErrTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>IIC_SDA1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">SDA_IN1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SDA设置为输入</span>IIC_SCL1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>READ_SDA1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ucErrTime<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ucErrTime <span class="token operator">></span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// IIC_Stop1();</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>IIC_SCL1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 时钟输出0</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">IIC_Send_Byte1</span><span class="token punctuation">(</span>u8 txd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>u8 t<span class="token punctuation">;</span><span class="token function">SDA_OUT1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IIC_SCL1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 拉低时钟开始数据传输</span><span class="token keyword">for</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>IIC_SDA1 <span class="token operator">=</span> <span class="token punctuation">(</span>txd <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>txd <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">7</span><span class="token punctuation">)</span>IIC_SDA1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span>IIC_SDA1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>txd <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对TEA5767这三个延时都是必须的</span>IIC_SCL1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IIC_SCL1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>u8 <span class="token function">IIC_Read_Byte1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> receive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">SDA_IN1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SDA设置为输入</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>IIC_SCL1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IIC_SCL1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>receive <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>READ_SDA1<span class="token punctuation">)</span>receive<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> receive<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">hmc_write_reg</span><span class="token punctuation">(</span>u8 reg<span class="token punctuation">,</span> u8 data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">IIC_Start1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">IIC_Send_Byte1</span><span class="token punctuation">(</span>WRITE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">IIC_Wait_Ack1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">IIC_Send_Byte1</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">IIC_Wait_Ack1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">IIC_Send_Byte1</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">IIC_Wait_Ack1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">IIC_Stop1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// delay_ms(5);</span><span class="token punctuation">&#125;</span>u8 <span class="token function">hmc_read_reg</span><span class="token punctuation">(</span>u8 reg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>u8 data<span class="token punctuation">;</span><span class="token function">IIC_Start1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">IIC_Send_Byte1</span><span class="token punctuation">(</span>WRITE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">IIC_Wait_Ack1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">IIC_Send_Byte1</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">IIC_Wait_Ack1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">IIC_Stop1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">IIC_Start1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">IIC_Send_Byte1</span><span class="token punctuation">(</span>READ_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">IIC_Wait_Ack1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data <span class="token operator">=</span> <span class="token function">IIC_Read_Byte1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">IIC_NAck1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">IIC_Stop1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">hmc_read_XYZ</span><span class="token punctuation">(</span><span class="token keyword">short</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*u16 temp;temp = hmc_read_reg(DATAX_M);*data++ = (temp &lt;&lt; 8) + hmc_read_reg(DATAX_L);printf("x=%d ", *data);temp = hmc_read_reg(DATAY_M);*data++ = (temp &lt;&lt; 8) + hmc_read_reg(DATAY_L);printf("y=%d  ", *data);temp = hmc_read_reg(DATAZ_M);*data++ = (temp &lt;&lt; 8) + hmc_read_reg(DATAZ_L);printf("z=%d  ", *data);*/</span><span class="token operator">*</span>data<span class="token operator">++</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">int16_t</span><span class="token punctuation">)</span><span class="token function">hmc_read_reg</span><span class="token punctuation">(</span>DATAX_M<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">hmc_read_reg</span><span class="token punctuation">(</span>DATAX_L<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x方向数据</span><span class="token comment">// printf("x = %d", *data);</span><span class="token operator">*</span>data<span class="token operator">++</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">int16_t</span><span class="token punctuation">)</span><span class="token function">hmc_read_reg</span><span class="token punctuation">(</span>DATAY_M<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">hmc_read_reg</span><span class="token punctuation">(</span>DATAY_L<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// y方向数据</span><span class="token comment">// printf("y = %d", *data);</span><span class="token operator">*</span>data<span class="token operator">++</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">int16_t</span><span class="token punctuation">)</span><span class="token function">hmc_read_reg</span><span class="token punctuation">(</span>DATAZ_M<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">hmc_read_reg</span><span class="token punctuation">(</span>DATAZ_L<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// z 方向数据</span> <span class="token comment">// printf("z = %d", *data);</span><span class="token comment">// temp = hmc_read_reg(DATAZ_M);</span><span class="token comment">// *data++ = (temp &lt;&lt; 8) + hmc_read_reg(DATAZ_L);</span><span class="token comment">// printf("z=%d  ", *data);</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">hmc_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">hmc_write_reg</span><span class="token punctuation">(</span><span class="token number">0X0B</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">hmc_write_reg</span><span class="token punctuation">(</span><span class="token number">0X20</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">hmc_write_reg</span><span class="token punctuation">(</span><span class="token number">0X21</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// hmc_write_reg(CONFIGA, 0x1D);</span><span class="token function">hmc_write_reg</span><span class="token punctuation">(</span>CONFIGA<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2G   50HZ   连续读   512采样率</span><span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="QMC5883-h"><a href="#QMC5883-h" class="headerlink" title="QMC5883.h"></a>QMC5883.h</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">u8</span> <span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">char</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WRITE_ADDRESS</span> <span class="token expression"><span class="token number">0x1a</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">READ_ADDRESS</span> <span class="token expression"><span class="token number">0x1b</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CONFIGA</span> <span class="token expression"><span class="token number">0x09</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CONFIGB</span> <span class="token expression"><span class="token number">0x09</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MODE</span> <span class="token expression"><span class="token number">0x09</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DATAX_L</span> <span class="token expression"><span class="token number">0x00</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DATAX_M</span> <span class="token expression"><span class="token number">0x01</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DATAY_L</span> <span class="token expression"><span class="token number">0x02</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DATAY_M</span> <span class="token expression"><span class="token number">0x03</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DATAZ_L</span> <span class="token expression"><span class="token number">0x04</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DATAZ_M</span> <span class="token expression"><span class="token number">0x05</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QMC5883L_CFGA_OSR_512</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QMC5883L_CFGA_OSR_256</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QMC5883L_CFGA_OSR_128</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QMC5883L_CFGA_OSR_64</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QMC5883L_CFGA_RNG_2G</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QMC5883L_CFGA_RNG_8G</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QMC5883L_CFGA_ODR_10HZ</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QMC5883L_CFGA_ODR_50HZ</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QMC5883L_CFGA_ODR_100HZ</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QMC5883L_CFGA_ODR_200HZ</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QMC5883L_CFGA_MODE_STANDBY</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QMC5883L_CFGA_MODE_CONTINUE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token comment">//   512采样率   2g范围  50HZ输出速率  连续读模式</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">config</span> <span class="token expression">QMC5883L_CFGA_OSR_512 <span class="token operator">|</span> QMC5883L_CFGA_RNG_2G <span class="token operator">|</span> QMC5883L_CFGA_ODR_50HZ <span class="token operator">|</span> QMC5883L_CFGA_MODE_CONTINUE</span></span><span class="token keyword">void</span> <span class="token function">hmc_write_reg</span><span class="token punctuation">(</span>u8 reg<span class="token punctuation">,</span> u8 data<span class="token punctuation">)</span><span class="token punctuation">;</span>u8 <span class="token function">hmc_read_reg</span><span class="token punctuation">(</span>u8 reg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">hmc_read_XYZ</span><span class="token punctuation">(</span><span class="token keyword">short</span> <span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">hmc_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">i2c_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">qmc_5883_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IIC_SCL1</span> <span class="token expression"><span class="token function">PAout</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>  </span><span class="token comment">// SCL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IIC_SDA1</span> <span class="token expression"><span class="token function">PAout</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> </span><span class="token comment">// SDA</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">READ_SDA1</span> <span class="token expression"><span class="token function">PAin</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> </span><span class="token comment">// 输入SDA</span></span><span class="token keyword">void</span> <span class="token function">i2c_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">SDA_IN1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">SDA_OUT1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IIC_Start1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IIC_Stop1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u8 <span class="token function">IIC_Wait_Ack1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IIC_Ack1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IIC_NAck1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IIC_Send_Byte1</span><span class="token punctuation">(</span>u8 txd<span class="token punctuation">)</span><span class="token punctuation">;</span>u8 <span class="token function">IIC_Read_Byte1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 无人机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无人机2023/3/17进度</title>
      <link href="/2023/03/17/%E6%97%A0%E4%BA%BA%E6%9C%BA2023-3-17%E8%BF%9B%E5%BA%A6/"/>
      <url>/2023/03/17/%E6%97%A0%E4%BA%BA%E6%9C%BA2023-3-17%E8%BF%9B%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="2023年3月17日，终于跑通了MPU6050与QMC5883L得到了他们的原始数据。"><a href="#2023年3月17日，终于跑通了MPU6050与QMC5883L得到了他们的原始数据。" class="headerlink" title="2023年3月17日，终于跑通了MPU6050与QMC5883L得到了他们的原始数据。"></a><strong>2023年3月17日，终于跑通了MPU6050与QMC5883L得到了他们的原始数据。</strong></h2><p>接下来就是对这些数据的解算 滤波等等等等一系列的处理。</p><p>在此做个记录。将这个源码开源到<strong>GitHub</strong>了，方便以后查找和使用。</p><p><img src="/2023/03/17/%E6%97%A0%E4%BA%BA%E6%9C%BA2023-3-17%E8%BF%9B%E5%BA%A6/image-20230317213628609.png" alt="image-20230317213628609"></p><p>先记录下这最开始的10w条数据。</p><p>另外QMC5883的量程感觉还可以继续调试。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 无人机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八种输入输出方式理解</title>
      <link href="/2023/03/16/%E5%85%AB%E7%A7%8D%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%96%B9%E5%BC%8F%E7%90%86%E8%A7%A3/"/>
      <url>/2023/03/16/%E5%85%AB%E7%A7%8D%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%96%B9%E5%BC%8F%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>​    </p><h2 id="TTL肖特基"><a href="#TTL肖特基" class="headerlink" title="TTL肖特基"></a>TTL肖特基</h2><p>肖特基二极管，也被称为热载流子二极管，是一种<strong>具有低正向压降和非常快速的开关动作的半导体二极管</strong>。当电流流过肖特基二极管时，肖特基二级管端子上有一个小的电压降。普通二极管的电压压降在0.6V-1.7V之间，而肖特基二极管的电压降通常在0.15V-0.45V之间。</p><p>这种较低的电压降提供了更好的系统效率和更高的开关速度。在肖特基二极管中，半导体和金属之间形成了一个<strong>半导体-金属结</strong>，从而形成了肖特基势垒。N型半导体作为阴极，金属侧作为二极管的阳极。这种<strong>肖特基势垒导致低正向电压降和非常快速的开关。</strong></p><h2 id="1-肖基特二极管的优缺点"><a href="#1-肖基特二极管的优缺点" class="headerlink" title="1.肖基特二极管的优缺点"></a>1.<strong>肖基特二极管的优缺点</strong></h2><h3 id="优点1：低正向导通压降"><a href="#优点1：低正向导通压降" class="headerlink" title="优点1：低正向导通压降"></a><strong>优点1：低正向导通压降</strong></h3><p>肖特基二极管的导通电压在硅二极管的0.2V-0.3V之间，而而标准硅二极管的导通电压在 0.6 到 0.7 伏之间。这使得它具有与锗二极管非常相同的开启电压。</p><h3 id="优点2：快速恢复时间"><a href="#优点2：快速恢复时间" class="headerlink" title="优点2：快速恢复时间"></a>优点2：<strong>快速恢复时间</strong></h3><p>由于存储电荷量少，恢复时间快，这意味着它可以用于高速开关应用。</p><h3 id="优点3：低结电容"><a href="#优点3：低结电容" class="headerlink" title="优点3：低结电容"></a>优点3：低结电容</h3><p>鉴于非常小的有源区域，通常由于在硅上使用线点接触，电容水平非常小。</p><h3 id="优点4：高电流密度"><a href="#优点4：高电流密度" class="headerlink" title="优点4：高电流密度"></a>优点4：高电流密度</h3><p>肖特基二极管的耗尽区可以忽略不计。所以施加很小的电压就足以产生大电流。</p><h3 id="优点5：噪音更小"><a href="#优点5：噪音更小" class="headerlink" title="优点5：噪音更小"></a>优点5：噪音更小</h3><p>与典型的PN结二极管相比，肖特基二极管产生的不需要的噪声更少。</p><h3 id="优点6：性能更好"><a href="#优点6：性能更好" class="headerlink" title="优点6：性能更好"></a>优点6：性能更好</h3><p>肖特基二极管将消耗更少的功率，可以轻松满足低压应用的要求。</p><h3 id="缺点1：较高反向电流"><a href="#缺点1：较高反向电流" class="headerlink" title="缺点1：较高反向电流"></a><strong>缺点1：</strong>较高反向电流</h3><p>由于肖特基二极管是金属半导体结构，反接电压时更容易漏电流。</p><h3 id="缺点2：较低最大反向电压"><a href="#缺点2：较低最大反向电压" class="headerlink" title="缺点2：较低最大反向电压"></a>缺点2：较低最大反向电压</h3><p>反向电压是当电压反向连接（从阴极到阳极）时二极管将击穿并开始传导大量电流的电压。这意味着肖特基二极管在不击穿和传导大量电流的情况下无法承受很大的反向电压。甚至在达到这个最大反向值之前，它仍然会泄漏少量电流。</p><h2 id="2-浮空输入"><a href="#2-浮空输入" class="headerlink" title="2.浮空输入"></a><strong>2.浮空输入</strong></h2><p>​        浮空输入就是引脚不接高电平也不接低电平，就是浮在空中，此端口在默认情况下什么都不接，呈高阻态，不知道现在是什么电平，有可能是高电平也有可能是低电平。一般数据传输用的比较多。</p><h2 id="3-上拉输入"><a href="#3-上拉输入" class="headerlink" title="3.上拉输入"></a><strong>3.上拉输入</strong></h2><p>就是把电位拉高，就是将不确定的信号通过一个电阻钳位在高电平，电阻同时起到限流的作用，</p><h2 id="4-下拉输入"><a href="#4-下拉输入" class="headerlink" title="4.下拉输入"></a><strong>4.下拉输入</strong></h2><p>把点位拉低到GND。</p><h2 id="5-模拟输入"><a href="#5-模拟输入" class="headerlink" title="5.模拟输入"></a><strong>5.模拟输入</strong></h2><p>将芯片引脚模拟信号输入到内部的模数传感器，此时的上拉电阻，下拉电阻，肖特基二极管都关闭。</p><h2 id="6-开漏输出（有点蒙蔽了）"><a href="#6-开漏输出（有点蒙蔽了）" class="headerlink" title="6.开漏输出（有点蒙蔽了）"></a><strong>6.开漏输出</strong>（有点蒙蔽了）</h2><h2 id="7-开漏复用输出"><a href="#7-开漏复用输出" class="headerlink" title="7.开漏复用输出"></a><strong>7.开漏复用输出</strong></h2><p>GPIO用作第二功能时使用的配置，端口必须配置成复用功能输出模式，</p><h2 id="8-推挽输出"><a href="#8-推挽输出" class="headerlink" title="8.推挽输出"></a><strong>8.推挽输出</strong></h2><p>可以输出高低电平，高低切换快，损耗低，效率高。</p><h2 id="9-推挽复用输出"><a href="#9-推挽复用输出" class="headerlink" title="9.推挽复用输出"></a><strong>9.推挽复用输出</strong></h2><p>GPIO用作第二功能时的配置情况， </p>]]></content>
      
      
      
        <tags>
            
            <tag> Stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无人机项目记录</title>
      <link href="/2023/03/14/%E6%97%A0%E4%BA%BA%E6%9C%BA%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/03/14/%E6%97%A0%E4%BA%BA%E6%9C%BA%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="无人机项目记录"><a href="#无人机项目记录" class="headerlink" title="无人机项目记录"></a>无人机项目记录</h2><h3 id="2023年3月14日"><a href="#2023年3月14日" class="headerlink" title="2023年3月14日"></a><strong>2023年3月14日</strong></h3><p><strong>开始构思整个项目要用到的模块以及整体的思路。写出一个大概的思维导图</strong></p><p><strong>使用MindMaster工具制作</strong></p><p><img src="/2023/03/14/%E6%97%A0%E4%BA%BA%E6%9C%BA%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E6%97%A0%E4%BA%BA%E6%9C%BAMCU.png" alt="无人机MCU"></p><p><strong>原本计划使用FreeRTOS操作系统来制作，但是基于时间原因，还是继续用裸机开发把。</strong></p><p><strong>首先要做的就是MPU6050底层逻辑的移植，解算本来有dmp库的，但是还是自己来进行姿态解算吧。</strong></p><h3 id="2023年3月17日"><a href="#2023年3月17日" class="headerlink" title="2023年3月17日"></a>2023年3月17日</h3><p>​    <strong>终于跑通了MPU6050与QMC5883L得到了他们的原始数据。</strong>    <strong>之后就是开始滤波的工作。</strong></p><p><img src="/2023/03/14/%E6%97%A0%E4%BA%BA%E6%9C%BA%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20230317213628609.png" alt="image-20230317213628609"></p><h3 id="2023年3月18日上午"><a href="#2023年3月18日上午" class="headerlink" title="2023年3月18日上午"></a>2023年3月18日上午</h3><p>​    根据QMC5883磁力计，求出了Yaw角，范围从0到360，拿手直接转效果还不错。之后就是对MPU6050进行解算。</p><h3 id="2023年3月18日晚上"><a href="#2023年3月18日晚上" class="headerlink" title="2023年3月18日晚上"></a>2023年3月18日晚上</h3><p>​    得出了无人机的三个姿态角 Pitch Roll 和 Yaw。</p><h3 id="2023年3月19日"><a href="#2023年3月19日" class="headerlink" title="2023年3月19日"></a>2023年3月19日</h3><p>​    打算花费几天时间去重新构思一下整个项目用到的所有资源，以及以后要进行什么拓展。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 无人机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无人机计划-项目思维导图</title>
      <link href="/2023/03/14/%E6%97%A0%E4%BA%BA%E6%9C%BA%E8%AE%A1%E5%88%92-%E9%A1%B9%E7%9B%AE%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
      <url>/2023/03/14/%E6%97%A0%E4%BA%BA%E6%9C%BA%E8%AE%A1%E5%88%92-%E9%A1%B9%E7%9B%AE%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/03/14/%E6%97%A0%E4%BA%BA%E6%9C%BA%E8%AE%A1%E5%88%92-%E9%A1%B9%E7%9B%AE%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/%E6%97%A0%E4%BA%BA%E6%9C%BAMCU.png" alt="无人机MCU"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 无人机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android_study</title>
      <link href="/2023/03/14/Android-study/"/>
      <url>/2023/03/14/Android-study/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小车SPI通信之路行不通解决办法</title>
      <link href="/2023/03/13/%E5%B0%8F%E8%BD%A6SPI%E9%80%9A%E4%BF%A1%E4%B9%8B%E8%B7%AF%E8%A1%8C%E4%B8%8D%E9%80%9A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2023/03/13/%E5%B0%8F%E8%BD%A6SPI%E9%80%9A%E4%BF%A1%E4%B9%8B%E8%B7%AF%E8%A1%8C%E4%B8%8D%E9%80%9A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>小车弄了将近半个月，SPI通信仍然有犯错的时候，一直怀疑是线路的问题，但是有没有好的排查方法，SPI协议拿来看视频的没问题，按理说不会出现传输卡顿，几个字节的数据也不可能卡。最近马上进行比赛，要求把车带上台演示，</p><p>不得已直接换一个简单粗暴的方法控制得了。</p><p>在这打一个断点，先中断一下子，等到比赛结束之后再回来继续研究SPI为啥总是会移位。 </p><p><img src="/2023/03/13/%E5%B0%8F%E8%BD%A6SPI%E9%80%9A%E4%BF%A1%E4%B9%8B%E8%B7%AF%E8%A1%8C%E4%B8%8D%E9%80%9A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/abb4537f7fdd6950635e9b01cfdf467.jpg" alt="abb4537f7fdd6950635e9b01cfdf467"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 3月13日新思路     称她为简单粗暴直接控制法</span><span class="token comment">//由于 每次一到原地旋转就不好使了 所以针对这情况 不用api来控制 原地旋转了</span><span class="token comment">//直接 拉出3根线来   专门控制这两个动作   一根线负责高低电平的变化， 另外2根  可以组合出4种情况  </span><span class="token comment">//由于左转 右转 的情况不太好进行设置 所以暂时 只用来控制原地旋转和复位</span><span class="token comment">//如果原地旋转 那么  主节点设置控制电平的线从低电平变为高电平。</span><span class="token comment">//从此刻开始检测 另外2根线的电平是什么，肯定会得到4种情况里的一种。  随便定义2种情况作为 旋转 和 复位。</span><span class="token comment">// 在此定义一个  标志位flag初始值为 0  一旦得出是什么动作  就会将这个 标志位flag 就会置 1 , </span><span class="token comment">//当电平线 从高电平被拉为低电平后  flag = 0 在此恢复flag 位，  至此想象中这个问题应该可以解决。</span><span class="token comment">//设置E2 脚电平控制线  E3 和 E4 来控制是旋转还是复位</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 智能车 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPI调试记录</title>
      <link href="/2023/03/12/SPI%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/03/12/SPI%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p><img src="/SPI%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/image-20230312224808690.png" alt="image-20230312224808690"></p><p>NSS配置参考网址：</p><p> <a href="https://www.bilibili.com/read/cv3496693">https://www.bilibili.com/read/cv3496693</a></p><p>如果是软件模式</p><p>则 通信过程应为：</p><p>主机定义  3个引脚即可    CLK    MOSI    MISO</p><p>从机</p>]]></content>
      
      
      
        <tags>
            
            <tag> SPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对PID的理解</title>
      <link href="/2023/03/11/%E5%AF%B9PID%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2023/03/11/%E5%AF%B9PID%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>​    </p><p>对PID的解释大概就是这张图   <strong>P比例    I积分  D微分</strong></p><p><img src="/2023/03/11/%E5%AF%B9PID%E7%9A%84%E7%90%86%E8%A7%A3/image-20230311232353308.png" alt="image-20230311232353308"></p><p><strong>PID控制，即Proportional (P)– Integral(I) – Derivative(D) Control, 实际上是三种反馈控制：比例控制，积分控制与微分控制的统称。</strong></p><p><strong>P的作用是是当前值逐渐靠近目标值</strong>，<strong>当比较接近目标时，P的控制作用就比较小了。越接近目标，P的作用越温柔。有很多内在的或者外部的因素，使控制量发生小范围的摆动。</strong></p><p><strong>KP：一种比例反馈控制，把输出与输入的误差e按照一定的比例K进行放大或者缩小作为系统的输入。</strong></p><p><strong>关于比例控制器的公式为 ：</strong> </p><pre class="line-numbers language-c" data-language="c"><code class="language-c">pwm输出增量  <span class="token operator">=</span>  KP <span class="token operator">*</span> <span class="token punctuation">(</span>target_val <span class="token operator">-</span> now_val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每次计算的输出值 = 比例系数 * （目标值 - 当前值）  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种方法简单，但是存在稳态误差 </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> now <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span> <span class="token comment">//当前值</span>    <span class="token keyword">float</span> val <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span> <span class="token comment">//目标值</span>    <span class="token keyword">float</span> pwm<span class="token punctuation">;</span>       <span class="token comment">//每次的变化值</span>    <span class="token keyword">float</span> Kp <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pwm <span class="token operator">=</span> Kp <span class="token operator">*</span> <span class="token punctuation">(</span>val <span class="token operator">-</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//比例控制后的输出值</span>        now <span class="token operator">+=</span> pwm<span class="token punctuation">;</span>        now <span class="token operator">=</span> now <span class="token operator">-</span> <span class="token number">0.1</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/11/%E5%AF%B9PID%E7%9A%84%E7%90%86%E8%A7%A3/image-20230312153645629.png" alt="image-20230312153645629"></p><p>可以看到执行一定的次数之后变化值与误差值相等 每次的变化和误差一样，存在稳态误差，导致KP在这种情况下失去了作用。</p><p>这种情况有可能出现在控制汽车速度时，汽车的摩擦力和我们每次增加的值一样，无人机速度控制每次的输出的增量都和空气阻力大小一样。为了防止这种情况影响我们的控制。</p><p>在此引出另一个 参数 <strong>KI</strong></p><p><strong>I的作用是，减小静态情况下的误差，让受控物理量尽可能接近目标值</strong>。</p><p>关于KI的使用**积分控制算法 **  <strong>该分量和误差的积分是正比关系</strong></p><p><strong>所以比例+积分的公式为：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">pwm <span class="token operator">=</span> KP <span class="token operator">*</span> <span class="token punctuation">(</span>target_val <span class="token operator">-</span> now_val<span class="token punctuation">)</span> <span class="token operator">+</span>  ki∗∫误差的累计<span class="token punctuation">;</span>   <span class="token comment">//每次计算的输出值 = 比例系数 * （目标值 - 当前值） + KI * 误差累积的积分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> now <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span> <span class="token comment">//当前值</span>    <span class="token keyword">float</span> val <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span> <span class="token comment">//目标值</span>    <span class="token keyword">float</span> pwm<span class="token punctuation">;</span>       <span class="token comment">//每次的变化值</span>    <span class="token keyword">float</span> Kp <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>  <span class="token comment">//比例系数</span>    <span class="token keyword">float</span> KI <span class="token operator">=</span> <span class="token number">0.05</span><span class="token punctuation">;</span> <span class="token comment">//积分系数</span>    <span class="token keyword">float</span> wucha <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//累计误差</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        wucha <span class="token operator">+=</span> <span class="token punctuation">(</span>val <span class="token operator">-</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//误差累积</span>        pwm <span class="token operator">=</span> Kp <span class="token operator">*</span> <span class="token punctuation">(</span>val <span class="token operator">-</span> now<span class="token punctuation">)</span> <span class="token operator">+</span> KI <span class="token operator">*</span> <span class="token punctuation">(</span>wucha<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//比例控制后的输出值</span>        now <span class="token operator">+=</span> pwm<span class="token punctuation">;</span>        now <span class="token operator">=</span> now <span class="token operator">-</span> <span class="token number">0.1</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/11/%E5%AF%B9PID%E7%9A%84%E7%90%86%E8%A7%A3/image-20230312161020062.png" alt="image-20230312161020062"></p><p>可以看到只用<strong>KP</strong> 和<strong>KI</strong>这两个参数就可以使我们这个例子比较好的停在目标位置了。但是还有一个<strong>KD</strong>。</p><p><strong>关于KD的使用</strong></p><p><strong>D的作用就是让物理量的速度趋于0，只要什么时候，这个量具有了速度，D就向相反的方向用力，尽力刹住这个变化</strong>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> now <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span> <span class="token comment">//当前值</span>    <span class="token keyword">float</span> val <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span> <span class="token comment">//目标值</span>    <span class="token keyword">float</span> Kp <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>  <span class="token comment">//比例系数</span>    <span class="token keyword">float</span> KI <span class="token operator">=</span> <span class="token number">0.05</span><span class="token punctuation">;</span> <span class="token comment">//积分系数</span>    <span class="token keyword">float</span> KD <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span> <span class="token comment">//微分系数</span>    <span class="token keyword">float</span> wucha <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//累计误差</span>    <span class="token keyword">float</span> error_old <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//记录上次的误差</span>    <span class="token keyword">float</span> pwm<span class="token punctuation">;</span>       <span class="token comment">//每次的变化值</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        wucha <span class="token operator">+=</span> <span class="token punctuation">(</span>val <span class="token operator">-</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//误差累积</span>        pwm <span class="token operator">=</span> Kp <span class="token operator">*</span> <span class="token punctuation">(</span>val <span class="token operator">-</span> now<span class="token punctuation">)</span> <span class="token operator">+</span> KI <span class="token operator">*</span> <span class="token punctuation">(</span>wucha<span class="token punctuation">)</span> <span class="token operator">+</span> KD <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>val <span class="token operator">-</span> now<span class="token punctuation">)</span> <span class="token operator">-</span> error_old<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//比例控制</span>        now <span class="token operator">+=</span> pwm<span class="token punctuation">;</span>        now <span class="token operator">=</span> now <span class="token operator">-</span> <span class="token number">0.1</span><span class="token punctuation">;</span>        error_old <span class="token operator">=</span> <span class="token punctuation">(</span>val <span class="token operator">-</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//记录上次的误差</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/11/%E5%AF%B9PID%E7%9A%84%E7%90%86%E8%A7%A3/image-20230312163510853.png" alt="image-20230312163510853"></p><p>D的作用在这看着好像没什么作用，但是相比于没有确实是离得远的时候有一个“助力”，离得近的时候有个阻力作用。</p><p>但是理论上再说他应该是一个纯阻力才对。让人挠头的一个东西。不过影响不大。</p><h2 id="增量型控制算法-电机速度控制"><a href="#增量型控制算法-电机速度控制" class="headerlink" title="增量型控制算法 电机速度控制"></a>增量型控制算法 电机速度控制</h2><p><strong>速度闭环控制就是根据单位时间获取的脉冲数（这里使用了M法测速）测量电机的速度信息，并与目标值进行比较，得到控制偏差，然后通过对偏差的比例、积分、微分进行控制，使偏差趋向于零的过程。</strong></p><h2 id="位置型控制算法-电机速度控制"><a href="#位置型控制算法-电机速度控制" class="headerlink" title="位置型控制算法 电机速度控制"></a><strong>位置型控制算法 电机速度控制</strong></h2><p><strong>位置闭环控制就是根据编码器的脉冲累加测量电机的位置信息，并与目标值进行比较，得到控制偏差，然后通过对偏差的比例、积分、微分进行控制，使偏差趋向于零的过程。</strong>步进电机貌似可以用这个。 正方向加脉冲数，反方向减脉冲数。但实现应该会有很多问题。如果加个检测位置的东西会简单很多。</p><h4 id="最后总结一下就是："><a href="#最后总结一下就是：" class="headerlink" title="最后总结一下就是："></a>最后总结一下就是：</h4><p><strong>比例环节:着眼于当下误差</strong><br><strong>积分环节:累计过去所有误差，积分环节将过去的所有误差累加.最后乘以一个系数��.</strong><br><strong>微分环节:预测下一时刻误差。微分环节对当前时刻的误差求导,从而”预测”下一时刻的误差.在离散环境下,其数值等于此时的误差减去上一时刻的误差.微分环节很好的解决了积分环节带来的超调问题；</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> PID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>步进电机确定相序</title>
      <link href="/2023/03/11/%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA%E7%A1%AE%E5%AE%9A%E7%9B%B8%E5%BA%8F/"/>
      <url>/2023/03/11/%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA%E7%A1%AE%E5%AE%9A%E7%9B%B8%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>问题处出</p><p>新买的电机，拿来发现菜单就3个选项，并且校准是一直来回抖动，去问店家得知是相序的问题，测相序的方法如下</p><p><strong>方法一：</strong>先将步进电机的4条线分开，用手转动电机轴，感觉一下此时的阻力。然后将步进电机的任意两条线短接在一起，此时再用手拧电机轴，如果感觉阻力与刚才一样，则可判断这两条线不是同一相；如果感觉阻力比刚才有明显的增加，则可判断这两条线是同一相，可接在驱动器A+、A-，另外两条线则接在B+和B-。AB部分，正负不分。</p><p>**方法二:**用万用表。量一下电机其中的两根线，有阻值的为一相。可接在驱动器A+、A-，另外两条线则接在B+和B-。AB部分，正负不分。</p><h2 id="步进电机的AB相"><a href="#步进电机的AB相" class="headerlink" title="步进电机的AB相"></a>步进电机的AB相</h2><p><strong>两相步进电机，对应接到A+、A-,B+和B-,那么按照以下操作</strong></p><p>步进电机上的“A+A-B+B-”就是电机的驱动线，“A+”、“ A-”代表一相，“B+”、“B-”代表另一相。</p><p>步进电机的定子是几个串联的线圈构成的磁体。有两个线圈绕组，每个线圈两个头，出线一般是四条线标记为A+，A-，B+，B-。</p><p>步进电机按照特定的时序激磁，电机就能沿逆时针方向连续旋转。改变激磁时序，电机将沿顺时针方向连续旋转。</p><p>其工作的激磁次序为：</p><p>正向：A+ → A- ，B+ → B- ，A+ ← A- ，B+ ← B-</p><p>反向：A+ → A- ，B+ ← B- ，A+ ← A- ，B+ → B-</p><p>两相步进电机转向变换：只需将电机与驱动器接线的A+和A-（或者B+和B-）对调即可。</p><p>如果是第一次接线，一定要确认好电机的相位线，或者按照图纸接线，切记两相步进电机的A+A-和B+B-千万不能接错，如果接错可能造成电机堵转，严重的话电机烧毁。</p><h2 id="编码器的AB相"><a href="#编码器的AB相" class="headerlink" title="编码器的AB相"></a>编码器的AB相</h2><p>A,B两相是两组脉冲输出，其相差相位角90度。 一组脉冲每两个脉冲上升沿之间为一个脉冲周期，也就是相位角360度，90度相位角是1/4个脉冲周期。 通过判断A相提前于B相1/4脉冲周期或落后于B相1/4周期，可以判断编码器的旋转方向，在计数中可以判断增量加，还是减。 在测速中，用一相就可以了，如果要判断旋转方向，有负速度值，就要用到两相。 利用A,B两相位差及脉冲的上升下降沿的排列，可以将编码器的每圈输出脉冲数4倍频。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 步进电机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是鲁棒性</title>
      <link href="/2023/03/08/%E4%BB%80%E4%B9%88%E6%98%AF%E9%B2%81%E6%A3%92%E6%80%A7/"/>
      <url>/2023/03/08/%E4%BB%80%E4%B9%88%E6%98%AF%E9%B2%81%E6%A3%92%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是鲁棒性"><a href="#什么是鲁棒性" class="headerlink" title="什么是鲁棒性"></a>什么是鲁棒性</h2><p>鲁棒性亦称健壮性、稳健性、强健性，是系统的健壮性，它是在异常和危险情况下系统生存的关键，是指系统在一定(结构、大小)的参数摄动下，维持某些性能的特性。</p><p>例如，计算机软件在输入错误、磁盘故障、网络过载或有意攻击情况下，能否不死机、不崩溃，就是该软件的鲁棒性。</p><p>控制系统的鲁棒性<br> 　一个反馈控制系统是鲁棒的，或者说一个反馈控制系统具有鲁棒性，就是指这个反馈控制系统在某一类特定的不确定性条件下具有使稳定性、渐近调节和动态特性保持不变的特性，即这一反馈控制系统具有承受这一类不确定性影响的能力。</p><p>很显然，控制系统的鲁棒性贯穿着稳定性、渐近调节和动态特性这三个方面的内容，即分别有鲁棒稳定性、鲁棒渐近调节和鲁棒动态特性，其中鲁棒渐近调节和鲁棒动态特性反映了控制系统的鲁棒性能要求。</p><p>(1)鲁棒稳定性是指在一组不确定性的作用下仍然能够保证反馈控制系统的稳定性。</p><p>(2)鲁棒渐近调节是指在一组不确定性的影响下仍然可以实现反馈控制系统的渐近调节功能。</p><p>(3)鲁棒动态特性通常称为灵敏度特性，即要求动态特性不受不确定性的影响。</p><p>从工程技术的角度看，一个反馈控制系统的设计问题就是，根据给定的控制对象模型，寻找一个控制器，以保证反馈控制系统的稳定性，使反馈控制系统达到期望的性能，并对模型不确定性和扰动不确定性具有鲁棒性。</p><p>具有鲁棒性的控制系统称为鲁棒控制系统。在实际控制问题中，不确定性往往是有界的。因此，在鲁棒控制系统设计中，一般是假定不确定性在一个可能的范围内变化来进行控制器的设计，这就意味着设计出来的控制器，在这个可能的不确定性范围内均能使控制系统的稳定性和性能保持不变。换句话说，就是确定不确定性可能变化的范围界限，在不确定性变化的这个可能范围内对最坏情况进行控制系统设计。根据不确定性变化的范围界限，在这个范围内进行最坏情况下的控制系统设计，这就是鲁棒控制系统设计的基本思想。这一设计思想的出发点是，只要设计出来的控制系统在最坏情况下具有鲁棒性，那么这个控制系统在其他情况下也一定具有鲁棒性。</p><h2 id="什么是响应快速性"><a href="#什么是响应快速性" class="headerlink" title="什么是响应快速性"></a>什么是响应快速性</h2><p>响应快速性所谓的响应快速性就是处于稳定状态的系统对于外部环境改变的快速反应能力，也是系统在受到扰动后迅速进入稳态的能力。对于生物模块来讲，任何输入信号，无论是信号分子、蛋白质，还是代射物，都会降解、排出或者转化成其他物质。生物模块必须要在这些输入信号消失之前做出响应，才能确保自身功能的发挥。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 无人机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP/IP通信协议</title>
      <link href="/2023/03/07/TCP-IP%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
      <url>/2023/03/07/TCP-IP%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="一、计算机网络的发展历程"><a href="#一、计算机网络的发展历程" class="headerlink" title="一、计算机网络的发展历程"></a>一、计算机网络的发展历程</h2><h3 id="1、计算机网络发展"><a href="#1、计算机网络发展" class="headerlink" title="1、计算机网络发展"></a>1、计算机网络发展</h3><p>　　与其说计算机改变了世界，倒不如说是计算机网络改变了世界。彼时彼刻，你我都因网络而有了交集，岂非一种缘分？</p><p>　　计算机与网络发展大致经历如下过程：</p><p><img src="/2023/03/07/TCP-IP%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/%E4%B8%8B%E8%BD%BD-16781829675782.png" alt="下载"></p><h3 id="2、计算机的模式变化"><a href="#2、计算机的模式变化" class="headerlink" title="2、计算机的模式变化"></a>2、计算机的模式变化</h3><p>　　起初的计算机主要以“单机”形式存在，计算机之间没有通信可言，而网络的出现才真正让计算机变得与以往的工具不同，信息的共享和交流让计算机成为划时代的产物。网络按照规模可划分为：</p><ul><li><strong>局域网（LAN）</strong>：局域网是某一区域内由多台计算机互联成的计算机组。一般在几公里范围内。</li><li><strong>广域网（WAN）</strong>：广域网的范围很大，几十公里到几千公里，可以是一个区域的计算机网也可能是整个国家的计算机网。</li></ul><p>　　注：我们常见的<strong>WLAN</strong>是LAN的一种，称为无线局域网。在无线局域网WLAN发明之前，人们要想通过网络进行联络和通信，必须使用<strong>物理线缆-铜绞线或光纤</strong>进行物理线路连接，但这样的局域网转载和拆卸都很麻烦。随着网络的发展，人民利用<strong>射频（Radio Frequency； RF）的技术</strong>，使用<strong>电磁波</strong>进行网络架构，实现了无线局域网互联，让信息随身化。</p><h2 id="二、各种协议"><a href="#二、各种协议" class="headerlink" title="二、各种协议"></a>二、各种协议</h2><h3 id="1、协议的重要性"><a href="#1、协议的重要性" class="headerlink" title="1、协议的重要性"></a>1、协议的重要性</h3><p>　　计算机之间要实现通信，除了技术支持还需要一些规则来进行信息匹配，方能进行交流。不同的厂商生产不同的计算机，其CPU等内部构造不尽相同，就好比两个外国人，那么计算机或者说外国人之间需要实现通信或交流，那么两者之间就需要学会同一种交流规则，对于两个外国人来说，这种交流规则就是语言，而对于计算机来说，这种交流规则就是各种协议。协议的出现让不同厂商之间生产的计算机只要能够支持同一种协议就能实现正常通信，进行交流。</p><p>　　下面是一些以前常用的协议（因为现在基本都是TCP/IP协议）：</p><p>![下载 (2)](  下载 (2).png)</p><h3 id="2、协议的标准：OSI七层模型"><a href="#2、协议的标准：OSI七层模型" class="headerlink" title="2、协议的标准：OSI七层模型"></a>2、协议的标准：OSI七层模型</h3><p>　　计算机通信诞生之初，系统化与标准化未收到重视，不同厂商只出产各自的网络来实现通信，这样就造成了对用户使用计算机网络造成了很大障碍，<strong>缺乏灵活性和可扩展性</strong></p><p>为解决该问题，ISO（国际标准化组织）制定了一个<strong>国际标准OSI（开放式通信系统互联参考模型）。</strong></p><p>　　注：TCP/IP并非ISO指定，是由IETF（国际互联网工程任务组）建议、致力推进标准化的一种协议，其中，大学等研究机构和计算机行业是推动标准化的核心力量，现已成为业界标准协议。协议的标准化也推动了计算机网络的普及。</p><p>　　ISO对协议进行分层，每个分层可以独立使用，其实系统中某些分层发生变化，也不会影响整个系统，因此可以构造一个扩展性和灵活性都比较强的系统；此外，通过分层可以细分通信功能，更易于单独实现每个分层的协议，界定各个分层的具体责任和义务。</p><p>　　但过分模块化，处理变得更加沉重，以及每个模块都不得不事先相似的处理逻辑等。</p><p>　![下载 (3)](  下载 (3).png)</p><p>　　以下是各层功能描述：</p><p>![下载 (1)](  下载 (1)-16781834354333.png)</p><ol><li><p><strong>物理层协议</strong>：<br>负责0、1 <strong>比特流</strong>（0/1序列）与电压的高低、逛的闪灭之间的转换。规定了激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性；该层为上层协议提供了一个传输数据的物理媒体，只是说明标准。<br>在这一层，数据的单位称为<strong>比特（bit）</strong>（注：bit和字节Byte，我们常说的1字节8位2进制即：1B=8bit）。属于物理层定义的典型规范代表包括：EIA/TIA RS-232、EIA/TIA RS-449、V.35、RJ-45、fddi令牌环网。</p></li><li><p><strong>数据链路层协议</strong>：<br>负责物理层面上的互联的、节点间的通信传输（例如一个以太网项链的2个节点之间的通信）；该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。<br>在这一层，数据的单位称为<strong>帧（frame）</strong>。数据链路层协议的代表包括：ARP、RARP、SDLC、HDLC、PPP、STP、帧中继等。</p></li><li><p><strong>网络层协议</strong>：<br>将数据<strong>传输到目标地址</strong>；目标地址可以使多个网络通过路由器连接而成的某一个地址，主要负责寻<strong>找地址和路由选择</strong>，网络层还可以实现拥塞控制、网际互连等功能。<br>在这一层，数据的单位称为<strong>数据包（packet）</strong>。网络层协议的代表包括：IP、IPX、RIP、OSPF等。</p></li><li><p><strong>传输层协议</strong>（核心层）：</p><p>传输层是OSI中最重要、最关键的一层,是唯一负责总体的数据传输和数据控制的一层；<br>传输层提供端到端的交换数据的机制，检查分组编号与次序，传输层对其上三层如会话层等，提供可靠的传输服务,对网络层提供可靠的目的地站点信息主要功能。在这一层，数据的单位称为数据段（segment）。主要功能：</p><p>①：为端到端连接提供<strong>传输服务</strong>。</p><p>②：这种传输服务分为可靠和不可靠的,其中Tcp是典型的可靠传输,而Udp则是不可靠传输。</p><p>③：为端到端连接提供流量控制,差错控制,服务质量(Quality of Service,QoS)等<strong>管理服务</strong>。</p><p>包括的协议如下：</p><p>TCP：传输控制协议，传输效率低，可靠性强。</p><p>UDP：用户数据报协议，适用于传输可靠性要求不高，数据量小的数据。</p><p>DCCP、SCTP、RTP、RSVP、PPTP等协议。</p></li><li><p><strong>会话层协议：</strong><br>负责建立和断开通信连接（数据流动的逻辑通路），记忆数据的分隔等数据传输相关的管理。</p></li><li><p><strong>表示层协议：</strong>将数据格式转换为标准格式<br>　　将应用处理的信息转换为适合网络传输的格式，或将来自下一层的数据转换为上层能够处理的格式；主要负责数据格式的转换，确保一个系统的应用层信息可被另一个系统应用层读取。具体来说，就是<strong>将设备固有的数据格式转换为网络标准传输格式</strong>，不同设备对同一比特流解释的结果可能会不同；因此，主要负责使它们保持一致。</p></li><li><p><strong>应用层协议：</strong></p><p><strong>①：超文本传输协议HTTP：</strong>这是一种最基本的<strong>客户机/服务器的访问协议</strong>；浏览器向服务器发送请求，而服务器回应相应的网页。</p><p><strong>②：文件传送协议FTP</strong>：提供交互式的访问，基于客户服务器模式，面向连接 使用TCP可靠的运输服务。主要功能:减少/消除不同操作系统下文件的不兼容性。</p><p><strong>③：</strong>远程登录协议TELNET：客户服务器模式，能适应许多计算机和操作系统的差异，网络虚拟终端NVT的意义。</p><p><strong>④：简单邮件传送协议SMTP</strong>：Client/Server模式，面向连接。基本功能：写信、传送、报告传送情况、显示信件、接收方处理信件。</p><p><strong>⑤：DNS域名解析协议：</strong>DNS是一种用以将域名转换为IP地址的Internet服务。</p><p><strong>⑥：</strong>简单文件传送协议TFTP：客户服务器模式，使用UDP数据报，只支持文件传输，不支持交互，TFTP代码占内存小。</p><p><strong>⑦：</strong>简单网络管理协议（SNMP）: SNMP模型的4个组件：被管理结点、管理站、管理信息、管理协议。SNMP代理：运行SNMP管理进程的被管理结点。</p><p><strong>⑧</strong>DHCP动态主机配置协议: 发现协议中的引导文件名、空终止符、属名或者空,DHCP供应协议中的受限目录路径名 Options –可选参数字段，参考定义选择列表中的选择文件。</p></li></ol><p>　　PS：其实协议分层只是为了更好地理解我运用协议的作用，而不是绝对的分层，有的层之间协议也是可以共用的，特别是会话层、表示层和应用层这三层。</p><h2 id="三、TCP-IP协议"><a href="#三、TCP-IP协议" class="headerlink" title="三、TCP/IP协议"></a>三、TCP/IP协议</h2><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>　　Transmission Control Protocol/Internet Protocol的简写，中译名为传输控制协议/因特网互联协议，又名<strong>网络通讯协议</strong>，是Internet最基本的协议、Internet国际互联网络的基础，<strong>由网络层的IP协议和传输层的TCP协议等组成（当然还有其他后来发展起来的网络协议，</strong>还包括 ARP，ICMP，IGMP，UDP，以及让域名访问成为可能的DNS，以及电脑/手机可以自动获取IP地址的DHCP。当然还有形形色色的应用层的协议如 HTTP / SMTP / FTP 等。<strong>）</strong>。TCP/IP 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。通俗而言：TCP负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而IP是给因特网的每一台联网设备规定一个地址。</p><h3 id="2、TCP-IP协议的发展历程"><a href="#2、TCP-IP协议的发展历程" class="headerlink" title="2、TCP/IP协议的发展历程"></a>2、TCP/IP协议的发展历程</h3><p>　　（以下内容来自百度百科）：</p><p>　　为了减少网络设计的复杂性，大多数网络都采用分层结构。而TCP/IP协议采用了4层的层级结构。</p><p>　　在阿帕网（ARPA）产生运作之初，通过接口信号处理机实现互联的电脑并不多，大部分电脑相互之间不兼容。在一台电脑上完成的工作，很难拿到另一台电脑上去用，想让硬件和软件都不一样的电脑联网，也有很多困难。当时美国的状况是，陆军用的电脑是DEC系列产品，海军用的电脑是Honeywell中标机器，空军用的是IBM公司中标的电脑，每一个军种的电脑在各自的系里都运行良好，但却有一个大弊病：<strong>不能共享资源</strong>。</p><p>　　当时科学家们提出这样一个理念：“所有电脑生来都是平等的。”为了让这些“生来平等”的电脑能够实现“资源共享”就得在这些系统的标准之上，<strong>建立一种大家共同都必须遵守的标准，这样才能让不同的电脑按照一定的规则进行“谈判”，并且在谈判之后能“握手”。</strong></p><p>　　在确定今天因特网各个电脑之间“谈判规则”过程中，最重要的人物当数瑟夫（Vinton G.Cerf）。正是他的努力，才使今天各种不同的电脑能按照协议上网互联。瑟夫也因此获得了与克莱因罗克（“因特网之父”）一样的美称“互联网之父”。</p><p>　　<strong>瑟夫</strong>从小喜欢标新立异，坚强而又热情。中学读书时，就被允许使用加州大学洛杉矶分校的电脑，他认为“为电脑编程序是个非常激动人心的事，……只要把程序编好，就可以让电脑做任何事情。”1965年，瑟夫从斯坦福大学毕业到IBM的一家公司当系统工程师，工作没多久，瑟夫就觉得知识不够用，于是到加州大学洛杉矶分校攻读博士，那时，正逢阿帕网的建立，“接口信号处理机”（IMP）的研试及网络测评中心的建立，瑟夫也成了著名科学家克莱因罗克手下的一位学生。瑟夫与另外三位年轻人（温菲尔德、克罗克、布雷登）参与了阿帕网的第一个节点的联接。此后不久，BBN公司对工作中各种情况发展有很强判断能力、被公认阿帕网建成作出巨大贡献的鲍伯·卡恩（Bob Kahn）也来到了加州大学洛杉矶分校。在那段日子里，往往是卡恩提出需要什么软件，而瑟夫则通宵达旦地把符合要求的软件给编出来，然后他们一起测试这些软件，直至能正常运行。</p><p>　　当时的主要格局是这样的，罗伯茨提出网络思想设计网络布局，卡恩设计阿帕网总体结构，克莱因罗克负责网络测评系统，还有众多的科学家、研究生参与研究、试验。69年9月阿帕网诞生、运行后，才发现各个IMP连接的时候，需要考虑用各种电脑都认可的信号来打开通信管道，数据通过后还要关闭通道。<strong>否则这些IMP不会知道什么时候应该接收信号，什么时候该结束，这就是我们所说的通信“协议”的概念。</strong>1970年12月制定出来了最初的通信协议由卡恩开发、瑟夫参与的“网络控制协议”<strong>（NCP）</strong>，但要真正建立一个共同的标准很不容易，72年10月国际电脑通信大会结束后，科学家们都在为此而努力。</p><p>　　<strong>“包切换”理论</strong>为网络之间的联接方式提供了理论基础。卡恩在自己研究的基础上，认识到只有深入理解各种操作系统的细节才能建立一种对各种操作系统普适的协议，73年卡恩请瑟夫一起考虑这个协议的各个细节，他们这次合作的结果产生了在开放系统下的所有网民和网管人员都在使用的“传输控制协议”（TCP，Transmission-Control Protocol）和“因特网协议”（IP，Internet Protocol）即<strong>TCP/IP协议。</strong></p><p>　　通俗而言：TCP负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而IP是给因特网的每一台电脑规定一个地址。1974年12月，卡恩、瑟夫的第一份TCP协议详细说明正式发表。当时美国国防部与三个科学家小组签定了完成TCP/IP的协议，结果由瑟夫领衔的小组捷足先登，首先制定出了通过详细定义的TCP/IP协议标准。当时作了一个试验，将信息包通过点对点的卫星网络，再通过陆地电缆，再通过卫星网络，再由地面传输，贯串欧洲和美国，经过各种电脑系统，全程9.4万公里竟然没有丢失一个数据位，远距离的可靠数据传输证明了TCP/IP协议的成功。</p><p>　　1983年1月1日，运行较长时期曾被人们习惯了的NCP被停止使用，TCP/IP协议作为因特网上所有主机间的共同协议，从此以后被作为一种必须遵守的规则被肯定和应用。2005年9月9日<strong>卡恩和瑟夫</strong>由于他们对于美国文化做出的卓越贡献<strong>被授予总统自由勋章。</strong></p><h3 id="3、TCP-IP四层模型"><a href="#3、TCP-IP四层模型" class="headerlink" title="3、TCP/IP四层模型"></a>3、TCP/IP四层模型</h3><p><img src="/2023/03/07/TCP-IP%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/%E4%B8%8B%E8%BD%BD.jpg" alt="下载"></p><h2 id="四、IP协议"><a href="#四、IP协议" class="headerlink" title="四、IP协议"></a>四、IP协议</h2><h3 id="1、介绍-1"><a href="#1、介绍-1" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>　　IP协议（Internet Protocol）是将多个包交换网络连接起来，它<strong>在源地址和目的地址之间传送一种称之为数据包的东西</strong>，它还提供对数据大小的重新组装功能，以适应不同网络对包大小的要求。IP协议在OSI参考模型中应用于网络层，以“<strong>数据包</strong>（Package）”为单位。其中，IP地址的定义是确认唯一端口号和路由选择的关键，IP地址相当于每台电话的电话号码，唯一且是我们互相联系的关键，因此IP协议也是网络互连的关键。</p><h3 id="2、IP协议特点"><a href="#2、IP协议特点" class="headerlink" title="2、IP协议特点"></a>2、IP协议特点</h3><ul><li>①IP协议是一种<strong>无连接、不可靠</strong>的分组传送服务的协议。</li><li>②IP协议是<strong>点-点</strong>线路的网络层通信协议。IP协议是针对原主机-路由器、路由器-路由器、路由器-目的主机之间的数据传输的点-点线路的网络层通信协议。</li><li>③IP协议屏蔽了网络在数据链路层、物理层协议与实现技术上的差异。：通过IP协议，<strong>网络层向传输层提供的是统一的IP分组，传输层不需要考虑互联网在数据链路层、物理层协议与实现技术上的差异</strong>，IP协议使得异构网络的互联变得容易了。</li></ul><h3 id="3、IPV4和IPV6"><a href="#3、IPV4和IPV6" class="headerlink" title="3、IPV4和IPV6"></a>3、IPV4和IPV6</h3><p>　　目前，主流IP是基于IPv4的，但IPV4网络难以实现网络实名制，一个重要原因就是因为IP资源的共用，因为IP资源不够（IPV4为32位），所以不同的人在不同的时间段共用一个IP，IP和上网用户无法实现一一对应。而IPv6（128位，足够长）的普及将改变现状，因为IPv6一个重要的应用将是实现网络实名制下的互联网身份证/VIeID，在IPv4下，现在根据IP查人也比较麻烦，电信局要保留一段时间的上网日志才行，通常因为数据量很大，运营商只保留三个月左右的上网日志，比如查前年某个IP发帖子的用户就不能实现。IPv6的出现可以从技术上一劳永逸地解决实名制这个问题，因为那时IP资源将不再紧张，运营商有足够多的IP资源，那时候，运营商在受理入网申请的时候，可以直接给该用户分配一个固定IP地址，这样实际就实现了实名制，也就是一个真实用户和一个IP地址的一一对应。当一个上网用户的IP固定了之后，你任何时间做的任何事情都和一个唯一IP绑定，你在网络上做的任何事情在任何时间段内都有据可查，并且无法否认。因此你可能昨晚刚浏览过非法网站后，第二天早上就会有人上门给你开罚款单（啧啧）。</p><p>　　<strong>IPv4</strong>，是互联网协议（Internet Protocol，IP）的<strong>第四版</strong>，也是第一个被广泛使用，构成现今互联网技术的基础的协议。1981年 Jon Postel 在RFC791中定义了IP，Ipv4可以运行在各种各样的底层网络上，比如端对端的串行数据链路(PPP协议和SLIP协议) ，卫星链路等等。局域网中最常用的是<strong>以太网</strong>。目前的全球因特网所采用的协议族是TCP/IP协议族。IP是TCP/IP协议族中网络层的协议，是TCP/IP协议族的核心协议之一。目前IP协议的版本号是4(简称为IPv4，v，version版本)，它的下一个版本就是IPv6。<br>　　数据报格式如下：首部的长度是以<strong>4个字节</strong>为单位，长度可以是<strong>20-60</strong>字节，这跟首部的HLEN字段有关。</p><p>![下载 (1)](  下载 (1)-16781835083994.jpg)</p><p>![下载 (4)](  下载 (4).png)</p><ul><li><p><strong>首部长度：</strong>这个4位字段定义了数据报首部的长度，以<strong>4字节</strong>的字为<strong>单位</strong>。当首部<strong>没有选项</strong>时，首部长度位<strong>20字节</strong>；当这个字段值位最大值F时，首部长度<strong>最大为60字节</strong>。</p></li><li><p><strong>服务类型：</strong>在最初这个字段有一部分用于定义数据报的优先级，剩下的一部分定义了服务类型。IETF已经改变了这个8位字段的解释，现在定义了一组区分服务。在这种解释种，前6位构成了码点（codepoint），最后两位未使用。当码点字段最右边的3位不全为0时，这6位定义了54种服务，低延时，高吞吐量等等。</p></li><li><p><strong>总长度：</strong>这个16位字段定义了数据报总长度，其以字节为单位。故IPv4数据报总长度上限值位65536字节。注：为什么需要这个字段？在许多情况下，我们确实不需要这个字段值。但是有些情况下，封装在一个帧里的并不仅仅是数据报，还可能附加了一些<strong>填充</strong>。比如，以太网协议对帧的数据有最大值（1500字节）和最小值（46字节）的限制，当数据小于46字节时，数据将含有填充数据。</p></li><li><p><strong>标识（identification）：</strong>　这个16位字段标志了从源主机发出的一个数据报，这样就确定了数据报的唯一性。这样使得数据报被分片后，在到达终点时终点能根据标识号将同一个数据报的分片重新组装成一个数据报。</p></li><li><p><strong>标志（flag）：</strong>第一位保留（未用），第二位为“不分片（do not fragment）”，第三位位“还有分片（more fragment）”。</p></li><li><p><strong>分片偏移：</strong>这个13位字段表示的是分片在整个数据报中的相对位置。这是数据在原始数据报中的偏移量，以8字节位单位。</p></li><li><p><strong>生存时间：</strong>这个8位字段用来控制数据报所经过的最大跳数（路由器），每经过一个路由器，这个字段数值都减1，减1后变位0时，路由器就丢弃这个数据报。</p></li><li><p><strong>协议：</strong>这个8位字段定义了使用IPv4服务的高层协议，如TCP，UDP，ICMP，IGMP，OSPF等的数据都将被封装到IP数据报中。这个字段指明数据报必须交付给哪个最终目的协议。</p></li><li><p><strong>检验和：</strong>检验IP数据报首部。</p></li><li><p><strong>源地址：</strong>定义了源点的IP地址，这个字段始终保持不变。</p></li><li><p><strong>目的地址：</strong>定义了终点的IP地址，这个字段始终保持不变。</p></li></ul><p>　　IPV4地址格式：</p><p>　　IPv4中规定IP<strong>地址长度为32</strong>（按TCP/IP参考模型划分) ，即有2^32-1个地址。 ipv4所存在的问题 一般的书写法为4个用小数点分开的十进制数。也有人把4位数字化成一个十进制长整数，但这种标示法并不常见。另一方面，IPv6使用的128位地址所采用的位址记数法，在IPv4也有人用，但使用范围更少。 过去IANAIP地址分为A,B,C,D 4类，把32位的地址分为两个部分：前面的部分代表网络地址，由IANA分配，后面部分代表局域网地址。如在C类网络中，前24位为网络地址，后8位为局域网地址，可提供254个设备地址(因为有两个地址不能为网络设备使用: 255为广播地址，0代表此网络本身) 。网络掩码(Netmask) 限制了网络的范围，1代表网络部分，0代表设备地址部分，例如C类地址常用的网络掩码为255.255.255.0。</p><p>　　IPV6：</p><p>　　由于IPv4最大的问题在于网络地址资源有限，严重制约了互联网的应用和发展。IPv6的使用，不仅能解决网络地址资源数量的问题，而且也解决了多种接入设备连入互联网的障碍。IPV6号称可以为全世界的每一粒沙子编上一个网址。</p><p>　　发展历史：2003年1月22日，IETF发布了IPv6测试性网络。最初开始于虚拟网络，它使用IPv6-over-IPv4隧道过渡技术。因此，它是一个基于IPv4互联网且支持IPv6传输的网络，后来逐渐建立了纯IPv6链接。从2011年开始，主要用在个人计算机和服务器系统上的操作系统基本上都支持高质量IPv6配置产品。例如，Microsoft Windows从Windows 2000起就开始支持IPv6，到Windows XP时已经进入了产品完备阶段。一些应用基于IPv6实现．如BitTorrent点到点文件传输协议等，避免了使用NAT的IPv4私有网络无法正常使用的普遍问题。2012年6月6日，国际互联网协会举行了世界IPv6启动纪念日，这一天，全球IPv6网络正式启动。多家知名网站，如Google、Facebook和Yahoo等，于当天全球标准时间0点（北京时间8点整）开始永久性支持IPv6访问。</p><p>　　IPV6地址格式：</p><p>　　IPv6的地址长度为128b，是IPv4地址长度的4倍。于是IPv4点分十进制格式不再适用，采用十六进制表示。IPv6有3种表示方法。</p><ul><li><strong>冒分十六进制表示法：</strong><br>格式为X:X:X:X:X:X:X:X，其中每个X表示地址中的16b，以十六进制表示，例如：ABCD:EF01:2345:6789:ABCD:EF01:2345:6789，这种表示法中，每个X的前导0是可以省略的，例如：2001:0DB8:0000:0023:0008:0800:200C:417A→ 2001:DB8:0:23:8:800:200C:417A。</li><li>**0位压缩表示法:<br>**在某些情况下，一个IPv6地址中问可能包含很长的一段0，可以把连续的一段0压缩为“::”。但为保证地址解析的唯一性，地址中”::”只能出现一次，例如：<br>FF01:0:0:0:0:0:0:1101 → FF01::1101<br>0:0:0:0:0:0:0:1 → ::1<br>0:0:0:0:0:0:0:0 → ::</li><li>**内嵌IPv4地址表示法:<br>**为了实现IPv4-IPv6互通，IPv4地址会嵌入IPv6地址中，此时地址常表示为：X:X:X:X:X:X:d.d.d.d，前96b采用冒分十六进制表示，而最后32b地址则使用IPv4的点分十进制表示，例如::192.168.0.1与::FFFF:192.168.0.1就是两个典型的例子，注意在前96b中，压缩0位的方法依旧适用。</li></ul><p>　　IPV6报文格式：</p><p>![下载 (2)](  下载 (2).jpg)</p><p>​                          ![下载 (2)](  下载 (2)-16781836957115.png)  </p><h2 id="五、TCP协议"><a href="#五、TCP协议" class="headerlink" title="五、TCP协议"></a>五、TCP协议</h2><h3 id="1、介绍-2"><a href="#1、介绍-2" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>　　TCP(Transmission Control Protocol 传输控制协议)是一种<strong>面向连接的、可靠的，</strong> 基于IP的传输层协议。TCP在IP报文的协议号是6。TCP是一个超级麻烦的协议，而它又是互联网的基础。下面是OSI七层模型图：</p><p>　<img src="/2023/03/07/TCP-IP%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/%E4%B8%8B%E8%BD%BD-16781837751036.jpg" alt="下载"></p><p>　　TCP工作在网络OSI的七层模型中的第四层——Transport层（传输层），IP在第三层——Network层，ARP 在第二层——Data Link层。在第二层的数据，我们把它叫Frame（数据帧），在第三层的数据叫Packet（数据包），第四层的数据叫Segment（数据段）。 同时，我们需要简单的知道，<strong>数据从应用层发下来，会在每一层都会加上头部信息，进行封装</strong>，然后再发送到数据接收端。<strong>所以数据的发送和接收其实就是数据的封装和解封装的过程。</strong> </p><h3 id="2、TCP报文格式"><a href="#2、TCP报文格式" class="headerlink" title="**2、TCP报文格式"></a>**2、TCP报文格式</h3><p>![下载 (1)](  下载 (1)-16781837924287.jpg)</p><p>![下载 (2)](  下载 (2)-16781837968508.jpg)</p><p>　　如上图所示，TCP数据格式是由若干具有特殊含义字段组成的。其中，</p><ul><li><strong>Source Port和Destination Port</strong>：分别占用16位，表示源端口号和目的端口号;用于区别主机中的不同进程， 而IP地址是用来区分不同的主机的，源端口号和目的端口号配合上IP首部中的源IP地址和目的IP地址就能唯一 的确定一个TCP连接；</li><li><strong>Sequence Number：</strong>用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据 字节在数据流中的序号;主要用来解决网络报乱序的问题；</li><li><strong>Acknowledgment Number：</strong>32位确认序列号包含发送确认的一端所期望收到的下一个序号，因此，确认序号应 当是上次已成功收到数据字节序号加1。不过，只有当标志位中的ACK标志(下面介绍)为1时该确认序列号的字 段才有效。主要用来解决不丢包的问题；</li><li><strong>Offset：</strong>给出首部中32 bit字的数目，需要这个值是因为任选字段的长度是可变的。这个字段占4bit(最多能 表示15个32bit的的字，即4*15=60个字节的首部长度)，因此TCP最多有60字节的首部。然而，没有任选字段， 正常的长度是20字节；</li><li><strong>TCP Flags:<strong>TCP首部中有6个标志比特，它们中的多个可同时被设置为1，主要是用于操控TCP的状态机的，依次 为URG，ACK，PSH，RST，SYN，FIN。<br>URG：此标志表示TCP包的紧急指针域(后面马上就要说到)有效，用来保证TCP连接不被中断，并且督促 中间层设备要尽快处理这些数据；<br>ACK：此标志表示应答域有效，就是说前面所说的TCP应答号将会包含在TCP数据包中;有两个取值：0和1， 为1的时候表示应答域有效，反之为0；<br>PSH：这个标志位表示Push操作。所谓Push操作就是指在数据包到达接收端以后，立即传送给应用程序， 而不是在缓冲区中排队；<br>RST：这个标志表示连接复位请求。用来复位那些产生错误的连接，也被用来拒绝错误和非法的数据包；<br><strong>SYN</strong>：表示</strong>同步序号</strong>，用来建立连接。SYN标志位和ACK标志位搭配使用，当连接请求的时候，SYN=1， ACK=0；连接被响应的时候，SYN=1，ACK=1；这个标志的数据包经常被用来进行端口扫描。扫描者发送 一个只有SYN的数据包，如果对方主机响应了一个数据包回来 ，就表明这台主机存在这个端口;但是由于这 种扫描方式只是进行TCP三次握手的第一次握手，因此这种扫描的成功表示被扫描的机器不很安全，一台安全 的主机将会强制要求一个连接严格的进行TCP的三次握手；</li><li><strong>Window</strong>：窗口大小，也就是有名的滑动窗口，用来进行流量控制。这是一个复杂的问题，本文不再论述。</li></ul><h3 id="2、TCP协议的三次握手"><a href="#2、TCP协议的三次握手" class="headerlink" title="2、TCP协议的三次握手"></a>2、TCP协议的三次握手</h3><p>　　TCP是<strong>面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接</strong>。在TCP/IP协议中，TCP 协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息。如下图TCP的通信过程所示：</p><p><img src="/2023/03/07/TCP-IP%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/%E4%B8%8B%E8%BD%BD-16781838692039.jpg" alt="下载"></p><p>　　三次握手具体过程（状态）如下（其实可以类比<strong>打电话</strong>的过程：甲打电话，并等待接听→乙收到来电显示，“并表示可以接听”→“甲收到乙可以接听的信息”，甲接听电话。注：引号部分是打电话过程中没有的，但在TCP三次握手中存在）：</p><ol><li><strong>第一次握手</strong>：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x;然后，客户端进入SYN_SEND状态，等待服务器的确认。（<strong>客户的建立连接并等待确认</strong>）</li><li><strong>第二次握手</strong>：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1);同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y;服务器端将上述所有信息放到一个报文段(即SYN+ACK报文段)中，一并发送给客户端，此时服务器进入SYN_RECV状态。（<strong>服务器端发送相关报文段信息并等待连接</strong>）</li><li><strong>第三次握手</strong>：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。（<strong>客户的接收到服务端信息并实现连接</strong>）</li></ol><p>　　然后，客户端和服务端就能实现正常的数据传输啦！</p><h3 id="3、TCP协议的四次分手"><a href="#3、TCP协议的四次分手" class="headerlink" title="3、TCP协议的四次分手"></a>3、TCP协议的四次分手</h3><p>　　 既然握手都需要频繁确认，那么“分手”又怎能马虎呢？具体过程（状态）如下（同样也可以看做<strong>挂电话</strong>的过程：我说完了，挂？→我也说完了，挂吧？→好，拜拜→bye。简言之就是确认通信双方都交流完毕再确认断开连接）：</p><ol><li><strong>第一次分手</strong>：主机1(可以使客户端，也可以是服务器端)，设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段;此时，主机1进入FIN_WAIT_1状态;这表示主机1没有数据要发送给主机2了。（<strong>一</strong>方<strong>数据发送完成</strong>）</li><li><strong>第二次分手</strong>：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1;主机1进入FIN_WAIT_2状态;主机2告诉主机1，我也没有数据要发送了，可以进行关闭连接了。（<strong>另一方数据发送完成</strong>）</li><li><strong>第三次分手</strong>：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入CLOSE_WAIT状态。（<strong>请求关闭连接并等待</strong>）</li><li><strong>第四次分手</strong>：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态;主机2收到主机1的ACK报文段以后，就关闭连接;此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。（<strong>关闭连接</strong>）</li></ol><p>　　现在，我们也应该理解为什么TCP协议是面向连接的、可靠的、基于IP协议的“通信控制协议”了。TCP的三次握手保证了数据的可靠性，保证资源不被浪费，而四次分手保证连接的可靠性而不至于随意断开连接，但TCP协议也由其可靠性，数据传输效率变得较低，而不像UDP那样进行实时快速传输，下面我们就来学习什么是UDP协议。</p><h2 id="六、UDP协议"><a href="#六、UDP协议" class="headerlink" title="六、UDP协议"></a>六、UDP协议</h2><h3 id="1、介绍-3"><a href="#1、介绍-3" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>　　UDP 是User Datagram Protocol的简称， 中文名是<strong>用户数据报</strong>协议，是OSI（Open System Interconnection，开放式系统互联） 参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务，IETF RFC 768是UDP的正式规范。UDP在IP报文的协议号是17。</p><p>　　与所熟知的TCP（传输控制协议）协议一样，UDP协议直接位于IP（网际协议）协议的顶层。根据OSI（开放系统互连）参考模型，UDP和TCP都属于传输层协议。UDP协议的主要作用是将网络数据流量<strong>压缩成数据包的形式</strong>。一个典型的数据包就是一个二进制数据的传输单位。每一个数据包的前8个字节（16*4位）用来包含报头信息，剩余字节则用来包含具体的传输数据。</p><h3 id="2、UDP报文格式"><a href="#2、UDP报文格式" class="headerlink" title="2、UDP报文格式"></a>2、UDP报文格式</h3><p>　　与TCP协议不同，UDP协议是非面向连接的不可靠协议，因此没有了SYN等处理两端等待或连接的报文段，相比之下，UDP的报文格式更为简单，主要由报文头（由均16位的源端口号、目的端口号、UDP长度和UDP校验和组成）和具体传输数据组成。如图所示：</p><p><img src="/2023/03/07/TCP-IP%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/%E4%B8%8B%E8%BD%BD-167818436485710.png" alt="下载"></p><ul><li><strong>UDP长度</strong>：UDP报文的整个大小，最小为8个字节（16*4位）（仅为首部）。</li><li><strong>UDP检验和</strong>：在进行检验和计算时，会添加一个<strong>伪首部</strong>一起进行运算。伪首部（占用12个字节）为：4个字节的源IP地址、4个字节的目的IP地址、1个字节的0、一个字节的数字17、以及占用2个字节UDP长度。这个伪首部不是报文的真正首部，只是引入为了计算校验和。相对于IP协议的只计算首部，UDP检验和会把首部和数据一起进行校验。接收端进行的校验和与UDP报文中的校验和相与，如果无差错应该全为1。如果有误，则将报文丢弃或者发给应用层、并附上差错警告。</li></ul><h3 id="3、UDP特性"><a href="#3、UDP特性" class="headerlink" title="3、UDP特性"></a>3、UDP特性</h3><ul><li>（1） UDP是一个<strong>无连接协议</strong>，传输数据之前源端和终端不建立连接，当 UDP想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它<strong>扔到网络上</strong>。在发送端，UDP传送数据的速度仅仅是受应用程序生成数据的速度、计算机的能力和传输带宽的限制；在接收端，UDP把每个消息段放在队列中，应用程序每次从队列中读一个消息段。</li><li>（2） 由于传输数据不建立连接，因此也就<strong>不需要维护连接状态，包括收发状态等</strong>，因此一台服务机可同时向多个客户机传输相同的消息。</li><li>（3） UDP信息包的标题很短，只有8个字节，相对于TCP的20个字节信息包的额外开销很小。</li><li>（4） 吞吐量不受拥挤控制算法的调节，只受应用软件生成数据的速率、传输带宽、源端和终端主机性能的限制。</li><li>（5）UDP使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态表（这里面有许多参数）。</li><li>（6）<strong>UDP是面向报文的</strong>。发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付给IP层。既不拆分，也不合并，而是保留这些报文的边界，因此，应用程序需要选择合适的报文大小。 虽然UDP是一个不可靠的协议，但它是分发信息的一个理想协议。例如，在屏幕上报告股票市场、在屏幕上显示航空信息等等。UDP也用在路由信息协议RIP（Routing Information Protocol）中修改路由表。在这些应用场合下，如果有一个消息丢失，在几秒之后另一个新的消息就会替换它。UDP广泛用在多媒体应用中，例如，Progressive Networks公司开发的RealAudio软件，它是在因特网上把预先录制的或者现场音乐实时传送给客户机的一种软件，该软件使用的RealAudio audio-on-demand protocol协议就是运行在UDP之上的协议，大多数因特网电话软件产品也都运行在UDP之上。</li></ul><p>　　在选择使用协议的时候，<strong>选择UDP必须要谨慎</strong>。在网络质量令人十分不满意的环境下，UDP协议数据包丢失会比较严重。<strong>但</strong>是由于UDP的特性：它不属于连接型协议，因而具有<strong>资源消耗小，处理速度快的优点，所以通常音频、视频和普通数据在传送时使用UDP较多</strong>，因为它们即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。比如我们聊天用的ICQ和QQ就是使用的UDP协议。</p><h2 id="七、TCP协议和UDP协议的区别"><a href="#七、TCP协议和UDP协议的区别" class="headerlink" title="七、TCP协议和UDP协议的区别"></a>七、TCP协议和UDP协议的区别</h2><h3 id="1、一般区别"><a href="#1、一般区别" class="headerlink" title="1、一般区别"></a>1、一般区别</h3><ul><li>TCP是面向连接的，传输数据保证可靠性和安全性；TCP协议是非面向连接的，是不可靠但高效率的协议。</li><li>TCP占用资源多而UDP占用少。</li><li>TCP是流模式而TCP是数据报模式。（可以这样理解：TCP是面向连接的，用打电话的过程来类比，就是通信双方是互相明确的，所以进行的是“你一句我一句”的交流，TCP整个通信过程间有一个缓存区，由于通信主体明确，因此可以断断续续地进行交流，数据好比水流，知道源头和目的地，因此称为<strong>流模式</strong>。反过来，UDP是非面向连接的，好比写信的过程，假设我们只要知道佩奇的地址，我们就能写信给佩奇，而佩奇却不认识我们。这样发起通信方的身份是不明确的，每个发送端的信息都不能和别的发送端混淆，不然会造成数据失效，所以UDP要对数据进行“打包”发送，是面向报文的，就像写信需要用信封套起来，不然只发送数据甚至数据混合会变得毫无意义，就像qq群的匿名聊天，这不扯皮吗？）</li><li>TCP和UDP的应用场景和编程方式也有很大差别，此处不再赘述。</li></ul><h3 id="2、TCP的粘包和UDP的丢包"><a href="#2、TCP的粘包和UDP的丢包" class="headerlink" title="2、TCP的粘包和UDP的丢包"></a>2、TCP的粘包和UDP的丢包</h3><p> 　TCP粘包现象：<strong>TCP粘包</strong>是指发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。</p><p>　　粘包原因：</p><ul><li><strong>发送端</strong>：TCP默认会使用Nagle算法。而<strong>Nagle算法</strong>主要做两件事：1）只有上一个分组得到确认，才会发送下一个分组；2）收集多个小分组，在一个确认到来时一起发送。所以，正是Nagle算法造成了发送方有可能造成粘包现象。</li><li><strong>接收端</strong>：TCP接收到分组时，并不会立刻送至应用层处理，或者说，应用层并不一定会立即处理；实际上，TCP将收到的分组保存至接收缓存里，然后应用程序主动从缓存里读收到的分组。这样一来，如果TCP接收分组的速度大于应用程序读分组的速度，多个包就会被存至缓存，应用程序读时，就会读到多个首尾相接粘到一起的包。</li></ul><p>　　粘包处理：如果黏在一起的包是同一个整体，即同意部分数据分割而来的，那么就不用进行处理。如果是不同部分的数据粘到一起，就需要进行粘包解决：</p><ul><li><strong>发送端导致</strong>：使用TCP_NODELAY选项来关闭Nagle算法。</li><li><strong>接收端导致</strong>：暂无。</li><li><strong>统一解决（应用层）</strong>：可以解决接收方造成的粘包问题，还能解决发送方造成的粘包问题。<br>解决方法就是<strong>循环处理</strong>：应用程序在处理从缓存读来的分组时，读完一条数据时，就应该循环读下一条数据，直到所有的数据都被处理；但是如何判断每条数据的长度呢？<br>两种途径：<br>　　1）<strong>格式化数据</strong>：每条数据有固定的格式（<strong>开始符、结束符</strong>），这种方法简单易行，但选择开始符和结束符的时候一定要注意每条数据的内部一定不能出现开始符或结束符；<pre><code>2）**发送长度（推荐）**：发送每条数据的时候，**将数据的长度一并发送**，比如可以选择每条数据的前4位是数据的长度，应用层处理时可以**根据长度来判断每条数据的开始和结束**。</code></pre></li></ul><p>　　UDP丢包现象：丢包现象即使用UDP发送时，由于不可靠连接方式，收到各种因素影响，数据包可能会在接受过程中丢失一部分，从而导致数据不完整。</p><p>　　UDP丢包原因：</p><ul><li><strong>发送端</strong>：发送的包太大导致send方法<strong>无法正常切割</strong>为小包导致丢包、发送的包太大<strong>超过缓存设置</strong>也会出现对包、发送频率太快导致接收端未接受或溢出缓冲区而丢包。</li><li><strong>接收端：</strong>处理时间过长导致丢包。</li><li><strong>其他</strong>：网络等问题。</li></ul><p>　　UDP丢包处理：</p><ul><li>UDP的缺陷在于丢包和乱序问题，一般视情况进行处理，而发送的时候也需要注意上述导致丢包的问题。</li></ul><h2 id="八、HTTP协议"><a href="#八、HTTP协议" class="headerlink" title="八、HTTP协议"></a>八、HTTP协议</h2><h3 id="1、介绍-4"><a href="#1、介绍-4" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>　　<strong>超文本传输协议</strong>（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的万维网WWW（World Wide Web）文件都必须遵守这个标准。设计HTTP最初的目的是为了<strong>提供一种发布和接收HTML页面的方法</strong>。1960年美国人Ted Nelson构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext）,这成为了HTTP超文本传输协议标准架构的发展根基。</p><p>　　HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。</p><p>　　HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p><p>![下载 (1)](  下载 (1)-167818438297411.jpg)</p><h3 id="2、HTTP特点"><a href="#2、HTTP特点" class="headerlink" title="2、HTTP特点"></a>2、HTTP特点</h3><p>　　<strong>HTTP是一个客户端和服务器端请求和应答的标准</strong>，通常，由HTTP客户端发起一个请求，建立一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端发送过来的请求。一旦收到请求，服务器（向客户端）发回一个状态行。 HTTP协议的网页 HTTP协议的网页 <strong>HTTP使用TCP而不是UDP</strong>的原因在于（打开）一个网页必须传送很多数据，而TCP协议提供传输控制，按顺序组织数据，和错误纠正。</p><p>　　通过HTTP或者HTTPS协议（HTTP协议+SSL协议）请求的资源由统一资源标示符（Uniform Resource Identifiers）（或者，更准确一些，URLs）来标识。HTTP有以下特点：</p><ul><li><strong>简单快速</strong>：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li><li><strong>灵活</strong>：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</li><li><strong>无连接</strong>：无连接的含义是限制<strong>每次连接只处理一个请求</strong>。<strong>服务器处理完客户的请求，并收到客户的应答后，即断开连接。</strong>采用这种方式可以节省传输时间。</li><li>无状态：HTTP协议是无状态协议。<strong>无状态是指协议对于事务处理没有记忆能力</strong>。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li><li>支持B/S及C/S模式。</li></ul><h3 id="3、HTTP的URL地址"><a href="#3、HTTP的URL地址" class="headerlink" title="3、HTTP的URL地址"></a>3、HTTP的URL地址</h3><p>　　URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息，URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：</p><p>　　<a href="http://www.cnblogs.com/fzz9/">http://www.cnblogs.com：8080/fzz9/index.jsp？id=30303&amp;page=2#name</a></p><ul><li><strong>协议部分</strong>：一般为HTTP或Https，后接//作为分隔符。</li><li><strong>域名部分</strong>：<a href="http://www.cnblogs.com为网站域名./">www.cnblogs.com为网站域名。</a></li><li><strong>端口号部分</strong>：此网址为8080。跟在域名后面的是端口号，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口。</li><li><strong>虚拟目录部分</strong>：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也<strong>不是</strong>一个URL必须的部分。</li><li><strong>参数部分</strong>：从“？”开始到“#”为止之间的部分为参数部分。本例中的参数部分为“id=30303&amp;page=2”。<strong>不是</strong>必要部分。</li><li><strong>文件名部分</strong>：从域名后的最后一个“/”开始到后面一个“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.jsp”。文件名部分也<strong>不是</strong>一个URL必须的部分，如果省略该部分，则使用默认的文件名。</li><li><strong>锚部分</strong>：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也<strong>不是</strong>一个URL必须的部分。</li></ul><h3 id="4、HTTP请求之request"><a href="#4、HTTP请求之request" class="headerlink" title="4、HTTP请求之request"></a>4、HTTP请求之request</h3><p>　　客户端通过HTTP协议进行请求时遵循一定的格式，请看下面的请求报文格式（<strong>由请求行、请求头、空行、请求体组成</strong>）：</p><p>![下载 (2)](  下载 (2)-167818441899912.jpg)</p><p>　　而各部分组成如下所示：</p><p>![下载 (1)](  下载 (1)-167818442855813.png)</p><p>　　而请求主要分为post提交方法和get提交方法，每种选择各有优缺点，此处不再赘述。目前大多数网站多采用post提交。</p><h3 id="5、Http响应之response"><a href="#5、Http响应之response" class="headerlink" title="5、Http响应之response"></a>5、Http响应之response</h3><p>　　在客户端发送请求后服务端进行响应，将信息发送给客户端，以实现功能服务，报文格式如下（<strong>包含状态行、响应头、空行、消息体</strong>）：</p><p><img src="/2023/03/07/TCP-IP%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/%E4%B8%8B%E8%BD%BD-167818445620114.png" alt="下载"></p><p><img src="/2023/03/07/TCP-IP%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/%E4%B8%8B%E8%BD%BD-167818446631815.jpg" alt="下载"></p><p>　　响应组成此处也不再赘述，值得注意的是<strong>状态码</strong>，它以清晰明确的数字告诉客户端本次请求的处理结果。 常见的状态码有：</p><p>　![下载 (1)](  下载 (1)-167818451437116.png)</p><p>![下载 (2)](  下载 (2)-167818451855617.png)</p><p>![下载 (3)](  下载 (3)-167818452330218.png)</p><p>![下载 (4)](  下载 (4)-167818452637319.png)</p><p>![下载 (5)](  下载 (5).png)</p><h2 id="九、Socket编程简述"><a href="#九、Socket编程简述" class="headerlink" title="九、Socket编程简述"></a>九、Socket编程简述</h2><p>　　Socket的英文原义是“孔”或“插座”。网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket。</p><p>　　建立网络通信连接至少要一对<strong>端口号</strong>(socket)。socket本质是<strong>编程接口(API)，对TCP/IP的封装</strong>，TCP/IP也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口。</p><p>　　HTTP是<strong>轿车</strong>，提供了封装或者显示数据的具体形式；Socket是<strong>发动机</strong>，提供了网络通信的能力。</p><p>　　网络层的<strong>ip地址</strong>可以唯一标识网络中的主机，而传输层的<strong>“协议+端口”</strong>可以唯一标识主机中的应用程序（进程）。这样利用<strong>三元组（ip地址，协议，端口）</strong>就可以标识网络的进程了，网络中的进程通信就可以利用这个标志与其它进程进行交互。 使用TCP/IP协议的应用程序通常采用<strong>应用编程接口，即Socket</strong>（UNIX BSD的套接字（socket）和UNIX System V的TLI，已经被淘汰），来实现网络进程之间的通信。</p><h5 id="转载自："><a href="#转载自：" class="headerlink" title="转载自："></a>转载自：</h5><p>[一些重要的计算机网络协议（IP、TCP、UDP、HTTP） - 风之之 - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/fzz9/p/8964513.html#">https://www.cnblogs.com/fzz9/p/8964513.html#</a>　　1计算机网络发展)</p>]]></content>
      
      
      
        <tags>
            
            <tag> TCP/IP学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理学习</title>
      <link href="/2023/03/06/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/03/06/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>编译原理学习1</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//</span><span class="token comment">// Created by dell on 2023/3/6.</span><span class="token comment">//</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"checknum.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token comment">// 新版本提示要用安全函数，此处添加宏_CRT_SECURE_NO_WARNINGS 屏蔽告警</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_LEN</span> <span class="token expression"><span class="token number">1024</span> </span><span class="token comment">//读取文件字节大小</span></span><span class="token comment">/** * 定义 关键字、运算符、分隔符 */</span><span class="token keyword">char</span> keywords<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//关键字,包括main在内共有33个</span>        <span class="token string">"auto"</span><span class="token punctuation">,</span> <span class="token string">"short"</span><span class="token punctuation">,</span> <span class="token string">"int"</span><span class="token punctuation">,</span> <span class="token string">"long"</span><span class="token punctuation">,</span> <span class="token string">"float"</span><span class="token punctuation">,</span> <span class="token string">"double"</span><span class="token punctuation">,</span> <span class="token string">"char"</span><span class="token punctuation">,</span> <span class="token string">"struct"</span><span class="token punctuation">,</span>        <span class="token string">"union"</span><span class="token punctuation">,</span> <span class="token string">"enum"</span><span class="token punctuation">,</span> <span class="token string">"typedef"</span><span class="token punctuation">,</span> <span class="token string">"const"</span><span class="token punctuation">,</span> <span class="token string">"unsigned"</span><span class="token punctuation">,</span> <span class="token string">"signed"</span><span class="token punctuation">,</span> <span class="token string">"extern"</span><span class="token punctuation">,</span>        <span class="token string">"register"</span><span class="token punctuation">,</span> <span class="token string">"static"</span><span class="token punctuation">,</span> <span class="token string">"volatile"</span><span class="token punctuation">,</span> <span class="token string">"void"</span><span class="token punctuation">,</span> <span class="token string">"if"</span><span class="token punctuation">,</span> <span class="token string">"else"</span><span class="token punctuation">,</span> <span class="token string">"switch"</span><span class="token punctuation">,</span>        <span class="token string">"case"</span><span class="token punctuation">,</span> <span class="token string">"for"</span><span class="token punctuation">,</span> <span class="token string">"do"</span><span class="token punctuation">,</span> <span class="token string">"while"</span><span class="token punctuation">,</span> <span class="token string">"goto"</span><span class="token punctuation">,</span> <span class="token string">"continue"</span><span class="token punctuation">,</span> <span class="token string">"break"</span><span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">,</span>        <span class="token string">"sizeof"</span><span class="token punctuation">,</span> <span class="token string">"return"</span><span class="token punctuation">,</span> <span class="token string">"main"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> operators<span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//运算符,共38个</span>        <span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token string">"++"</span><span class="token punctuation">,</span> <span class="token string">"--"</span><span class="token punctuation">,</span> <span class="token string">"=="</span><span class="token punctuation">,</span> <span class="token string">"!="</span><span class="token punctuation">,</span> <span class="token string">">"</span><span class="token punctuation">,</span> <span class="token string">">="</span><span class="token punctuation">,</span> <span class="token string">"&lt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;="</span><span class="token punctuation">,</span>        <span class="token string">"&amp;&amp;"</span><span class="token punctuation">,</span> <span class="token string">"||"</span><span class="token punctuation">,</span> <span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">,</span> <span class="token string">"+="</span><span class="token punctuation">,</span> <span class="token string">"-="</span><span class="token punctuation">,</span> <span class="token string">"*="</span><span class="token punctuation">,</span> <span class="token string">"/="</span><span class="token punctuation">,</span> <span class="token string">"%="</span><span class="token punctuation">,</span> <span class="token string">"&lt;&lt;="</span><span class="token punctuation">,</span> <span class="token string">">>="</span><span class="token punctuation">,</span> <span class="token string">"&amp;="</span><span class="token punctuation">,</span>        <span class="token string">"^="</span><span class="token punctuation">,</span> <span class="token string">"|="</span><span class="token punctuation">,</span> <span class="token string">"&amp;"</span><span class="token punctuation">,</span> <span class="token string">"|"</span><span class="token punctuation">,</span> <span class="token string">"^"</span><span class="token punctuation">,</span> <span class="token string">"~"</span><span class="token punctuation">,</span> <span class="token string">"&lt;&lt;"</span><span class="token punctuation">,</span> <span class="token string">">>"</span><span class="token punctuation">,</span> <span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"->"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> delimiters<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'('</span><span class="token punctuation">,</span> <span class="token char">')'</span><span class="token punctuation">,</span> <span class="token char">'['</span><span class="token punctuation">,</span> <span class="token char">']'</span><span class="token punctuation">,</span> <span class="token char">'&#123;'</span><span class="token punctuation">,</span> <span class="token char">'&#125;'</span><span class="token punctuation">,</span> <span class="token char">';'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">//分隔符,共7个</span><span class="token comment">/** * 判断是否为数字 * @param c * @return  是否为数字 */</span><span class="token keyword">int</span> <span class="token function">isnumber</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * * @param c * @return  是否为字母 根据 ASCII 码判断 */</span><span class="token keyword">int</span> <span class="token function">isLesster</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token char">'a'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">'z'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token char">'A'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** *      识别是否为 空格等特殊符号 * @param ch * @return 是则返回 1 */</span><span class="token keyword">int</span> <span class="token function">isWs</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'\t'</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">'\n'</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">'\f'</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">'\v'</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> szBuf<span class="token punctuation">[</span>MAX_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">read_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    FILE <span class="token operator">*</span> fin<span class="token punctuation">;</span>    fin<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>szBuf<span class="token punctuation">,</span>MAX_LEN<span class="token punctuation">,</span>fin<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        szBuf<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>szBuf<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>szBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * * @param ch * @return  检测到的字符 */</span><span class="token keyword">char</span> <span class="token function">check_num</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">short</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>head <span class="token operator">=</span> ch<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>Token <span class="token operator">=</span> ch<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> js <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>state <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c \t"</span><span class="token punctuation">,</span> <span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>                js<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isnumber</span><span class="token punctuation">(</span><span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>head <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isLesster</span><span class="token punctuation">(</span><span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    head<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    state <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第1处检测到不是该类型2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c \t"</span><span class="token punctuation">,</span><span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isnumber</span><span class="token punctuation">(</span><span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isLesster</span><span class="token punctuation">(</span><span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    js<span class="token operator">++</span><span class="token punctuation">;</span>                    head<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    state <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第%d次检测到不是该类型\n"</span><span class="token punctuation">,</span>js<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"要打印的Token串为  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//要返回的字符串为 此长度-1的串</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> js<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">*</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>        Token<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 识别跳过空白符 * @param ch * @return */</span><span class="token keyword">int</span> <span class="token function">check_Ws</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>head       <span class="token operator">=</span> ch<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> js    <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>state <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isWs</span><span class="token punctuation">(</span><span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 head<span class="token operator">++</span><span class="token punctuation">;</span>                 state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                 js<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>             <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3 错了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 state <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isWs</span><span class="token punctuation">(</span><span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    head<span class="token operator">++</span><span class="token punctuation">;</span>                    js<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                    state <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n共执行了 %d 次"</span><span class="token punctuation">,</span> js<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @return */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//check_num(test);</span>    <span class="token comment">//check_Ws(ch);</span>    <span class="token function">read_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习</title>
      <link href="/2023/03/01/Linux%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/03/01/Linux%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个芯片不能接2个步进电机地线的问题</title>
      <link href="/2023/03/01/%E4%B8%80%E4%B8%AA%E8%8A%AF%E7%89%87%E4%B8%8D%E8%83%BD%E6%8E%A52%E4%B8%AA%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA%E5%9C%B0%E7%BA%BF%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/03/01/%E4%B8%80%E4%B8%AA%E8%8A%AF%E7%89%87%E4%B8%8D%E8%83%BD%E6%8E%A52%E4%B8%AA%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA%E5%9C%B0%E7%BA%BF%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>​    遇到一个很奇怪的问题，但是想想也有道理，一个芯片接了两个步进电机 其中每个步进电机都有一块电源去供电，但是这时候问题出现了，一个芯片只能有一个步进电机转，查了很久发现是地线错了，猜测是步进电机驱动器不能找到基准电压了，一个芯片有两个步进电机的电压，在此写个博客，加深以下印象。防止以后再犯 。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 步进电机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2023/02/26/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/02/26/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>修改过设置 可能会有不同</p><table><thead><tr><th align="left">命令</th><th align="left">功能说明</th></tr></thead><tbody><tr><td align="left">线上查询及帮助命令 (2 个)</td><td align="left"></td></tr><tr><td align="left">man</td><td align="left">查看命令帮助，命令的词典，更复杂的还有 info，但不常用。</td></tr><tr><td align="left">help</td><td align="left">查看 Linux 内置命令的帮助，比如 cd 命令。</td></tr><tr><td align="left">文件和目录操作命令 (18 个)</td><td align="left"></td></tr><tr><td align="left">ls</td><td align="left">全拼 list，功能是列出目录的内容及其内容属性信息。</td></tr><tr><td align="left">cd</td><td align="left">全拼 change directory，功能是从当前工作目录切换到指定的工作目录。</td></tr><tr><td align="left">cp</td><td align="left">全拼 copy，其功能为复制文件或目录。</td></tr><tr><td align="left">find</td><td align="left">查找的意思，用于查找目录及目录下的文件。</td></tr><tr><td align="left">mkdir</td><td align="left">全拼 make directories，其功能是创建目录。</td></tr><tr><td align="left">mv</td><td align="left">全拼 move，其功能是移动或重命名文件。</td></tr><tr><td align="left">pwd</td><td align="left">全拼 print working directory，其功能是显示当前工作目录的绝对路径。</td></tr><tr><td align="left">rename</td><td align="left">用于重命名文件。</td></tr><tr><td align="left">rm</td><td align="left">全拼 remove，其功能是删除一个或多个文件或目录。</td></tr><tr><td align="left">rmdir</td><td align="left">全拼 remove empty directories，功能是删除空目录。</td></tr><tr><td align="left">touch</td><td align="left">创建新的空文件，改变已有文件的时间戳属性。</td></tr><tr><td align="left">tree</td><td align="left">功能是以树形结构显示目录下的内容。</td></tr><tr><td align="left">basename</td><td align="left">显示文件名或目录名。</td></tr><tr><td align="left">dirname</td><td align="left">显示文件或目录路径。</td></tr><tr><td align="left">chattr</td><td align="left">改变文件的扩展属性。</td></tr><tr><td align="left">lsattr</td><td align="left">查看文件扩展属性。</td></tr><tr><td align="left">file</td><td align="left">显示文件的类型。</td></tr><tr><td align="left">md5sum</td><td align="left">计算和校验文件的 MD5 值。</td></tr><tr><td align="left">查看文件及内容处理命令（21 个）</td><td align="left"></td></tr><tr><td align="left">cat</td><td align="left">全拼 concatenate，功能是用于连接多个文件并且打印到屏幕输出或重定向到指定文件中。</td></tr><tr><td align="left">tac</td><td align="left">tac 是 cat 的反向拼写，因此命令的功能为反向显示文件内容。</td></tr><tr><td align="left">more</td><td align="left">分页显示文件内容。</td></tr><tr><td align="left">less</td><td align="left">分页显示文件内容，more 命令的相反用法。</td></tr><tr><td align="left">head</td><td align="left">显示文件内容的头部。</td></tr><tr><td align="left">tail</td><td align="left">显示文件内容的尾部。</td></tr><tr><td align="left">cut</td><td align="left">将文件的每一行按指定分隔符分割并输出。</td></tr><tr><td align="left">split</td><td align="left">分割文件为不同的小片段。</td></tr><tr><td align="left">paste</td><td align="left">按行合并文件内容。</td></tr><tr><td align="left">sort</td><td align="left">对文件的文本内容排序。</td></tr><tr><td align="left">uniq</td><td align="left">去除重复行。oldboy</td></tr><tr><td align="left">wc</td><td align="left">统计文件的行数、单词数或字节数。</td></tr><tr><td align="left">iconv</td><td align="left">转换文件的编码格式。</td></tr><tr><td align="left">dos2unix</td><td align="left">将 DOS 格式文件转换成 UNIX 格式。</td></tr><tr><td align="left">diff</td><td align="left">全拼 difference，比较文件的差异，常用于文本文件。</td></tr><tr><td align="left">vimdiff</td><td align="left">命令行可视化文件比较工具，常用于文本文件。</td></tr><tr><td align="left">rev</td><td align="left">反向输出文件内容。</td></tr><tr><td align="left">grep/egrep</td><td align="left">过滤字符串，三剑客老三。</td></tr><tr><td align="left">join</td><td align="left">按两个文件的相同字段合并。</td></tr><tr><td align="left">tr</td><td align="left">替换或删除字符。</td></tr><tr><td align="left">vi/vim</td><td align="left">命令行文本编辑器。</td></tr><tr><td align="left">文件压缩及解压缩命令（4 个）</td><td align="left"></td></tr><tr><td align="left">tar</td><td align="left">打包压缩。oldboy</td></tr><tr><td align="left">unzip</td><td align="left">解压文件。</td></tr><tr><td align="left">gzip</td><td align="left">gzip 压缩工具。</td></tr><tr><td align="left">zip</td><td align="left">压缩工具。</td></tr><tr><td align="left">信息显示命令（11 个）</td><td align="left"></td></tr><tr><td align="left">uname</td><td align="left">显示操作系统相关信息的命令。</td></tr><tr><td align="left">hostname</td><td align="left">显示或者设置当前系统的主机名。</td></tr><tr><td align="left">dmesg</td><td align="left">显示开机信息，用于诊断系统故障。</td></tr><tr><td align="left">uptime</td><td align="left">显示系统运行时间及负载。</td></tr><tr><td align="left">stat</td><td align="left">显示文件或文件系统的状态。</td></tr><tr><td align="left">du</td><td align="left">计算磁盘空间使用情况。</td></tr><tr><td align="left">df</td><td align="left">报告文件系统磁盘空间的使用情况。</td></tr><tr><td align="left">top</td><td align="left">实时显示系统资源使用情况。</td></tr><tr><td align="left">free</td><td align="left">查看系统内存。</td></tr><tr><td align="left">date</td><td align="left">显示与设置系统时间。</td></tr><tr><td align="left">cal</td><td align="left">查看日历等时间信息。</td></tr><tr><td align="left">搜索文件命令（4 个）</td><td align="left"></td></tr><tr><td align="left">which</td><td align="left">查找二进制命令，按环境变量 PATH 路径查找。</td></tr><tr><td align="left">find</td><td align="left">从磁盘遍历查找文件或目录。</td></tr><tr><td align="left">whereis</td><td align="left">查找二进制命令，按环境变量 PATH 路径查找。</td></tr><tr><td align="left">locate</td><td align="left">从数据库 (/var/lib/mlocate/mlocate.db) 查找命令，使用 updatedb 更新库。</td></tr><tr><td align="left">用户管理命令（10 个）</td><td align="left"></td></tr><tr><td align="left">useradd</td><td align="left">添加用户。</td></tr><tr><td align="left">usermod</td><td align="left">修改系统已经存在的用户属性。</td></tr><tr><td align="left">userdel</td><td align="left">删除用户。</td></tr><tr><td align="left">groupadd</td><td align="left">添加用户组。</td></tr><tr><td align="left">passwd</td><td align="left">修改用户密码。</td></tr><tr><td align="left">chage</td><td align="left">修改用户密码有效期限。</td></tr><tr><td align="left">id</td><td align="left">查看用户的 uid,gid 及归属的用户组。</td></tr><tr><td align="left">su</td><td align="left">切换用户身份。</td></tr><tr><td align="left">visudo</td><td align="left">编辑 / etc/sudoers 文件的专属命令。</td></tr><tr><td align="left">sudo</td><td align="left">以另外一个用户身份（默认 root 用户）执行事先在 sudoers 文件允许的命令。</td></tr><tr><td align="left">基础网络操作命令（11 个）</td><td align="left"></td></tr><tr><td align="left">telnet</td><td align="left">使用 TELNET 协议远程登录。</td></tr><tr><td align="left">ssh</td><td align="left">使用 SSH 加密协议远程登录。</td></tr><tr><td align="left">scp</td><td align="left">全拼 secure copy，用于不同主机之间复制文件。</td></tr><tr><td align="left">wget</td><td align="left">命令行下载文件。</td></tr><tr><td align="left">ping</td><td align="left">测试主机之间网络的连通性。</td></tr><tr><td align="left">route</td><td align="left">显示和设置 linux 系统的路由表。</td></tr><tr><td align="left">ifconfig</td><td align="left">查看、配置、启用或禁用网络接口的命令。</td></tr><tr><td align="left">ifup</td><td align="left">启动网卡。</td></tr><tr><td align="left">ifdown</td><td align="left">关闭网卡。</td></tr><tr><td align="left">netstat</td><td align="left">查看网络状态。</td></tr><tr><td align="left">ss</td><td align="left">查看网络状态。</td></tr><tr><td align="left">深入网络操作命令（9 个）</td><td align="left"></td></tr><tr><td align="left">nmap</td><td align="left">网络扫描命令。</td></tr><tr><td align="left">lsof</td><td align="left">全名 list open files，也就是列举系统中已经被打开的文件。</td></tr><tr><td align="left">mail</td><td align="left">发送和接收邮件。</td></tr><tr><td align="left">mutt</td><td align="left">邮件管理命令。</td></tr><tr><td align="left">nslookup</td><td align="left">交互式查询互联网 DNS 服务器的命令。</td></tr><tr><td align="left">dig</td><td align="left">查找 DNS 解析过程。</td></tr><tr><td align="left">host</td><td align="left">查询 DNS 的命令。</td></tr><tr><td align="left">traceroute</td><td align="left">追踪数据传输路由状况。</td></tr><tr><td align="left">tcpdump</td><td align="left">命令行的抓包工具。</td></tr><tr><td align="left">有关磁盘与文件系统的命令（16 个）</td><td align="left"></td></tr><tr><td align="left">mount</td><td align="left">挂载文件系统。</td></tr><tr><td align="left">umount</td><td align="left">卸载文件系统。</td></tr><tr><td align="left">fsck</td><td align="left">检查并修复 Linux 文件系统。</td></tr><tr><td align="left">dd</td><td align="left">转换或复制文件。</td></tr><tr><td align="left">dumpe2fs</td><td align="left">导出 ext2/ext3/ext4 文件系统信息。</td></tr><tr><td align="left">dump</td><td align="left">ext2/3/4 文件系统备份工具。</td></tr><tr><td align="left">fdisk</td><td align="left">磁盘分区命令，适用于 2TB 以下磁盘分区。</td></tr><tr><td align="left">parted</td><td align="left">磁盘分区命令，没有磁盘大小限制，常用于 2TB 以下磁盘分区。</td></tr><tr><td align="left">mkfs</td><td align="left">格式化创建 Linux 文件系统。</td></tr><tr><td align="left">partprobe</td><td align="left">更新内核的硬盘分区表信息。</td></tr><tr><td align="left">e2fsck</td><td align="left">检查 ext2/ext3/ext4 类型文件系统。</td></tr><tr><td align="left">mkswap</td><td align="left">创建 Linux 交换分区。</td></tr><tr><td align="left">swapon</td><td align="left">启用交换分区。</td></tr><tr><td align="left">swapoff</td><td align="left">关闭交换分区。</td></tr><tr><td align="left">sync</td><td align="left">将内存缓冲区内的数据写入磁盘。</td></tr><tr><td align="left">resize2fs</td><td align="left">调整 ext2/ext3/ext4 文件系统大小。</td></tr><tr><td align="left">系统权限及用户授权相关命令（4 个）</td><td align="left"></td></tr><tr><td align="left">chmod</td><td align="left">改变文件或目录权限。</td></tr><tr><td align="left">chown</td><td align="left">改变文件或目录的属主和属组。</td></tr><tr><td align="left">chgrp</td><td align="left">更改文件用户组。</td></tr><tr><td align="left">umask</td><td align="left">显示或设置权限掩码。</td></tr><tr><td align="left">查看系统用户登陆信息的命令（7 个）</td><td align="left"></td></tr><tr><td align="left">whoami</td><td align="left">显示当前有效的用户名称，相当于执行 id -un 命令。</td></tr><tr><td align="left">who</td><td align="left">显示目前登录系统的用户信息。</td></tr><tr><td align="left">w</td><td align="left">显示已经登陆系统的用户列表，并显示用户正在执行的指令。</td></tr><tr><td align="left">last</td><td align="left">显示登入系统的用户。</td></tr><tr><td align="left">lastlog</td><td align="left">显示系统中所有用户最近一次登录信息。</td></tr><tr><td align="left">users</td><td align="left">显示当前登录系统的所有用户的用户列表。</td></tr><tr><td align="left">finger</td><td align="left">查找并显示用户信息。</td></tr><tr><td align="left">内置命令及其它（19 个）</td><td align="left"></td></tr><tr><td align="left">echo</td><td align="left">打印变量，或直接输出指定的字符串</td></tr><tr><td align="left">printf</td><td align="left">将结果格式化输出到标准输出。</td></tr><tr><td align="left">rpm</td><td align="left">管理 rpm 包的命令。</td></tr><tr><td align="left">yum</td><td align="left">自动化简单化地管理 rpm 包的命令。</td></tr><tr><td align="left">watch</td><td align="left">周期性的执行给定的命令，并将命令的输出以全屏方式显示。</td></tr><tr><td align="left">alias</td><td align="left">设置系统别名。</td></tr><tr><td align="left">unalias</td><td align="left">取消系统别名。</td></tr><tr><td align="left">date</td><td align="left">查看或设置系统时间。</td></tr><tr><td align="left">clear</td><td align="left">清除屏幕，简称清屏。</td></tr><tr><td align="left">history</td><td align="left">查看命令执行的历史纪录。</td></tr><tr><td align="left">eject</td><td align="left">弹出光驱。</td></tr><tr><td align="left">time</td><td align="left">计算命令执行时间。</td></tr><tr><td align="left">nc</td><td align="left">功能强大的网络工具。</td></tr><tr><td align="left">xargs</td><td align="left">将标准输入转换成命令行参数。</td></tr><tr><td align="left">exec</td><td align="left">调用并执行指令的命令。</td></tr><tr><td align="left">export</td><td align="left">设置或者显示环境变量。</td></tr><tr><td align="left">unset</td><td align="left">删除变量或函数。</td></tr><tr><td align="left">type</td><td align="left">用于判断另外一个命令是否是内置命令。</td></tr><tr><td align="left">bc</td><td align="left">命令行科学计算器</td></tr><tr><td align="left">系统管理与性能监视命令 (9 个)</td><td align="left"></td></tr><tr><td align="left">chkconfig</td><td align="left">管理 Linux 系统开机启动项。</td></tr><tr><td align="left">vmstat</td><td align="left">虚拟内存统计。</td></tr><tr><td align="left">mpstat</td><td align="left">显示各个可用 CPU 的状态统计。</td></tr><tr><td align="left">iostat</td><td align="left">统计系统 IO。</td></tr><tr><td align="left">sar</td><td align="left">全面地获取系统的 CPU、运行队列、磁盘 I/O、分页（交换区）、内存、 CPU 中断和网络等性能数据。</td></tr><tr><td align="left">ipcs</td><td align="left">用于报告 Linux 中进程间通信设施的状态，显示的信息包括消息列表、共享内存和信号量的信息。</td></tr><tr><td align="left">ipcrm</td><td align="left">用来删除一个或更多的消息队列、信号量集或者共享内存标识。</td></tr><tr><td align="left">strace</td><td align="left">用于诊断、调试 Linux 用户空间跟踪器。我们用它来监控用户空间进程和内核的交互，比如系统调用、信号传递、进程状态变更等。</td></tr><tr><td align="left">ltrace</td><td align="left">命令会跟踪进程的库函数调用, 它会显现出哪个库函数被调用。</td></tr><tr><td align="left">关机 / 重启 / 注销和查看系统信息的命令（6 个）</td><td align="left"></td></tr><tr><td align="left">shutdown</td><td align="left">关机。</td></tr><tr><td align="left">halt</td><td align="left">关机。</td></tr><tr><td align="left">poweroff</td><td align="left">关闭电源。</td></tr><tr><td align="left">logout</td><td align="left">退出当前登录的 Shell。</td></tr><tr><td align="left">exit</td><td align="left">退出当前登录的 Shell。</td></tr><tr><td align="left">Ctrl+d</td><td align="left">退出当前登录的 Shell 的快捷键。</td></tr><tr><td align="left">进程管理相关命令（15 个）</td><td align="left"></td></tr><tr><td align="left">bg</td><td align="left">将一个在后台暂停的命令，变成继续执行  （在后台执行）。</td></tr><tr><td align="left">fg</td><td align="left">将后台中的命令调至前台继续运行。</td></tr><tr><td align="left">jobs</td><td align="left">查看当前有多少在后台运行的命令。</td></tr><tr><td align="left">kill</td><td align="left">终止进程。</td></tr><tr><td align="left">killall</td><td align="left">通过进程名终止进程。</td></tr><tr><td align="left">pkill</td><td align="left">通过进程名终止进程。</td></tr><tr><td align="left">crontab</td><td align="left">定时任务命令。</td></tr><tr><td align="left">ps</td><td align="left">显示进程的快照。</td></tr><tr><td align="left">pstree</td><td align="left">树形显示进程。</td></tr><tr><td align="left">nice/renice</td><td align="left">调整程序运行的优先级。</td></tr><tr><td align="left">nohup</td><td align="left">忽略挂起信号运行指定的命令。</td></tr><tr><td align="left">pgrep</td><td align="left">查找匹配条件的进程。</td></tr><tr><td align="left">runlevel</td><td align="left">查看系统当前运行级别。</td></tr><tr><td align="left">init</td><td align="left">切换运行级别。</td></tr><tr><td align="left">service</td><td align="left">启动、停止、重新启动和关闭系统服务，还可以显示所有系统服务的当前状态。</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32PWM的占空比设置</title>
      <link href="/2023/02/25/STM32PWM%E7%9A%84%E5%8D%A0%E7%A9%BA%E6%AF%94%E8%AE%BE%E7%BD%AE/"/>
      <url>/2023/02/25/STM32PWM%E7%9A%84%E5%8D%A0%E7%A9%BA%E6%AF%94%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>z在小车制作过程中，需要设置电机的转速，那么就不可避免的要用到PWM来控制。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//常用的函数 及 计算公式</span><span class="token comment">//PWM初始化函数</span><span class="token function">TIM_7_init</span><span class="token punctuation">(</span><span class="token number">7199</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//arr=9999, psc=7199</span><span class="token comment">//用来设置占空比的函数 </span><span class="token function">TIM_SetCompare1</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//占空比 = 1 - parameter / (arr + 1)</span><span class="token comment">//周期 = [ (arr+1) * (psc+1) ] / 72000KHz = T（ms） </span><span class="token comment">//频率 = 1 / 周期</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先初始化定时器</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//这里使用的是定时器3!</span><span class="token comment">//TIM3挂在APB2上，所以这里时钟选择为APB1的2倍，而APB1为36M</span><span class="token comment">//arr：自动重装值。</span><span class="token comment">//psc：时钟预分频数</span><span class="token comment">//TIM3 PWM部分初始化 </span><span class="token comment">//PWM输出初始化</span><span class="token comment">//arr：自动重装值</span><span class="token comment">//psc：时钟预分频数</span><span class="token keyword">void</span> <span class="token function">TIM3_PWM_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span>u16 psc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span>TIM_OCInitTypeDef  TIM_OCInitStructure<span class="token punctuation">;</span><span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使能定时器3时钟</span> <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//使能GPIO外设和AFIO复用功能模块时钟</span>   <span class="token comment">//设置该引脚为复用输出功能,输出TIM3 CH2的PWM脉冲波形GPIOB.5</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_0<span class="token operator">|</span>GPIO_Pin_1<span class="token punctuation">;</span> <span class="token comment">//TIM_CH2</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>  <span class="token comment">//复用推挽输出</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化GPIO</span>     <span class="token comment">//初始化TIM3</span>TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment">//设置在下一个更新事件装入活动的自动重装载寄存器周期的值</span>TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span>psc<span class="token punctuation">;</span> <span class="token comment">//设置用来作为TIMx时钟频率除数的预分频值 </span>TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//设置时钟分割:TDTS = Tck_tim</span>TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span>  <span class="token comment">//TIM向上计数模式</span><span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位</span><span class="token comment">//初始化TIM3 Channel2 PWM模式</span>TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OCMode <span class="token operator">=</span> TIM_OCMode_PWM2<span class="token punctuation">;</span> <span class="token comment">//选择定时器模式:TIM脉冲宽度调制模式2</span> TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OutputState <span class="token operator">=</span> TIM_OutputState_Enable<span class="token punctuation">;</span> <span class="token comment">//比较输出使能</span>TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OCPolarity <span class="token operator">=</span> TIM_OCPolarity_High<span class="token punctuation">;</span> <span class="token comment">//输出极性:TIM输出比较极性高</span><span class="token function">TIM_OC3Init</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_OCInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//根据T指定的参数初始化外设TIM3 OC1</span>TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OCMode <span class="token operator">=</span> TIM_OCMode_PWM2<span class="token punctuation">;</span> <span class="token comment">//选择定时器模式:TIM脉冲宽度调制模式2</span> TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OutputState <span class="token operator">=</span> TIM_OutputState_Enable<span class="token punctuation">;</span> <span class="token comment">//比较输出使能</span>TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OCPolarity <span class="token operator">=</span> TIM_OCPolarity_High<span class="token punctuation">;</span> <span class="token comment">//输出极性:TIM输出比较极性高</span><span class="token function">TIM_OC4Init</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_OCInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//根据T指定的参数初始化外设TIM3 OC1</span><span class="token function">TIM_OC3PreloadConfig</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_OCPreload_Enable<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//使能TIM3在CCR2上的预装载寄存器</span><span class="token function">TIM_OC4PreloadConfig</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_OCPreload_Enable<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//使能TIM3在CCR2上的预装载寄存器</span> <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//使能TIM3</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数传入两个参数 ARR和PSC</p><p>举个例子</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//PWM频率 f = 72000000/(7199+1)*(0+1) = 10KHZ </span><span class="token comment">//PWM周期 T = 1/f = 1/10000 = 0.0001S = 0.1ms</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//PWM的频率 = 时钟频率  / (自动重装载值 + 1) * (预分频值 + 1)</span>这个定时器多久执行一次 ：  <span class="token number">72</span>MHZ <span class="token operator">/</span> （（ARR <span class="token operator">+</span> <span class="token number">1</span>） <span class="token operator">*</span>（PSC <span class="token operator">+</span> <span class="token number">1</span>））<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">关于占空比：<span class="token function">TIM_SetComparex</span><span class="token punctuation">(</span>TIM_TypeDef<span class="token operator">*</span> TIMx<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> Comparex<span class="token punctuation">)</span>   <span class="token comment">//这句话设置的是CRR</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">而占空比等于 （CRR <span class="token operator">/</span> ARR）<span class="token operator">*</span> <span class="token number">100</span><span class="token operator">%</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**  * @brief  Sets the TIMx Capture Compare1 Register value  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.  * @param  Compare1: specifies the Capture Compare1 register new value.  * @retval None  */</span><span class="token keyword">void</span> <span class="token function">TIM_SetCompare1</span><span class="token punctuation">(</span>TIM_TypeDef<span class="token operator">*</span> TIMx<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> Compare1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">/* Check the parameters */</span>  <span class="token function">assert_param</span><span class="token punctuation">(</span><span class="token function">IS_TIM_LIST8_PERIPH</span><span class="token punctuation">(</span>TIMx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* Set the Capture Compare1 Register value */</span>  TIMx<span class="token operator">-></span>CCR1 <span class="token operator">=</span> Compare1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/02/25/STM32PWM%E7%9A%84%E5%8D%A0%E7%A9%BA%E6%AF%94%E8%AE%BE%E7%BD%AE/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r6YaS6YaS6K-l552h5LqG,size_13,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p><h2 id="PWM占空比-CCRx-ARR-或-PWM占空比-（-ARR-CCRx）-ARR"><a href="#PWM占空比-CCRx-ARR-或-PWM占空比-（-ARR-CCRx）-ARR" class="headerlink" title="PWM占空比 = CCRx/ARR  或  PWM占空比 =（ ARR-CCRx）/ARR"></a>PWM占空比 = CCRx/ARR  或  PWM占空比 =（ ARR-CCRx）/ARR</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">PWM_Init_TIM1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7199</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// PWM频率 f = 72000000/(7199+1)*(0+1) = 10KHZ</span>                        <span class="token comment">// PWM周期 T = 1/f = 1/10000 = 0.0001S = 0.1ms</span><span class="token function">TIM_SetCompare1</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span><span class="token number">3599</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置TIMx捕获比较1寄存器值  此处为TIM1通道1 占空比为50%</span><span class="token function">TIM_SetCompare4</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span><span class="token number">3599</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置TIMx捕获比较4寄存器值  此处为TIM1通道4 占空比为50%</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> PWM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MPU6050数据滤波</title>
      <link href="/2023/02/20/MPU6050%E6%95%B0%E6%8D%AE%E6%BB%A4%E6%B3%A2/"/>
      <url>/2023/02/20/MPU6050%E6%95%B0%E6%8D%AE%E6%BB%A4%E6%B3%A2/</url>
      
        <content type="html"><![CDATA[<p>无人机开启时放在某个水平面上，此时我们根据这个面来确定水平情况下的传感器误差，取2000次的数据</p><p>每50个数据做一组，取一个平均值，再将最后得到的40个数据去掉最大和最小的5个</p><p>最后得到30组数据，再将这剩下的30组数据求一个平均数。</p><p>最后的得到此次的误差。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">show</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token keyword">short</span> temp<span class="token punctuation">;</span><span class="token comment">//温度</span><span class="token comment">//创建加速度传感器结构体</span><span class="token keyword">struct</span> <span class="token class-name">MPU_Data_A</span>  Data_A<span class="token punctuation">;</span> <span class="token comment">//创建陀螺仪传感器结构体</span><span class="token keyword">struct</span> <span class="token class-name">MPU_Data_G</span>  Data_G<span class="token punctuation">;</span> <span class="token comment">//创建传感器误差结构体</span><span class="token keyword">struct</span> <span class="token class-name">Error_A_G</span> error<span class="token punctuation">;</span><span class="token comment">//得到传感器数据</span><span class="token keyword">void</span> <span class="token function">Get_Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//得到温度值</span>temp<span class="token operator">=</span><span class="token function">MPU_Get_Temperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到加速度传感器数据</span><span class="token function">MPU_Get_Accelerometer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Data_A<span class="token punctuation">.</span>aacx<span class="token punctuation">,</span><span class="token operator">&amp;</span>Data_A<span class="token punctuation">.</span>aacy<span class="token punctuation">,</span><span class="token operator">&amp;</span>Data_A<span class="token punctuation">.</span>aacz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到陀螺仪数据</span><span class="token function">MPU_Get_Gyroscope</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Data_G<span class="token punctuation">.</span>gyrox<span class="token punctuation">,</span><span class="token operator">&amp;</span>Data_G<span class="token punctuation">.</span>gyroy<span class="token punctuation">,</span><span class="token operator">&amp;</span>Data_G<span class="token punctuation">.</span>gyroz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//是否要串口打印数据</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">show</span></span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"temp = %d  "</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"aacx = %d aacy = %d  aacz = %d"</span><span class="token punctuation">,</span>Data_A<span class="token punctuation">.</span>aacx<span class="token punctuation">,</span>Data_A<span class="token punctuation">.</span>aacy<span class="token punctuation">,</span>Data_A<span class="token punctuation">.</span>aacz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  gyrox = %d gyroy = %d  gyroz = %d\r\n"</span><span class="token punctuation">,</span>Data_G<span class="token punctuation">.</span>gyrox<span class="token punctuation">,</span>Data_G<span class="token punctuation">.</span>gyroy<span class="token punctuation">,</span>Data_G<span class="token punctuation">.</span>gyroz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span class="token comment">//排序</span><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                  arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token comment">//进行数据校准 按照当前放置的平面角度来计算水平面</span><span class="token comment">//取2000次进行求平均值，每50个数据一组，没错误的话会得到40组，去掉最大的前5组，和最小的后5组，剩下的30组求一个平均值。</span><span class="token comment">//选择这个平均值为此次的误差，根据之后的数据进行计算</span><span class="token comment">//水平下得到的数据大概是这样的</span><span class="token comment">/*temp = 2206  aacx = 3048 aacy = 1778  aacz = 17098  gyrox = -56 gyroy = 49  gyroz = 12temp = 2206  aacx = 3048 aacy = 1778  aacz = 17098  gyrox = -56 gyroy = 49  gyroz = 12temp = 2206  aacx = 2712 aacy = 1626  aacz = 17136  gyrox = -48 gyroy = 49  gyroz = 3temp = 2206  aacx = 2712 aacy = 1626  aacz = 17136  gyrox = -48 gyroy = 49  gyroz = 3temp = 2207  aacx = 2720 aacy = 1742  aacz = 16780  gyrox = -37 gyroy = 27  gyroz = 15temp = 2207  aacx = 2720 aacy = 1742  aacz = 16780  gyrox = -37 gyroy = 27  gyroz = 15temp = 2206  aacx = 3084 aacy = 1944  aacz = 16708  gyrox = -44 gyroy = 23  gyroz = 29temp = 2206  aacx = 3084 aacy = 1944  aacz = 16708  gyrox = -44 gyroy = 23  gyroz = 29temp = 2208  aacx = 3190 aacy = 1954  aacz = 17124  gyrox = -59 gyroy = 46  gyroz = 26temp = 2208  aacx = 3190 aacy = 1954  aacz = 17124  gyrox = -59 gyroy = 46  gyroz = 26temp = 2207  aacx = 2920 aacy = 1694  aacz = 17240  gyrox = -58 gyroy = 37  gyroz = 18temp = 2207  aacx = 2920 aacy = 1694  aacz = 17240  gyrox = -58 gyroy = 37  gyroz = 18temp = 2207  aacx = 2722 aacy = 1632  aacz = 16872  gyrox = -42 gyroy = 19  gyroz = 19temp = 2207  aacx = 2722 aacy = 1632  aacz = 16872  gyrox = -42 gyroy = 19  gyroz = 19temp = 2208  aacx = 2858 aacy = 1732  aacz = 16724  gyrox = -40 gyroy = 24  gyroz = 25temp = 2208  aacx = 2858 aacy = 1732  aacz = 16724  gyrox = -40 gyroy = 24  gyroz = 25temp = 2207  aacx = 3188 aacy = 1928  aacz = 17006  gyrox = -51 gyroy = 46  gyroz = 29temp = 2207  aacx = 3188 aacy = 1928  aacz = 17006  gyrox = -51 gyroy = 46  gyroz = 29temp = 2207  aacx = 3196 aacy = 1856  aacz = 17122  gyrox = -56 gyroy = 53  gyroz = 25temp = 2207  aacx = 3196 aacy = 1856  aacz = 17122  gyrox = -56 gyroy = 53  gyroz = 25temp = 2208  aacx = 2862 aacy = 1724  aacz = 16908  gyrox = -57 gyroy = 40  gyroz = 22*/</span><span class="token comment">//得出用short类型 一般都会越界 所以选择int类型</span><span class="token keyword">void</span> <span class="token function">Get_Data_Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">short</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">short</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">short</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> js <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">int</span> _error<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span> <span class="token operator">=</span> _error<span class="token punctuation">;</span> <span class="token comment">//指向二维数组的指针</span><span class="token keyword">int</span> jieguo<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//对50次的和求平均值并存储在数组中 其中x为第几个50次 y为对应的数据类型</span>_error<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> error<span class="token punctuation">.</span>error_A_x <span class="token operator">/</span> <span class="token number">50</span><span class="token punctuation">;</span>_error<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> error<span class="token punctuation">.</span>error_A_y <span class="token operator">/</span> <span class="token number">50</span><span class="token punctuation">;</span>_error<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> error<span class="token punctuation">.</span>error_A_z <span class="token operator">/</span> <span class="token number">50</span><span class="token punctuation">;</span>_error<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> error<span class="token punctuation">.</span>error_G_x <span class="token operator">/</span> <span class="token number">50</span><span class="token punctuation">;</span>_error<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> error<span class="token punctuation">.</span>error_G_y <span class="token operator">/</span> <span class="token number">50</span><span class="token punctuation">;</span>_error<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> error<span class="token punctuation">.</span>error_G_z <span class="token operator">/</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token comment">/*printf("第%d次 A_x的值 = %d  ",i,_error[0][i]);printf("第%d次 A_y的值 = %d  ",i,_error[1][i]);printf("第%d次 A_z的值 = %d  ",i,_error[2][i]);printf("第%d次 G_x的值 = %d  ",i,_error[3][i]);printf("第%d次 G_y的值 = %d  ",i,_error[4][i]);printf("第%d次 G_z的值 = %d\r\n",i,_error[5][i]);*/</span>error<span class="token punctuation">.</span>error_A_x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_A_y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_A_z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_G_x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_G_y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_G_z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//对数据进行50次求和</span><span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Get_Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_A_x <span class="token operator">+=</span>  Data_A<span class="token punctuation">.</span>aacx<span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_A_y <span class="token operator">+=</span>  Data_A<span class="token punctuation">.</span>aacy<span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_A_z <span class="token operator">+=</span>  Data_A<span class="token punctuation">.</span>aacz<span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_G_x <span class="token operator">+=</span>  Data_G<span class="token punctuation">.</span>gyrox<span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_G_y <span class="token operator">+=</span>  Data_G<span class="token punctuation">.</span>gyroy<span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_G_z <span class="token operator">+=</span>  Data_G<span class="token punctuation">.</span>gyroz<span class="token punctuation">;</span><span class="token comment">//vTaskDelay(10);</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//测试得到 水平状态下一般应该为负 考虑到如果有情况 必须要歪着放无人机的话</span><span class="token comment">//那么之后还要把数据再把以前是负数的在转回去</span><span class="token comment">//将负数变为正数 遍历二维数组</span><span class="token comment">/*for( i = 0; i &lt; 6; i++)&#123;for( j = 0; j &lt; 40; j++)&#123;if(_error[i][j] &lt; 0)  _error[i][j] = - _error[i][j];if(_error[i][j] == 0) _error[i][j] =   _error[i][j];&#125;&#125;*/</span><span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*printf("排完序了\r\n");for(i = 0; i &lt; 40; i++)&#123;printf("第%d次 A_x的值 = %d  ",i,_error[0][i]);printf("第%d次 A_y的值 = %d  ",i,_error[1][i]);printf("第%d次 A_z的值 = %d  ",i,_error[2][i]);printf("第%d次 G_x的值 = %d  ",i,_error[3][i]);printf("第%d次 G_y的值 = %d  ",i,_error[4][i]);printf("第%d次 G_z的值 = %d\r\n",i,_error[5][i]);&#125;*/</span><span class="token comment">//去掉前5组</span><span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>jieguo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> _error<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//去掉后5组</span><span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>jieguo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> _error<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*for(i = 0; i &lt; 30; i++)&#123;printf("第%d次 A_x的值 = %d  ",i,jieguo[0][i]);printf("第%d次 A_y的值 = %d  ",i,jieguo[1][i]);printf("第%d次 A_z的值 = %d  ",i,jieguo[2][i]);printf("第%d次 G_x的值 = %d  ",i,jieguo[3][i]);printf("第%d次 G_y的值 = %d  ",i,jieguo[4][i]);printf("第%d次 G_z的值 = %d\r\n",i,jieguo[5][i]);&#125;*/</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>error<span class="token punctuation">.</span>error_A_x <span class="token operator">+=</span> jieguo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_A_y <span class="token operator">+=</span> jieguo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_A_z <span class="token operator">+=</span> jieguo<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_G_x <span class="token operator">+=</span> jieguo<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_G_y <span class="token operator">+=</span> jieguo<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_G_z <span class="token operator">+=</span> jieguo<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>error<span class="token punctuation">.</span>error_A_x <span class="token operator">=</span> error<span class="token punctuation">.</span>error_A_x <span class="token operator">/</span> <span class="token number">30</span><span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_A_y <span class="token operator">=</span> error<span class="token punctuation">.</span>error_A_y <span class="token operator">/</span> <span class="token number">30</span><span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_A_z <span class="token operator">=</span> error<span class="token punctuation">.</span>error_A_z <span class="token operator">/</span> <span class="token number">30</span><span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_G_x <span class="token operator">=</span> error<span class="token punctuation">.</span>error_G_x <span class="token operator">/</span> <span class="token number">30</span><span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_G_y <span class="token operator">=</span> error<span class="token punctuation">.</span>error_G_y <span class="token operator">/</span> <span class="token number">30</span><span class="token punctuation">;</span>error<span class="token punctuation">.</span>error_G_z <span class="token operator">=</span> error<span class="token punctuation">.</span>error_G_z <span class="token operator">/</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" A_x的误差 = %d  "</span><span class="token punctuation">,</span>error<span class="token punctuation">.</span>error_A_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" A_y的误差 = %d  "</span><span class="token punctuation">,</span>error<span class="token punctuation">.</span>error_A_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" A_z的误差 = %d  "</span><span class="token punctuation">,</span>error<span class="token punctuation">.</span>error_A_z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" G_x的误差 = %d  "</span><span class="token punctuation">,</span>error<span class="token punctuation">.</span>error_G_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" G_y的误差 = %d  "</span><span class="token punctuation">,</span>error<span class="token punctuation">.</span>error_G_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" G_z的误差 = %d\r\n"</span><span class="token punctuation">,</span>error<span class="token punctuation">.</span>error_G_z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> FreeRTOS学习 </tag>
            
            <tag> 无人机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用指针操作二维数组</title>
      <link href="/2023/02/20/%E4%BD%BF%E7%94%A8%E6%8C%87%E9%92%88%E6%93%8D%E4%BD%9C%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
      <url>/2023/02/20/%E4%BD%BF%E7%94%A8%E6%8C%87%E9%92%88%E6%93%8D%E4%BD%9C%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> _error<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> _error<span class="token punctuation">;</span>  <span class="token comment">//创建一个指针 指向二维数组_error</span><span class="token comment">// *(p+1)表示取地址上的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MPU6050进行姿态解算</title>
      <link href="/2023/02/20/MPU6050%E8%BF%9B%E8%A1%8C%E5%A7%BF%E6%80%81%E8%A7%A3%E7%AE%97/"/>
      <url>/2023/02/20/MPU6050%E8%BF%9B%E8%A1%8C%E5%A7%BF%E6%80%81%E8%A7%A3%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>姿态解算自带一个dmp 但是由于dmp数据读取需要从FIFO读取，极容易发生堵塞溢出，所以干脆自己写一个姿态解算。</p><p>首先 MPU6050的几个主要配置如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">MPU_Set_Gyro_Fsr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//陀螺仪传感器,±2000dps  精度为2000dps/s</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">MPU_Set_Accel_Fsr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加速度传感器,±2g  加速度初始化为2g 则</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">temp<span class="token operator">=</span><span class="token function">MPU_Get_Temperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到温度值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">MPU_Get_Accelerometer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>aacx<span class="token punctuation">,</span><span class="token operator">&amp;</span>aacy<span class="token punctuation">,</span><span class="token operator">&amp;</span>aacz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到加速度传感器数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">MPU_Get_Gyroscope</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gyrox<span class="token punctuation">,</span><span class="token operator">&amp;</span>gyroy<span class="token punctuation">,</span><span class="token operator">&amp;</span>gyroz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到陀螺仪数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回的数据为short类型则 范围在-32767–32768之间</p><p>所以对这个范围进行归一化处理，得到加速度范围为 -2g—2g之间</p><p>如果得到的数为-32767 则对应为-2g的加速度，如果得到的是32768则对应加速度为2g</p><p>在静置在水平面是 对应数据分别为</p><h3 id="加速度计，加速度计测量的是三个方向的加速度-对应函数为"><a href="#加速度计，加速度计测量的是三个方向的加速度-对应函数为" class="headerlink" title="加速度计，加速度计测量的是三个方向的加速度 对应函数为"></a><strong>加速度计，加速度计测量的是三个方向的加速度</strong> 对应函数为</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">MPU_Get_Accelerometer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>aacx<span class="token punctuation">,</span><span class="token operator">&amp;</span>aacy<span class="token punctuation">,</span><span class="token operator">&amp;</span>aacz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到加速度传感器数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> FreeRTOS学习 </tag>
            
            <tag> 无人机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决mpu6050移植FreeRTOS的问题</title>
      <link href="/2023/02/20/%E8%A7%A3%E5%86%B3mpu6050%E7%A7%BB%E6%A4%8DFreeRTOS%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/02/20/%E8%A7%A3%E5%86%B3mpu6050%E7%A7%BB%E6%A4%8DFreeRTOS%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>j 今天终于是弄掉了这个困扰了2天的大麻烦，mpu6050移植了FreeRTOS之后一直读取不到数据，原因居然是正点原子的delay函数被FreeRTOS认为成了任务切换造成进程堵塞。所以把delay函数全部改成rtos里的就OK了</p><p>但是 这样又出现一个问题，数据读取的太慢了，这时候想到了是iic的问题，由于延时函数全部改成了rtos的所以最低的演示也有1ms的时间，但是iic用的是2us的时间，所以只能自己写一个延时函数作为替换。换上之后果然是飞速运转了。</p><p>记录以下代码省的以后再弄了</p><h4 id="mpu6050-c"><a href="#mpu6050-c" class="headerlink" title="mpu6050.c"></a>mpu6050.c</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpu6050.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"usart.h"</span>   </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"FreeRTOS.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"task.h"</span></span><span class="token comment">////////////////////////////////////////////////////////////////////////////////// </span><span class="token comment">//本程序只供学习使用，未经作者许可，不得用于其它任何用途</span><span class="token comment">//ALIENTEK精英STM32开发板V3</span><span class="token comment">//MPU6050 驱动代码   </span><span class="token comment">//正点原子@ALIENTEK</span><span class="token comment">//技术论坛:www.openedv.com</span><span class="token comment">//创建日期:2015/1/17</span><span class="token comment">//版本：V1.0</span><span class="token comment">//版权所有，盗版必究。</span><span class="token comment">//Copyright(C) 广州市星翼电子科技有限公司 2009-2019</span><span class="token comment">//All rights reserved  </span><span class="token comment">////////////////////////////////////////////////////////////////////////////////// </span> <span class="token comment">//初始化MPU6050</span><span class="token comment">//返回值:0,成功</span><span class="token comment">//    其他,错误代码</span>u8 <span class="token function">MPU_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> u8 res<span class="token punctuation">;</span>  GPIO_InitTypeDef  GPIO_InitStructure<span class="token punctuation">;</span><span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_AFIO<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使能AFIO时钟 </span><span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先使能外设IO PORTA时钟 </span>  GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_15<span class="token punctuation">;</span> <span class="token comment">// 端口配置</span>  GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>  <span class="token comment">//推挽输出</span>  GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span> <span class="token comment">//IO口速度为50MHz</span>  <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据设定参数初始化GPIOA</span><span class="token function">GPIO_PinRemapConfig</span><span class="token punctuation">(</span>GPIO_Remap_SWJ_JTAGDisable<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//禁止JTAG,从而PA15可以做普通IO使用,否则PA15不能做普通IO!!!</span>MPU_AD0_CTRL<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//控制MPU6050的AD0脚为低电平,从机地址为:0X68</span><span class="token function">MPU_IIC_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化IIC总线</span><span class="token function">MPU_Write_Byte</span><span class="token punctuation">(</span>MPU_PWR_MGMT1_REG<span class="token punctuation">,</span><span class="token number">0X80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//复位MPU6050</span><span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//delay_ms(100);</span><span class="token function">MPU_Write_Byte</span><span class="token punctuation">(</span>MPU_PWR_MGMT1_REG<span class="token punctuation">,</span><span class="token number">0X00</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//唤醒MPU6050 </span><span class="token function">MPU_Set_Gyro_Fsr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//陀螺仪传感器,±2000dps</span><span class="token function">MPU_Set_Accel_Fsr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加速度传感器,±2g</span><span class="token function">MPU_Set_Rate</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置采样率50Hz</span><span class="token function">MPU_Write_Byte</span><span class="token punctuation">(</span>MPU_INT_EN_REG<span class="token punctuation">,</span><span class="token number">0X00</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭所有中断</span><span class="token function">MPU_Write_Byte</span><span class="token punctuation">(</span>MPU_USER_CTRL_REG<span class="token punctuation">,</span><span class="token number">0X00</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//I2C主模式关闭</span><span class="token function">MPU_Write_Byte</span><span class="token punctuation">(</span>MPU_FIFO_EN_REG<span class="token punctuation">,</span><span class="token number">0X00</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭FIFO</span><span class="token function">MPU_Write_Byte</span><span class="token punctuation">(</span>MPU_INTBP_CFG_REG<span class="token punctuation">,</span><span class="token number">0X80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//INT引脚低电平有效</span>res<span class="token operator">=</span><span class="token function">MPU_Read_Byte</span><span class="token punctuation">(</span>MPU_DEVICE_ID_REG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">==</span>MPU_ADDR<span class="token punctuation">)</span><span class="token comment">//器件ID正确</span><span class="token punctuation">&#123;</span><span class="token function">MPU_Write_Byte</span><span class="token punctuation">(</span>MPU_PWR_MGMT1_REG<span class="token punctuation">,</span><span class="token number">0X01</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置CLKSEL,PLL X轴为参考</span><span class="token function">MPU_Write_Byte</span><span class="token punctuation">(</span>MPU_PWR_MGMT2_REG<span class="token punctuation">,</span><span class="token number">0X00</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加速度与陀螺仪都工作</span><span class="token function">MPU_Set_Rate</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置采样率为50Hz</span> <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//设置MPU6050陀螺仪传感器满量程范围</span><span class="token comment">//fsr:0,±250dps;1,±500dps;2,±1000dps;3,±2000dps</span><span class="token comment">//返回值:0,设置成功</span><span class="token comment">//    其他,设置失败 </span>u8 <span class="token function">MPU_Set_Gyro_Fsr</span><span class="token punctuation">(</span>u8 fsr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">MPU_Write_Byte</span><span class="token punctuation">(</span>MPU_GYRO_CFG_REG<span class="token punctuation">,</span>fsr<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置陀螺仪满量程范围  </span><span class="token punctuation">&#125;</span><span class="token comment">//设置MPU6050加速度传感器满量程范围</span><span class="token comment">//fsr:0,±2g;1,±4g;2,±8g;3,±16g</span><span class="token comment">//返回值:0,设置成功</span><span class="token comment">//    其他,设置失败 </span>u8 <span class="token function">MPU_Set_Accel_Fsr</span><span class="token punctuation">(</span>u8 fsr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">MPU_Write_Byte</span><span class="token punctuation">(</span>MPU_ACCEL_CFG_REG<span class="token punctuation">,</span>fsr<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置加速度传感器满量程范围  </span><span class="token punctuation">&#125;</span><span class="token comment">//设置MPU6050的数字低通滤波器</span><span class="token comment">//lpf:数字低通滤波频率(Hz)</span><span class="token comment">//返回值:0,设置成功</span><span class="token comment">//    其他,设置失败 </span>u8 <span class="token function">MPU_Set_LPF</span><span class="token punctuation">(</span>u16 lpf<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>u8 data<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>lpf<span class="token operator">>=</span><span class="token number">188</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lpf<span class="token operator">>=</span><span class="token number">98</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lpf<span class="token operator">>=</span><span class="token number">42</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lpf<span class="token operator">>=</span><span class="token number">20</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lpf<span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">else</span> data<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">MPU_Write_Byte</span><span class="token punctuation">(</span>MPU_CFG_REG<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置数字低通滤波器  </span><span class="token punctuation">&#125;</span><span class="token comment">//设置MPU6050的采样率(假定Fs=1KHz)</span><span class="token comment">//rate:4~1000(Hz)</span><span class="token comment">//返回值:0,设置成功</span><span class="token comment">//    其他,设置失败 </span>u8 <span class="token function">MPU_Set_Rate</span><span class="token punctuation">(</span>u16 rate<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>u8 data<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>rate<span class="token operator">></span><span class="token number">1000</span><span class="token punctuation">)</span>rate<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>rate<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span>rate<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>data<span class="token operator">=</span><span class="token number">1000</span><span class="token operator">/</span>rate<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>data<span class="token operator">=</span><span class="token function">MPU_Write_Byte</span><span class="token punctuation">(</span>MPU_SAMPLE_RATE_REG<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置数字低通滤波器</span> <span class="token keyword">return</span> <span class="token function">MPU_Set_LPF</span><span class="token punctuation">(</span>rate<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自动设置LPF为采样率的一半</span><span class="token punctuation">&#125;</span><span class="token comment">//得到温度值</span><span class="token comment">//返回值:温度值(扩大了100倍)</span><span class="token keyword">short</span> <span class="token function">MPU_Get_Temperature</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  u8 buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">short</span> raw<span class="token punctuation">;</span><span class="token keyword">float</span> temp<span class="token punctuation">;</span><span class="token function">MPU_Read_Len</span><span class="token punctuation">(</span>MPU_ADDR<span class="token punctuation">,</span>MPU_TEMP_OUTH_REG<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>     raw<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      temp<span class="token operator">=</span><span class="token number">36.53</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>raw<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">340</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> temp<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//得到陀螺仪值(原始值)</span><span class="token comment">//gx,gy,gz:陀螺仪x,y,z轴的原始读数(带符号)</span><span class="token comment">//返回值:0,成功</span><span class="token comment">//    其他,错误代码</span>u8 <span class="token function">MPU_Get_Gyroscope</span><span class="token punctuation">(</span><span class="token keyword">short</span> <span class="token operator">*</span>gx<span class="token punctuation">,</span><span class="token keyword">short</span> <span class="token operator">*</span>gy<span class="token punctuation">,</span><span class="token keyword">short</span> <span class="token operator">*</span>gz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    u8 buf<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>res<span class="token punctuation">;</span>  res<span class="token operator">=</span><span class="token function">MPU_Read_Len</span><span class="token punctuation">(</span>MPU_ADDR<span class="token punctuation">,</span>MPU_GYRO_XOUTH_REG<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>gx<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token operator">*</span>gy<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token operator">*</span>gz<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span>buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>buf<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//得到加速度值(原始值)</span><span class="token comment">//gx,gy,gz:陀螺仪x,y,z轴的原始读数(带符号)</span><span class="token comment">//返回值:0,成功</span><span class="token comment">//    其他,错误代码</span>u8 <span class="token function">MPU_Get_Accelerometer</span><span class="token punctuation">(</span><span class="token keyword">short</span> <span class="token operator">*</span>ax<span class="token punctuation">,</span><span class="token keyword">short</span> <span class="token operator">*</span>ay<span class="token punctuation">,</span><span class="token keyword">short</span> <span class="token operator">*</span>az<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    u8 buf<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>res<span class="token punctuation">;</span>  res<span class="token operator">=</span><span class="token function">MPU_Read_Len</span><span class="token punctuation">(</span>MPU_ADDR<span class="token punctuation">,</span>MPU_ACCEL_XOUTH_REG<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>ax<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token operator">*</span>ay<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token operator">*</span>az<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span>buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>buf<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//IIC连续写</span><span class="token comment">//addr:器件地址 </span><span class="token comment">//reg:寄存器地址</span><span class="token comment">//len:写入长度</span><span class="token comment">//buf:数据区</span><span class="token comment">//返回值:0,正常</span><span class="token comment">//    其他,错误代码</span>u8 <span class="token function">MPU_Write_Len</span><span class="token punctuation">(</span>u8 addr<span class="token punctuation">,</span>u8 reg<span class="token punctuation">,</span>u8 len<span class="token punctuation">,</span>u8 <span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>u8 i<span class="token punctuation">;</span>     <span class="token function">MPU_IIC_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">MPU_IIC_Send_Byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送器件地址+写命令</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">MPU_IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//等待应答</span><span class="token punctuation">&#123;</span><span class="token function">MPU_IIC_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token function">MPU_IIC_Send_Byte</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写寄存器地址</span>    <span class="token function">MPU_IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待应答</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">MPU_IIC_Send_Byte</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送数据</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">MPU_IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//等待ACK</span><span class="token punctuation">&#123;</span><span class="token function">MPU_IIC_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token function">MPU_IIC_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//IIC连续读</span><span class="token comment">//addr:器件地址</span><span class="token comment">//reg:要读取的寄存器地址</span><span class="token comment">//len:要读取的长度</span><span class="token comment">//buf:读取到的数据存储区</span><span class="token comment">//返回值:0,正常</span><span class="token comment">//    其他,错误代码</span>u8 <span class="token function">MPU_Read_Len</span><span class="token punctuation">(</span>u8 addr<span class="token punctuation">,</span>u8 reg<span class="token punctuation">,</span>u8 len<span class="token punctuation">,</span>u8 <span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">MPU_IIC_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">MPU_IIC_Send_Byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送器件地址+写命令</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">MPU_IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//等待应答</span><span class="token punctuation">&#123;</span><span class="token function">MPU_IIC_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token function">MPU_IIC_Send_Byte</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写寄存器地址</span>    <span class="token function">MPU_IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待应答</span>    <span class="token function">MPU_IIC_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPU_IIC_Send_Byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送器件地址+读命令</span>    <span class="token function">MPU_IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待应答 </span><span class="token keyword">while</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>buf<span class="token operator">=</span><span class="token function">MPU_IIC_Read_Byte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读数据,发送nACK </span><span class="token keyword">else</span> <span class="token operator">*</span>buf<span class="token operator">=</span><span class="token function">MPU_IIC_Read_Byte</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读数据,发送ACK  </span>len<span class="token operator">--</span><span class="token punctuation">;</span>buf<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token function">MPU_IIC_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//产生一个停止条件 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//IIC写一个字节 </span><span class="token comment">//reg:寄存器地址</span><span class="token comment">//data:数据</span><span class="token comment">//返回值:0,正常</span><span class="token comment">//    其他,错误代码</span>u8 <span class="token function">MPU_Write_Byte</span><span class="token punctuation">(</span>u8 reg<span class="token punctuation">,</span>u8 data<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>     <span class="token function">MPU_IIC_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">MPU_IIC_Send_Byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>MPU_ADDR<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送器件地址+写命令</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">MPU_IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//等待应答</span><span class="token punctuation">&#123;</span><span class="token function">MPU_IIC_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token function">MPU_IIC_Send_Byte</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写寄存器地址</span>    <span class="token function">MPU_IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待应答 </span><span class="token function">MPU_IIC_Send_Byte</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送数据</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">MPU_IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//等待ACK</span><span class="token punctuation">&#123;</span><span class="token function">MPU_IIC_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>     <span class="token function">MPU_IIC_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//IIC读一个字节 </span><span class="token comment">//reg:寄存器地址 </span><span class="token comment">//返回值:读到的数据</span>u8 <span class="token function">MPU_Read_Byte</span><span class="token punctuation">(</span>u8 reg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>u8 res<span class="token punctuation">;</span>    <span class="token function">MPU_IIC_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">MPU_IIC_Send_Byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>MPU_ADDR<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送器件地址+写命令</span><span class="token function">MPU_IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待应答 </span>    <span class="token function">MPU_IIC_Send_Byte</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写寄存器地址</span>    <span class="token function">MPU_IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待应答</span>    <span class="token function">MPU_IIC_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPU_IIC_Send_Byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>MPU_ADDR<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送器件地址+读命令</span>    <span class="token function">MPU_IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待应答 </span>res<span class="token operator">=</span><span class="token function">MPU_IIC_Read_Byte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取数据,发送nACK </span>    <span class="token function">MPU_IIC_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//产生一个停止条件 </span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="mpuiic-c"><a href="#mpuiic-c" class="headerlink" title="mpuiic.c"></a>mpuiic.c</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpuiic.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"FreeRTOS.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"task.h"</span></span><span class="token comment">////////////////////////////////////////////////////////////////////////////////// </span><span class="token comment">//本程序只供学习使用，未经作者许可，不得用于其它任何用途</span><span class="token comment">//ALIENTEK精英STM32开发板V3</span><span class="token comment">//MPU6050 IIC驱动 代码   </span><span class="token comment">//正点原子@ALIENTEK</span><span class="token comment">//技术论坛:www.openedv.com</span><span class="token comment">//创建日期:2015/1/17</span><span class="token comment">//版本：V1.0</span><span class="token comment">//版权所有，盗版必究。</span><span class="token comment">//Copyright(C) 广州市星翼电子科技有限公司 2009-2019</span><span class="token comment">//All rights reserved  </span><span class="token comment">//////////////////////////////////////////////////////////////////////////////////</span>  <span class="token keyword">void</span> <span class="token function">my_delay_us</span><span class="token punctuation">(</span>u16 time<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       u16 i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>time<span class="token operator">--</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>      i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">//自己定义</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment">//MPU IIC 延时函数</span><span class="token keyword">void</span> <span class="token function">MPU_IIC_Delay</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//vTaskDelay(1);</span><span class="token comment">//delay_us(2);</span><span class="token function">my_delay_us</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化IIC</span><span class="token keyword">void</span> <span class="token function">MPU_IIC_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       GPIO_InitTypeDef  GPIO_InitStructure<span class="token punctuation">;</span><span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先使能外设IO PORTB时钟 </span>  GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_10<span class="token operator">|</span>GPIO_Pin_11<span class="token punctuation">;</span> <span class="token comment">// 端口配置</span>  GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>  <span class="token comment">//推挽输出</span>  GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span> <span class="token comment">//IO口速度为50MHz</span>  <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据设定参数初始化GPIO </span>  <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span>GPIO_Pin_10<span class="token operator">|</span>GPIO_Pin_11<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//PB10,PB11 输出高</span><span class="token punctuation">&#125;</span><span class="token comment">//产生IIC起始信号</span><span class="token keyword">void</span> <span class="token function">MPU_IIC_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">MPU_SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//sda线输出</span>MPU_IIC_SDA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    MPU_IIC_SCL<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">MPU_IIC_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> MPU_IIC_SDA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//START:when CLK is high,DATA change form high to low </span><span class="token function">MPU_IIC_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MPU_IIC_SCL<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//钳住I2C总线，准备发送或接收数据 </span><span class="token punctuation">&#125;</span>  <span class="token comment">//产生IIC停止信号</span><span class="token keyword">void</span> <span class="token function">MPU_IIC_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">MPU_SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sda线输出</span>MPU_IIC_SCL<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>MPU_IIC_SDA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//STOP:when CLK is high DATA change form low to high</span> <span class="token function">MPU_IIC_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MPU_IIC_SCL<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> MPU_IIC_SDA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//发送I2C总线结束信号</span><span class="token function">MPU_IIC_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token comment">//等待应答信号到来</span><span class="token comment">//返回值：1，接收应答失败</span><span class="token comment">//        0，接收应答成功</span>u8 <span class="token function">MPU_IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>u8 ucErrTime<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">MPU_SDA_IN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//SDA设置为输入  </span>MPU_IIC_SDA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">MPU_IIC_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   MPU_IIC_SCL<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">MPU_IIC_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>MPU_READ_SDA<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ucErrTime<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ucErrTime<span class="token operator">></span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">MPU_IIC_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>MPU_IIC_SCL<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//时钟输出0    </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token comment">//产生ACK应答</span><span class="token keyword">void</span> <span class="token function">MPU_IIC_Ack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>MPU_IIC_SCL<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">MPU_SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MPU_IIC_SDA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">MPU_IIC_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MPU_IIC_SCL<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">MPU_IIC_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MPU_IIC_SCL<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//不产生ACK应答    </span><span class="token keyword">void</span> <span class="token function">MPU_IIC_NAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>MPU_IIC_SCL<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">MPU_SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MPU_IIC_SDA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">MPU_IIC_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MPU_IIC_SCL<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">MPU_IIC_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MPU_IIC_SCL<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>      <span class="token comment">//IIC发送一个字节</span><span class="token comment">//返回从机有无应答</span><span class="token comment">//1，有应答</span><span class="token comment">//0，无应答</span><span class="token keyword">void</span> <span class="token function">MPU_IIC_Send_Byte</span><span class="token punctuation">(</span>u8 txd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    u8 t<span class="token punctuation">;</span>   <span class="token function">MPU_SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         MPU_IIC_SCL<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//拉低时钟开始数据传输</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>                      MPU_IIC_SDA<span class="token operator">=</span><span class="token punctuation">(</span>txd<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">7</span><span class="token punctuation">;</span>        txd<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>       MPU_IIC_SCL<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">MPU_IIC_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     MPU_IIC_SCL<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">MPU_IIC_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//读1个字节，ack=1时，发送ACK，ack=0，发送nACK   </span>u8 <span class="token function">MPU_IIC_Read_Byte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> ack<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>receive<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">MPU_SDA_IN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//SDA设置为输入</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        MPU_IIC_SCL<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token function">MPU_IIC_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MPU_IIC_SCL<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        receive<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>MPU_READ_SDA<span class="token punctuation">)</span>receive<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token function">MPU_IIC_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ack<span class="token punctuation">)</span>        <span class="token function">MPU_IIC_NAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送nACK</span>    <span class="token keyword">else</span>        <span class="token function">MPU_IIC_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//发送ACK   </span>    <span class="token keyword">return</span> receive<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"key.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"lcd.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"usart.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpu6050.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"FreeRTOS.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"task.h"</span></span><span class="token comment">//开始任务配置</span><span class="token keyword">void</span> <span class="token function">start_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//任务函数</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">START_TASK_PRIO</span>  <span class="token expression"><span class="token number">1</span>  </span><span class="token comment">//任务优先级   //优先级为 0 是 开启任务调度使用 优先级31也是系统所用 所以此处不能使用优先级0和31</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">START_STK_SIZE</span> <span class="token expression"><span class="token number">130</span> </span><span class="token comment">//任务堆栈大小</span></span>TaskHandle_t StartTask_Handler<span class="token punctuation">;</span> <span class="token comment">//任务句柄</span><span class="token comment">//任务函数1配置</span><span class="token keyword">void</span> <span class="token function">test1_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST1_TASK_PRIO</span> <span class="token expression"><span class="token number">15</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST1_STK_SIZE</span> <span class="token expression"><span class="token number">520</span></span></span>TaskHandle_t Test1Task_Handler<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">rtos</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>u8 key<span class="token punctuation">;</span><span class="token keyword">float</span> pitch<span class="token punctuation">,</span>roll<span class="token punctuation">,</span>yaw<span class="token punctuation">;</span> <span class="token comment">//欧拉角</span><span class="token keyword">short</span> aacx<span class="token punctuation">,</span>aacy<span class="token punctuation">,</span>aacz<span class="token punctuation">;</span><span class="token comment">//加速度传感器原始数据</span><span class="token keyword">short</span> gyrox<span class="token punctuation">,</span>gyroy<span class="token punctuation">,</span>gyroz<span class="token punctuation">;</span><span class="token comment">//陀螺仪原始数据</span><span class="token keyword">short</span> temp<span class="token punctuation">;</span><span class="token comment">//温度</span><span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级</span><span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//串口初始化为500000</span><span class="token function">delay_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//延时初始化 </span><span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//初始化与LED连接的硬件接口</span><span class="token comment">//LCD_Init();   //初始化LCD  </span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">rtos</span></span><span class="token comment">//创建开始任务</span>    <span class="token function">xTaskCreate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TaskFunction_t <span class="token punctuation">)</span> start_task<span class="token punctuation">,</span>            <span class="token comment">//任务函数</span>                <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span>    <span class="token punctuation">)</span> <span class="token string">"start_task"</span><span class="token punctuation">,</span>          <span class="token comment">//任务名称</span>                <span class="token punctuation">(</span><span class="token class-name">uint16_t</span>       <span class="token punctuation">)</span> START_STK_SIZE<span class="token punctuation">,</span>        <span class="token comment">//任务堆栈大小</span>                <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span>          <span class="token punctuation">)</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>                  <span class="token comment">//传递给任务函数的参数</span>                <span class="token punctuation">(</span>UBaseType_t    <span class="token punctuation">)</span> START_TASK_PRIO<span class="token punctuation">,</span>       <span class="token comment">//任务优先级</span>                <span class="token punctuation">(</span>TaskHandle_t<span class="token operator">*</span>  <span class="token punctuation">)</span> <span class="token operator">&amp;</span>StartTask_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//任务句柄        </span><span class="token function">vTaskStartScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//开启任务调度</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"22222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span>rtos</span></span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span><span class="token function">MPU_Get_Temperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到温度值</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPU_Get_Accelerometer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>aacx<span class="token punctuation">,</span><span class="token operator">&amp;</span>aacy<span class="token punctuation">,</span><span class="token operator">&amp;</span>aacz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到加速度传感器数据</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"aacx = %d aacy = %d  aacz = %d"</span><span class="token punctuation">,</span>aacx<span class="token punctuation">,</span>aacy<span class="token punctuation">,</span>aacz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPU_Get_Gyroscope</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gyrox<span class="token punctuation">,</span><span class="token operator">&amp;</span>gyroy<span class="token punctuation">,</span><span class="token operator">&amp;</span>gyroz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到陀螺仪数据</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  gyrox = %d gyroy = %d  gyroz = %d\r\n"</span><span class="token punctuation">,</span>gyrox<span class="token punctuation">,</span>gyroy<span class="token punctuation">,</span>gyroz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">start_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//任务1</span>    <span class="token function">xTaskCreate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TaskFunction_t <span class="token punctuation">)</span> test1_task<span class="token punctuation">,</span>            <span class="token comment">//任务函数</span>                <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span>    <span class="token punctuation">)</span> <span class="token string">"test1_task"</span><span class="token punctuation">,</span>          <span class="token comment">//任务名称</span>                <span class="token punctuation">(</span><span class="token class-name">uint16_t</span>       <span class="token punctuation">)</span> TEST1_STK_SIZE<span class="token punctuation">,</span>        <span class="token comment">//任务堆栈大小</span>                <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span>          <span class="token punctuation">)</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>                  <span class="token comment">//传递给任务函数的参数</span>                <span class="token punctuation">(</span>UBaseType_t    <span class="token punctuation">)</span> TEST1_TASK_PRIO<span class="token punctuation">,</span>       <span class="token comment">//任务优先级</span>                <span class="token punctuation">(</span>TaskHandle_t<span class="token operator">*</span>  <span class="token punctuation">)</span> <span class="token operator">&amp;</span>Test1Task_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//任务句柄 </span><span class="token function">vTaskDelete</span><span class="token punctuation">(</span>StartTask_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//传入要删除函数的句柄   如果要删除开始任务本身 则传入NULL</span><span class="token punctuation">&#125;</span><span class="token comment">//测试函数1</span><span class="token keyword">void</span> <span class="token function">test1_task</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">short</span> aacx<span class="token punctuation">,</span>aacy<span class="token punctuation">,</span>aacz<span class="token punctuation">;</span><span class="token comment">//加速度传感器原始数据</span><span class="token keyword">short</span> gyrox<span class="token punctuation">,</span>gyroy<span class="token punctuation">,</span>gyroz<span class="token punctuation">;</span><span class="token comment">//陀螺仪原始数据</span><span class="token keyword">short</span> temp<span class="token punctuation">;</span><span class="token comment">//温度</span><span class="token function">MPU_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span><span class="token function">MPU_Get_Temperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到温度值</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPU_Get_Accelerometer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>aacx<span class="token punctuation">,</span><span class="token operator">&amp;</span>aacy<span class="token punctuation">,</span><span class="token operator">&amp;</span>aacz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到加速度传感器数据</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"aacx = %d aacy = %d  aacz = %d"</span><span class="token punctuation">,</span>aacx<span class="token punctuation">,</span>aacy<span class="token punctuation">,</span>aacz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MPU_Get_Gyroscope</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gyrox<span class="token punctuation">,</span><span class="token operator">&amp;</span>gyroy<span class="token punctuation">,</span><span class="token operator">&amp;</span>gyroz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到陀螺仪数据</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  gyrox = %d gyroy = %d  gyroz = %d\r\n"</span><span class="token punctuation">,</span>gyrox<span class="token punctuation">,</span>gyroy<span class="token punctuation">,</span>gyroz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> FreeRTOS学习 </tag>
            
            <tag> 无人机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双目摄像头（3）测距</title>
      <link href="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%EF%BC%883%EF%BC%89%E6%B5%8B%E8%B7%9D/"/>
      <url>/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%EF%BC%883%EF%BC%89%E6%B5%8B%E8%B7%9D/</url>
      
        <content type="html"><![CDATA[<p>b 标定好的摄像头参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npleft_camera_matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">396.4068</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.3392</span><span class="token punctuation">,</span> <span class="token number">309.5251</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">#左摄像头内参</span>                               <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">397.0826</span><span class="token punctuation">,</span> <span class="token number">239.0778</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                               <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>left_distortion <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.0354</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0367</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0017</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0019</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#左摄像头畸变参数</span>right_camera_matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">394.8058</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.9573</span><span class="token punctuation">,</span> <span class="token number">307.5528</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">#右摄像头内参</span>                                <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">395.8628</span><span class="token punctuation">,</span> <span class="token number">252.1060</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>right_distortion <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.0235</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0122</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0013</span><span class="token punctuation">,</span> <span class="token number">0.0017</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>R <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">0.9999</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0014</span><span class="token punctuation">,</span> <span class="token number">0.0106</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0.0014</span><span class="token punctuation">,</span>  <span class="token number">1.0000</span><span class="token punctuation">,</span> <span class="token number">0.0018</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.0106</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0018</span><span class="token punctuation">,</span> <span class="token number">0.9999</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># print(R)</span>T <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">23.6009</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0673</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.2926</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 平移关系向量</span>size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span>  <span class="token comment"># 图像尺寸</span><span class="token comment"># 进行立体更正</span>R1<span class="token punctuation">,</span> R2<span class="token punctuation">,</span> P1<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> Q<span class="token punctuation">,</span> validPixROI1<span class="token punctuation">,</span> validPixROI2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>stereoRectify<span class="token punctuation">(</span>left_camera_matrix<span class="token punctuation">,</span> left_distortion<span class="token punctuation">,</span>                                                                  right_camera_matrix<span class="token punctuation">,</span> right_distortion<span class="token punctuation">,</span> size<span class="token punctuation">,</span> R<span class="token punctuation">,</span>                                                                  T<span class="token punctuation">)</span><span class="token comment"># 计算更正map</span>left_map1<span class="token punctuation">,</span> left_map2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>initUndistortRectifyMap<span class="token punctuation">(</span>left_camera_matrix<span class="token punctuation">,</span> left_distortion<span class="token punctuation">,</span> R1<span class="token punctuation">,</span> P1<span class="token punctuation">,</span> size<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>CV_16SC2<span class="token punctuation">)</span>right_map1<span class="token punctuation">,</span> right_map2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>initUndistortRectifyMap<span class="token punctuation">(</span>right_camera_matrix<span class="token punctuation">,</span> right_distortion<span class="token punctuation">,</span> R2<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> size<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>CV_16SC2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2<span class="token keyword">import</span> camera_configs<span class="token keyword">import</span> random<span class="token keyword">import</span> mathcap1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> cv2<span class="token punctuation">.</span>CAP_DSHOW<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>  <span class="token comment"># 这里Property identifier要求是int</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>  <span class="token comment"># 见下图,3表示CV_CAP_PROP_FRAME_WIDTH,设为270.（设为1和270的效果一样）</span><span class="token comment"># 注意顺序，先设置分辨率，再实例化另一个摄像头。否则依旧报错。</span>cap2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> cv2<span class="token punctuation">.</span>CAP_DSHOW<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span><span class="token comment"># 鼠标回调函数</span><span class="token keyword">def</span> <span class="token function">onmouse_pick_points</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> event <span class="token operator">==</span> cv2<span class="token punctuation">.</span>EVENT_LBUTTONDOWN<span class="token punctuation">:</span>        threeD <span class="token operator">=</span> param        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n像素坐标 x = %d, y = %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># print("世界坐标是：", threeD[y][x][0], threeD[y][x][1], threeD[y][x][2], "mm")</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"世界坐标xyz 是："</span><span class="token punctuation">,</span> threeD<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">,</span> threeD<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">,</span> threeD<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">,</span> <span class="token string">"m"</span><span class="token punctuation">)</span>        distance <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>threeD<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> threeD<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> threeD<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>        distance <span class="token operator">=</span> distance <span class="token operator">/</span> <span class="token number">1000.0</span>  <span class="token comment"># mm -> m</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"距离是："</span><span class="token punctuation">,</span> distance<span class="token punctuation">,</span> <span class="token string">"m"</span><span class="token punctuation">)</span>WIN_NAME <span class="token operator">=</span> <span class="token string">'Deep'</span>cv2<span class="token punctuation">.</span>namedWindow<span class="token punctuation">(</span>WIN_NAME<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>WINDOW_AUTOSIZE<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    ret1<span class="token punctuation">,</span> frame1 <span class="token operator">=</span> cap1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    ret2<span class="token punctuation">,</span> frame2 <span class="token operator">=</span> cap2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    imgL <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>frame1<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>  <span class="token comment"># 将BGR格式转换成灰度图片</span>    imgR <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>frame2<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>    <span class="token comment"># cv2.remap 重映射，就是把一幅图像中某位置的像素放置到另一个图片指定位置的过程。</span>    <span class="token comment"># 依据MATLAB测量数据重建无畸变图片</span>    img1_rectified <span class="token operator">=</span> cv2<span class="token punctuation">.</span>remap<span class="token punctuation">(</span>imgL<span class="token punctuation">,</span> camera_configs<span class="token punctuation">.</span>left_map1<span class="token punctuation">,</span> camera_configs<span class="token punctuation">.</span>left_map2<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>INTER_LINEAR<span class="token punctuation">)</span>    img2_rectified <span class="token operator">=</span> cv2<span class="token punctuation">.</span>remap<span class="token punctuation">(</span>imgR<span class="token punctuation">,</span> camera_configs<span class="token punctuation">.</span>right_map1<span class="token punctuation">,</span> camera_configs<span class="token punctuation">.</span>right_map2<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>INTER_LINEAR<span class="token punctuation">)</span>    imageL <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img1_rectified<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_GRAY2BGR<span class="token punctuation">)</span>    imageR <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img2_rectified<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_GRAY2BGR<span class="token punctuation">)</span>    <span class="token comment"># BM</span>    numberOfDisparities <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">640</span> <span class="token operator">//</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">-</span><span class="token number">16</span>  <span class="token comment"># 640对应是分辨率的宽</span>    stereo <span class="token operator">=</span> cv2<span class="token punctuation">.</span>StereoBM_create<span class="token punctuation">(</span>numDisparities<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> blockSize<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token comment"># 立体匹配</span>    stereo<span class="token punctuation">.</span>setROI1<span class="token punctuation">(</span>camera_configs<span class="token punctuation">.</span>validPixROI1<span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setROI2<span class="token punctuation">(</span>camera_configs<span class="token punctuation">.</span>validPixROI2<span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setPreFilterCap<span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setBlockSize<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setMinDisparity<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setNumDisparities<span class="token punctuation">(</span>numberOfDisparities<span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setTextureThreshold<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setUniquenessRatio<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setSpeckleWindowSize<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setSpeckleRange<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>    stereo<span class="token punctuation">.</span>setDisp12MaxDiff<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    disparity <span class="token operator">=</span> stereo<span class="token punctuation">.</span>compute<span class="token punctuation">(</span>img1_rectified<span class="token punctuation">,</span> img2_rectified<span class="token punctuation">)</span>  <span class="token comment"># 计算视差</span>    disp <span class="token operator">=</span> cv2<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span>disparity<span class="token punctuation">,</span> disparity<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> norm_type<span class="token operator">=</span>cv2<span class="token punctuation">.</span>NORM_MINMAX<span class="token punctuation">,</span> dtype<span class="token operator">=</span>cv2<span class="token punctuation">.</span>CV_8U<span class="token punctuation">)</span>  <span class="token comment"># 归一化函数算法</span>    threeD <span class="token operator">=</span> cv2<span class="token punctuation">.</span>reprojectImageTo3D<span class="token punctuation">(</span>disparity<span class="token punctuation">,</span> camera_configs<span class="token punctuation">.</span>Q<span class="token punctuation">,</span> handleMissingValues<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 计算三维坐标数据值</span>    threeD <span class="token operator">=</span> threeD <span class="token operator">*</span> <span class="token number">16</span>    <span class="token comment"># threeD[y][x] x:0~640; y:0~480;   !!!!!!!!!!</span>    cv2<span class="token punctuation">.</span>setMouseCallback<span class="token punctuation">(</span>WIN_NAME<span class="token punctuation">,</span> onmouse_pick_points<span class="token punctuation">,</span> threeD<span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">,</span> frame1<span class="token punctuation">)</span>    <span class="token comment"># cv2.imshow("right", frame2)</span>    <span class="token comment"># cv2.imshow("left_r", imgL)</span>    <span class="token comment"># cv2.imshow("right_r", imgR)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>WIN_NAME<span class="token punctuation">,</span> disp<span class="token punctuation">)</span>  <span class="token comment"># 显示深度图的双目画面</span>    key <span class="token operator">=</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>cap1<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测距效果只能说一般 1米以内还行  超过1m之后误差大概在20cm   —  50cm</p><p><img src="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%EF%BC%883%EF%BC%89%E6%B5%8B%E8%B7%9D/image-20230218221025650.png" alt="image-20230218221025650"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 双目摄像头 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双目摄像头标定（2）MATLAB得到相机参数</title>
      <link href="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%882%EF%BC%89MATLAB%E5%BE%97%E5%88%B0%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/"/>
      <url>/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%882%EF%BC%89MATLAB%E5%BE%97%E5%88%B0%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_43788282/article/details/129027860">(6条消息) matlab进行双目标定获取双目参数并打印教程_小张Tt的博客-CSDN博客_matlab棋盘角点检测</a></p><p><a href="https://blog.csdn.net/qq_56839117/article/details/125216637">(6条消息) Matlab2020b在双目标定的过程中会出现要串联的数组维度不一致的问题_干拔闪了腰的博客-CSDN博客_matlab要串联的数组维度不一样怎么办</a></p><p><a href="https://blog.csdn.net/weixin_43788282/article/details/127642806">(6条消息) matlab单双目标定提取相机标定中各张标定图片的重投影误差数据_重投影误差matlab 如何显示_小张Tt的博客-CSDN博客</a></p><p>参考这三篇博客</p><p>第二个针对MATLAB版本BUG</p><p>总结 就是得到图像之后将差别特别大的几组图片删掉 ，总体误差差不多0.2 就可以了</p><p><img src="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%882%EF%BC%89MATLAB%E5%BE%97%E5%88%B0%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/image-20230218170129606.png" alt="image-20230218170129606"></p><p>之后得到相机的参数。</p><p><img src="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%882%EF%BC%89MATLAB%E5%BE%97%E5%88%B0%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/image-20230218171131943.png" alt="image-20230218171131943"></p><p><img src="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%882%EF%BC%89MATLAB%E5%BE%97%E5%88%B0%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/image-20230218171150055.png" alt="image-20230218171150055"></p><p><img src="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%882%EF%BC%89MATLAB%E5%BE%97%E5%88%B0%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/image-20230218172228985.png" alt="image-20230218172228985"></p><p>得到的参数</p><p><img src="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%882%EF%BC%89MATLAB%E5%BE%97%E5%88%B0%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/image-20230218164746149.png" alt="image-20230218164746149"></p><p>CameraParameters1与CameraParameters2为左右摄像头的内部参数，RotationOfCamera2与TranslationOfCamera2为两个摄像头的旋转、平移参数。</p><p>平移参数可直接使用；但旋转参数需进行<strong>转置</strong>才能使用。</p><p><strong>IntrinsicMatrix</strong> 存放的是摄像头的内参   </p><h4 id="左相机-内参"><a href="#左相机-内参" class="headerlink" title="左相机 内参"></a>左相机 内参</h4><p><img src="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%882%EF%BC%89MATLAB%E5%BE%97%E5%88%B0%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/image-20230218165944967.png" alt="image-20230218165944967"></p><h4 id="右相机内参"><a href="#右相机内参" class="headerlink" title="右相机内参"></a>右相机内参</h4><p><img src="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%882%EF%BC%89MATLAB%E5%BE%97%E5%88%B0%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/image-20230218170024577.png" alt="image-20230218170024577"></p><p>参考</p><p><img src="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%882%EF%BC%89MATLAB%E5%BE%97%E5%88%B0%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/image-20230218170335804.png" alt="image-20230218170335804"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>畸变参数</p><p><img src="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%882%EF%BC%89MATLAB%E5%BE%97%E5%88%B0%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/image-20230218170423585.png" alt="image-20230218170423585"></p><p><img src="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%882%EF%BC%89MATLAB%E5%BE%97%E5%88%B0%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/image-20230218170443505.png" alt="image-20230218170443505"></p><h3 id="自己的畸变参数为"><a href="#自己的畸变参数为" class="headerlink" title="自己的畸变参数为"></a>自己的畸变参数为</h3><p><strong>RadialDistortion 为 径向畸变</strong>，摄像头由于光学透镜的特性使得成像存在着径向畸变，可由K1，K2，K3确定。</p><p><img src="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%882%EF%BC%89MATLAB%E5%BE%97%E5%88%B0%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/image-20230218170607167.png" alt="image-20230218170607167"></p><p><img src="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%882%EF%BC%89MATLAB%E5%BE%97%E5%88%B0%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/image-20230218170618368.png" alt="image-20230218170618368"></p><p>所以畸变函数为 k1 = 0.0354   k2 = -0.0367   k3 = 0</p><p><img src="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%882%EF%BC%89MATLAB%E5%BE%97%E5%88%B0%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/image-20230218170709334.png" alt="image-20230218170709334"></p><p><img src="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%882%EF%BC%89MATLAB%E5%BE%97%E5%88%B0%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/image-20230218170737933.png" alt="image-20230218170737933"></p><p>所以p1 = -0.0017   p2 = -0.0019</p><p>所以在opencv中使用时，<strong>K1</strong>，<strong>K2</strong>，<strong>P1</strong>，<strong>P2</strong>，<strong>K3</strong>顺序 </p><p><strong>左相机畸变参数为      0.0354 ， -0.0367 ，-0.0017，-0.0019，0</strong></p><p><strong>左相机的内参为</strong></p><p><img src="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%882%EF%BC%89MATLAB%E5%BE%97%E5%88%B0%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/image-20230218171419498.png" alt="image-20230218171419498"></p><p>396.4068,  -0.3392,    309.5251</p><p>0,               397.0826,  239.0778  </p><p>0                , 0,                    1</p><p>左相机外参 </p><p><strong>右相机的畸变参数为</strong>   k1 = 0.0235,   k2 = -0.0122 k3 = 0  ,p1 = -0.0013   ,  p2 = 0.0017</p><p>​                                        0.0235，  -0.0122 ，-0.0013，0.0017，0</p><p><strong>右相机的内参为</strong></p><p><img src="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%882%EF%BC%89MATLAB%E5%BE%97%E5%88%B0%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0/image-20230218171432966.png" alt="image-20230218171432966"></p><p>394.8058,    0,                    0</p><p>-0.9573,       395.8628,      0</p><p>307.5528   252.1060,        1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npleft_camera_matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">396.4068</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.3392</span><span class="token punctuation">,</span> <span class="token number">309.5251</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">#左摄像头内参</span>                               <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">397.0826</span><span class="token punctuation">,</span> <span class="token number">239.0778</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                               <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>left_distortion <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.0354</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0367</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0017</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0019</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#左摄像头畸变参数</span>right_camera_matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">394.8058</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.9573</span><span class="token punctuation">,</span> <span class="token number">307.5528</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">#右摄像头内参</span>                                <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">395.8628</span><span class="token punctuation">,</span> <span class="token number">252.1060</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>right_distortion <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.0235</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0122</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0013</span><span class="token punctuation">,</span> <span class="token number">0.0017</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>R <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">0.9999</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0014</span><span class="token punctuation">,</span> <span class="token number">0.0106</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0.0014</span><span class="token punctuation">,</span>  <span class="token number">1.0000</span><span class="token punctuation">,</span> <span class="token number">0.0018</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.0106</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0018</span><span class="token punctuation">,</span> <span class="token number">0.9999</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># print(R)</span>T <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">23.6009</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0673</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.2926</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 平移关系向量</span>size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span>  <span class="token comment"># 图像尺寸</span><span class="token comment"># 进行立体更正</span>R1<span class="token punctuation">,</span> R2<span class="token punctuation">,</span> P1<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> Q<span class="token punctuation">,</span> validPixROI1<span class="token punctuation">,</span> validPixROI2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>stereoRectify<span class="token punctuation">(</span>left_camera_matrix<span class="token punctuation">,</span> left_distortion<span class="token punctuation">,</span>                                                                  right_camera_matrix<span class="token punctuation">,</span> right_distortion<span class="token punctuation">,</span> size<span class="token punctuation">,</span> R<span class="token punctuation">,</span>                                                                  T<span class="token punctuation">)</span><span class="token comment"># 计算更正map</span>left_map1<span class="token punctuation">,</span> left_map2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>initUndistortRectifyMap<span class="token punctuation">(</span>left_camera_matrix<span class="token punctuation">,</span> left_distortion<span class="token punctuation">,</span> R1<span class="token punctuation">,</span> P1<span class="token punctuation">,</span> size<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>CV_16SC2<span class="token punctuation">)</span>right_map1<span class="token punctuation">,</span> right_map2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>initUndistortRectifyMap<span class="token punctuation">(</span>right_camera_matrix<span class="token punctuation">,</span> right_distortion<span class="token punctuation">,</span> R2<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> size<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>CV_16SC2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考</p><p><a href="https://bbs.huaweicloud.com/blogs/detail/219741">双目视觉 标定+矫正 （基于MATLAB）-云社区-华为云 (huaweicloud.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 双目摄像头 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双目摄像头标定（1）拍照保存</title>
      <link href="/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%881%EF%BC%89%E6%8B%8D%E7%85%A7%E4%BF%9D%E5%AD%98/"/>
      <url>/2023/02/18/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%881%EF%BC%89%E6%8B%8D%E7%85%A7%E4%BF%9D%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>d 直接百度来的代码 自己做了点修改</p><p>修改folder  如果项目目录下没有img文件夹 自己建一个 否则 图片不会保存</p><p>尽量拍个20 30 张图片方便之后使用MATLAB进行标定。</p><p>摄像头初始化是个大坑，搞了很久，一直是只能打开一个镜头。至于为啥这样些，也看不懂，能用就行。</p><p>接下来就是拍照了。按 s 直接保存。很方便。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> timeAUTO <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 自动拍照，或手动按s键拍照</span>INTERVAL <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment"># 自动拍照间隔</span>folder <span class="token operator">=</span> <span class="token string">"./img/"</span> <span class="token comment"># 拍照文件目录</span><span class="token keyword">def</span> <span class="token function">shot</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> counter    path <span class="token operator">=</span> folder <span class="token operator">+</span> pos <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg"</span>    cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>path<span class="token punctuation">,</span> frame<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"snapshot saved into: "</span> <span class="token operator">+</span> path<span class="token punctuation">)</span>counter <span class="token operator">=</span> <span class="token number">0</span>utc <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>cap1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">+</span> cv2<span class="token punctuation">.</span>CAP_DSHOW<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>  <span class="token comment"># 这里Property identifier要求是int</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>  <span class="token comment"># 见下图,3表示CV_CAP_PROP_FRAME_WIDTH,设为270.（设为1和270的效果一样）</span><span class="token comment"># 注意顺序，先设置分辨率，再实例化另一个摄像头。否则依旧报错。</span>cap2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> cv2<span class="token punctuation">.</span>CAP_DSHOW<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>ret1<span class="token punctuation">,</span> frame1 <span class="token operator">=</span> cap1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>ret2<span class="token punctuation">,</span> frame2 <span class="token operator">=</span> cap2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> ret1 <span class="token keyword">and</span> ret2<span class="token punctuation">:</span>    ret1<span class="token punctuation">,</span> frame1 <span class="token operator">=</span> cap1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    ret2<span class="token punctuation">,</span> frame2 <span class="token operator">=</span> cap2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'frame1'</span><span class="token punctuation">,</span> frame1<span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'frame2'</span><span class="token punctuation">,</span> frame2<span class="token punctuation">)</span>    now <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> AUTO <span class="token keyword">and</span> now <span class="token operator">-</span> utc <span class="token operator">>=</span> INTERVAL<span class="token punctuation">:</span>        shot<span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">,</span> frame1<span class="token punctuation">)</span>        shot<span class="token punctuation">(</span><span class="token string">"right"</span><span class="token punctuation">,</span> frame2<span class="token punctuation">)</span>        counter <span class="token operator">+=</span> <span class="token number">1</span>        utc <span class="token operator">=</span> now    key <span class="token operator">=</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">elif</span> key <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        shot<span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">,</span> frame1<span class="token punctuation">)</span>        shot<span class="token punctuation">(</span><span class="token string">"right"</span><span class="token punctuation">,</span> frame2<span class="token punctuation">)</span>        counter <span class="token operator">+=</span> <span class="token number">1</span>cap1<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cap2<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 双目摄像头 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拍照保存</title>
      <link href="/2023/02/18/%E6%8B%8D%E7%85%A7%E4%BF%9D%E5%AD%98/"/>
      <url>/2023/02/18/%E6%8B%8D%E7%85%A7%E4%BF%9D%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>z  键盘上按 s 键进行拍照</p><p>按q退出</p><p>记得自己创建一个img文件夹存图片</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> timeAUTO <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 自动拍照，或手动按s键拍照</span>INTERVAL <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment"># 自动拍照间隔</span>folder <span class="token operator">=</span> <span class="token string">"./img/"</span> <span class="token comment"># 拍照文件目录</span><span class="token keyword">def</span> <span class="token function">shot</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> counter    path <span class="token operator">=</span> folder <span class="token operator">+</span> pos <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg"</span>    cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>path<span class="token punctuation">,</span> frame<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"snapshot saved into: "</span> <span class="token operator">+</span> path<span class="token punctuation">)</span>counter <span class="token operator">=</span> <span class="token number">0</span>utc <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>cap1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> cv2<span class="token punctuation">.</span>CAP_DSHOW<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>  <span class="token comment"># 这里Property identifier要求是int</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>  <span class="token comment"># 见下图,3表示CV_CAP_PROP_FRAME_WIDTH,设为270.（设为1和270的效果一样）</span><span class="token comment"># 注意顺序，先设置分辨率，再实例化另一个摄像头。否则依旧报错。</span>cap2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> cv2<span class="token punctuation">.</span>CAP_DSHOW<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>ret1<span class="token punctuation">,</span> frame1 <span class="token operator">=</span> cap1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>ret2<span class="token punctuation">,</span> frame2 <span class="token operator">=</span> cap2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> ret1 <span class="token keyword">and</span> ret2<span class="token punctuation">:</span>    ret1<span class="token punctuation">,</span> frame1 <span class="token operator">=</span> cap1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    ret2<span class="token punctuation">,</span> frame2 <span class="token operator">=</span> cap2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'frame1'</span><span class="token punctuation">,</span> frame1<span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'frame2'</span><span class="token punctuation">,</span> frame2<span class="token punctuation">)</span>    now <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> AUTO <span class="token keyword">and</span> now <span class="token operator">-</span> utc <span class="token operator">>=</span> INTERVAL<span class="token punctuation">:</span>        shot<span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">,</span> frame1<span class="token punctuation">)</span>        shot<span class="token punctuation">(</span><span class="token string">"right"</span><span class="token punctuation">,</span> frame2<span class="token punctuation">)</span>        counter <span class="token operator">+=</span> <span class="token number">1</span>        utc <span class="token operator">=</span> now    key <span class="token operator">=</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">elif</span> key <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        shot<span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">,</span> frame1<span class="token punctuation">)</span>        shot<span class="token punctuation">(</span><span class="token string">"right"</span><span class="token punctuation">,</span> frame2<span class="token punctuation">)</span>        counter <span class="token operator">+=</span> <span class="token number">1</span>cap1<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cap2<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 双目摄像头 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python多线程学习</title>
      <link href="/2023/02/18/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/02/18/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token punctuation">,</span> threading<span class="token keyword">def</span> <span class="token function">thread_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#创建多线程函数</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"thread_1"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">thread_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#创建多线程函数</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"thread_2"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>task1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>thread_1<span class="token punctuation">)</span> <span class="token comment">#将任务1开辟一个新线程</span>task2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>thread_2<span class="token punctuation">)</span> <span class="token comment">#将任务2开辟一个新线程</span>task1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#启动</span>task2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>task1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#加入</span>task2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双目摄像头基本使用</title>
      <link href="/2023/02/17/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4hbv-1780-2%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/02/17/%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4hbv-1780-2%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>打开摄像头 使用的是python的<code>opencv</code></p><p> 本摄像头图像为1280×480</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2 <span class="token comment">#定义摄像头</span>cap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cap<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>CAP_PROP_FRAME_WIDTH<span class="token punctuation">,</span> <span class="token number">1280</span><span class="token punctuation">)</span>cap<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>CAP_PROP_FRAME_HEIGHT<span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> cap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#读取每一帧</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'shuai ge'</span><span class="token punctuation">,</span> frame<span class="token punctuation">)</span>    <span class="token comment">#显示每一帧</span>    <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>cap<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">#释放摄像头</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#销毁窗口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双目摄像头 其实就是将左右两个镜头拍到的图像进行一个拼接，一张120×120和一张120×120的图片拼接成一张240×120的图片。</p><p>如果想要分别查看左右镜头的图像可以将拍到的一张图片进行剪切剪成两张图片去显示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2cap1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">+</span> cv2<span class="token punctuation">.</span>CAP_DSHOW<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>  <span class="token comment"># 这里Property identifier要求是int</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>  <span class="token comment"># 见下图,3表示CV_CAP_PROP_FRAME_WIDTH,设为270.（设为1和270的效果一样）</span><span class="token comment"># 注意顺序，先设置分辨率，再实例化另一个摄像头。否则依旧报错。</span>cap2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> cv2<span class="token punctuation">.</span>CAP_DSHOW<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cap2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">)</span>ret1<span class="token punctuation">,</span> frame1 <span class="token operator">=</span> cap1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>ret2<span class="token punctuation">,</span> frame2 <span class="token operator">=</span> cap2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> ret1 <span class="token keyword">and</span> ret2<span class="token punctuation">:</span>    ret1<span class="token punctuation">,</span> frame1 <span class="token operator">=</span> cap1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    ret2<span class="token punctuation">,</span> frame2 <span class="token operator">=</span> cap2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'frame1'</span><span class="token punctuation">,</span> frame1<span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'frame2'</span><span class="token punctuation">,</span> frame2<span class="token punctuation">)</span>    <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>cap1<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cap2<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 双目摄像头 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PCB板的13层</title>
      <link href="/2023/02/17/PCB%E6%9D%BF%E7%9A%8413%E5%B1%82/"/>
      <url>/2023/02/17/PCB%E6%9D%BF%E7%9A%8413%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p>​    </p><p>​    <strong>Top Layer(顶层)、Bottom Layer（底层）两个信号层：用于建立电气连接的铜箔层</strong></p><hr><p>​    <strong>Mechanical 1 (机械层)：用于设置pcb与机械加工有关的参数，以及用于pcb3d模型的放置与显示</strong></p><hr><p>​    <strong>Top Overlay(顶层丝印层)、Bottom Overlay(底层丝印层)：用于添加电路板文字说明</strong></p><hr><p>​    <strong>Top Paste（顶层锡膏防护层）、Bottom Paste(迪岑锡膏防护层)：用于添加露在电路板外的铜</strong></p><hr><p>​    <strong>Top Solder(顶层阻焊层)、Bottm Soledr(底层阻焊层):用于添加电路板的绿油覆盖</strong></p><hr><p>​    <strong>Drillguide （过孔引导层）：用于设置钻孔信息</strong></p><hr><p>​    <strong>Keep-Out Layer（禁止布线层）：用于设立布线范围</strong></p><hr><p>​    <strong>Drillerawing（过孔钻孔层）：用于查看钻孔孔径</strong></p><hr><p>​    <strong>Multi-Layer（多层同时显示）：可实现多层叠加显示，用于显示多个电路板层相关的细节</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> PCB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>耗时三天画完第一块板子</title>
      <link href="/2023/02/17/%E8%80%97%E6%97%B6%E4%B8%89%E5%A4%A9%E7%94%BB%E5%AE%8C%E7%AC%AC%E4%B8%80%E5%9D%97%E6%9D%BF%E5%AD%90/"/>
      <url>/2023/02/17/%E8%80%97%E6%97%B6%E4%B8%89%E5%A4%A9%E7%94%BB%E5%AE%8C%E7%AC%AC%E4%B8%80%E5%9D%97%E6%9D%BF%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>耗时三天终于在2月17日，快吃晚饭之前画完了第一块PCB板，0报错。</p><p>接下来就是接着补充自己电路知识，为无人机做准备，打算借助实验室的<code>UWB定位</code>模块来实现高级点的无人机飞控，暂时有这个想法。</p><p>应该不简单，电路板的话，自己设计应该是够呛了，PCB现在还是太垃圾了，模仿着画一个还得3天。</p><p>无人机项目实现的功能，起码的滞空，前进后退左转右转，但是这个太普通了，加上现有的<code>UWB定位</code>实现位置的可控。</p><p>追求去实现在PC上 实时显示无人机目前的状态 高度 速度  机翼的转速，再加上一些模块类似 摄像头 或者是直接在下边下挂一个机械臂。</p><p> 像这种无人机外卖。 当然如果顺利在加上 无人机编队飞行那就更好了。先想想吧。。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> PCB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>画PCB遇到的问题解决方法</title>
      <link href="/2023/02/16/%E7%94%BBPCB%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2023/02/16/%E7%94%BBPCB%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="布线快捷键"><a href="#布线快捷键" class="headerlink" title="布线快捷键"></a>布线快捷键</h3><p><strong>ctrl+w</strong></p><h3 id="PCB如何旋转器件"><a href="#PCB如何旋转器件" class="headerlink" title="PCB如何旋转器件"></a>PCB如何旋转器件</h3><p>鼠标拖住之后按空格</p><h3 id="线宽不能设置太大"><a href="#线宽不能设置太大" class="headerlink" title="线宽不能设置太大"></a>线宽不能设置太大</h3><p>按 D-&gt;R 进入设置   调整最大宽度就ok了</p><p><img src="/2023/02/16/%E7%94%BBPCB%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/image-20230216160637262.png" alt="image-20230216160637262"></p><h3 id="放置和设置过孔大小"><a href="#放置和设置过孔大小" class="headerlink" title="放置和设置过孔大小"></a>放置和设置过孔大小</h3><p>快捷键 p-&gt;v  左键放置</p><p>设置大小   双击过孔进行设置  50是直径     28是口尺寸</p><p><img src="/2023/02/16/%E7%94%BBPCB%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/image-20230216161846423.png" alt="image-20230216161846423"></p><h3 id="修改默认线宽"><a href="#修改默认线宽" class="headerlink" title="修改默认线宽"></a>修改默认线宽</h3><p>在布线前直接在设计规则中设置：Design-Rules-Routing-Width,修改这个里面的Preferred Width即可</p><p><img src="/2023/02/16/%E7%94%BBPCB%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/image-20230216162659725.png" alt="image-20230216162659725"></p><h3 id="修改过孔大小"><a href="#修改过孔大小" class="headerlink" title="修改过孔大小"></a>修改过孔大小</h3><p>d-&gt;r 进入设置打开图示界面进行修改  修改之后 在按 p v 快捷键放置过孔之前  先按tab 设置过孔的大小 之后放置的都是这一个大小的了。</p><p><img src="/2023/02/16/%E7%94%BBPCB%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/image-20230216171020666.png" alt="image-20230216171020666"></p>]]></content>
      
      
      
        <tags>
            
            <tag> PCB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主从定时器控制步进电机</title>
      <link href="/2023/02/15/%E4%B8%BB%E4%BB%8E%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A7%E5%88%B6%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA/"/>
      <url>/2023/02/15/%E4%B8%BB%E4%BB%8E%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A7%E5%88%B6%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="定时器几个重要参数理解"><a href="#定时器几个重要参数理解" class="headerlink" title="定时器几个重要参数理解"></a>定时器几个重要参数理解</h2><p>ARR——自动重新装载的值（计数器CNT的满值）</p><p>CNT——计数器值</p><p>PSC——预分频值</p><p><img src="/2023/02/15/%E4%B8%BB%E4%BB%8E%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A7%E5%88%B6%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA/webp.webp" alt="img"></p><p><img src="/2023/02/15/%E4%B8%BB%E4%BB%8E%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A7%E5%88%B6%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA/webp-16764634384852.webp" alt="img"></p><p><img src="/2023/02/15/%E4%B8%BB%E4%BB%8E%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A7%E5%88%B6%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA/webp-16764634533394.webp" alt="img"></p><h2 id="PWM几个重要参数理解"><a href="#PWM几个重要参数理解" class="headerlink" title="PWM几个重要参数理解"></a>PWM几个重要参数理解</h2><p><strong>一个重要的量：</strong></p><p>CCRx——时刻与CNT比较的值</p><p><strong>PWM与定时器的关系：</strong>PWM是定时器工作模式中的一种，单独的定时器工作模式有四种。</p><p><strong>单独一个定时器有四种工作模式：</strong></p><p>1.输入捕获（典型应用就是计算输入脉冲高电平持续时间）</p><p>2.输出比较（当CNT=CCRx，输出电平取反）</p><p>3.PWM（当CNT&lt;CCRx为一种电平，当CNT&gt;CCRx为另外一种电平）</p><p>4.单脉冲（只输出一个脉冲）</p><p><strong>其他工作模式：</strong>两个定时器之间还可以构成主从模式、支持针对定位的增量(正交)编码器和霍尔传感器电路、触发输入作为外部时钟或者按周期的电流管理等。</p><h1 id="定时器主从模式"><a href="#定时器主从模式" class="headerlink" title="定时器主从模式"></a>定时器主从模式</h1><p><img src="/2023/02/15/%E4%B8%BB%E4%BB%8E%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A7%E5%88%B6%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA/webp-16764635258616.webp" alt="img"></p><p>首先，配置好两个计时器（TIM），然后配置某个TIM为主定时器，接着配置这个TIM的TRGO。然后配置另外一个TIM为从定时器，使用ITRx为内部触发，最后选择从TIM的输入触发源。接下来看看官方文档（《STM32参考手册v10》P278）说明。</p><p><img src="/2023/02/15/%E4%B8%BB%E4%BB%8E%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A7%E5%88%B6%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA/webp-16764635428928.webp" alt="img"></p><h2 id="TIMx的内部连接："><a href="#TIMx的内部连接：" class="headerlink" title="TIMx的内部连接："></a><strong>TIMx的内部连接：</strong></h2><p>TIM与TIM之间不是随便连接的，其内部通道是固定的，下表说明了这种关系。</p><p><img src="/2023/02/15/%E4%B8%BB%E4%BB%8E%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A7%E5%88%B6%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA/webp-167646355960310.webp" alt="img"></p><p>​                            <strong>TIM2~5内部触发</strong></p><p><img src="/2023/02/15/%E4%B8%BB%E4%BB%8E%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A7%E5%88%B6%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA/webp-167646355960311.webp" alt="img"></p><p>​                        <strong>TIM1、8内部触发</strong></p><p>调用方法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">Pulse_output</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1KHZ，8000个脉冲 </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>步进电机转速 = 频率 / 200 / 细分数</strong></p><h3 id="定时器1主模式，定时器2从模式"><a href="#定时器1主模式，定时器2从模式" class="headerlink" title="/定时器1主模式，定时器2从模式/"></a><strong>/<em>定时器1主模式，定时器2从模式</em>/</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/***定时器1主模式，定时器2从模式***/</span><span class="token keyword">void</span> <span class="token function">TIM1_config</span><span class="token punctuation">(</span>u32 Cycle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span> <span class="token comment">//GPIO设置，创建结构体</span>    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span><span class="token comment">//定时器设置结构体</span>    TIM_OCInitTypeDef  TIM_OCInitStructure<span class="token punctuation">;</span> <span class="token comment">//pwm波对应设置结构体</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token operator">|</span>RCC_APB2Periph_TIM1 <span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//开启时钟</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_8<span class="token operator">|</span>GPIO_Pin_9<span class="token operator">|</span>GPIO_Pin_11<span class="token punctuation">;</span>  <span class="token comment">//TIM1_CH4 PA11</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span> <span class="token comment">//复用推挽输出</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>     TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> Cycle<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                                                       TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span><span class="token number">71</span><span class="token punctuation">;</span>                    <span class="token comment">//设置用来作为TIMx时钟频率除数的预分频值                                                     </span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> TIM_CKD_DIV1<span class="token punctuation">;</span>     <span class="token comment">//设置时钟分割：TDTS= Tck_tim            </span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span> <span class="token comment">//TIM向上计数模式</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_RepetitionCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">//重复计数，一定要=0！！！</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//装载                        </span>     TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OCMode <span class="token operator">=</span> TIM_OCMode_PWM1<span class="token punctuation">;</span>          <span class="token comment">//选择定时器模式：TIM脉冲宽度调制模式1       </span>    TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OutputState <span class="token operator">=</span> TIM_OutputState_Enable<span class="token punctuation">;</span> <span class="token comment">//比较输出使能</span>    TIM_OCInitStructure<span class="token punctuation">.</span>TIM_Pulse <span class="token operator">=</span> Cycle<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token comment">//设置待装入捕获寄存器的脉冲值                                   </span>    TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OCPolarity <span class="token operator">=</span> TIM_OCPolarity_Low<span class="token punctuation">;</span>      <span class="token comment">//输出极性       </span>     <span class="token function">TIM_OC1Init</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_OCInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//装载通道1,PA8 </span>    <span class="token function">TIM_OC2Init</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_OCInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//装载通道2,PA9，被串口占用</span>    <span class="token function">TIM_OC4Init</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_OCInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//装载通道4,PA11</span>     <span class="token function">TIM_SelectMasterSlaveMode</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> TIM_MasterSlaveMode_Enable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置或者重置 TIMx 主/从模式</span>    <span class="token comment">//TIMx： x 可以是 2， 3 或者 4，来选择 TIM 外设</span>    <span class="token comment">//TIM_MasterSlaveMode：定时器主/从模式，TIM 主/从模式使能</span>        <span class="token function">TIM_SelectOutputTrigger</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> TIM_TRGOSource_Update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//选择 TIMx 触发输出模式</span>    <span class="token comment">//TIMx： x 可以是 2， 3 或者 4，来选择 TIM 外设</span>    <span class="token comment">//TIM_TRGOSource：触发输出模式</span>    <span class="token comment">//TIM_TRGOSource_Update：使用更新事件作为触发输出（TRGO）</span>     <span class="token comment">//    TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);  //使能或者失能 TIMx 在 CCR3 上的预装载寄存器</span><span class="token comment">//    TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);  //使能或者失能 TIMx 在 CCR3 上的预装载寄存器</span>        <span class="token function">TIM_ARRPreloadConfig</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使能或者失能 TIMx 在 ARR 上的预装载寄存器 </span>    <span class="token comment">//允许或禁止在定时器工作时向ARR的缓冲器中写入新值，以便在更新事件发生时载入覆盖以前的值</span><span class="token punctuation">&#125;</span> <span class="token comment">/***定时器2从模式***/</span><span class="token keyword">void</span> <span class="token function">TIM2_config</span><span class="token punctuation">(</span>u32 PulseNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span> <span class="token comment">//对应结构体声明</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>  <span class="token comment">//NVIC 对应结构体声明</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>     TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> PulseNum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>       TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> TIM_CKD_DIV1<span class="token punctuation">;</span>         TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span>      <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">TIM_SelectInputTrigger</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> TIM_TS_ITR0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//选择 TIMx 输入触发源，TIM 内部触发 0      </span>    <span class="token function">TIM_SelectSlaveMode</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span>TIM_SlaveMode_External1 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等同 TIM2->SMCR|=0x07 //设置从模式寄存器 </span>    <span class="token comment">//   TIM2->SMCR|=0x07;                                  //设置从模式寄存器       </span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">,</span>DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>     NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> TIM2_IRQn<span class="token punctuation">;</span>            NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>     <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//入口设定函数</span><span class="token keyword">void</span> <span class="token function">Pulse_output</span><span class="token punctuation">(</span>u32 Cycle<span class="token punctuation">,</span>u32 PulseNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">TIM2_config</span><span class="token punctuation">(</span>PulseNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//装载</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使能</span>    <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清除TIMx 的中断待处理位</span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使能或者失能指定的 TIMx 中断</span>    <span class="token function">TIM1_config</span><span class="token punctuation">(</span>Cycle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//装载   </span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使能</span>    <span class="token function">TIM_CtrlPWMOutputs</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//高级定时器一定要加上，主输出使能</span><span class="token punctuation">&#125;</span>  <span class="token comment">//中断处理函数</span><span class="token keyword">void</span> <span class="token function">TIM2_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>     <span class="token comment">// TIM_IT_CC1</span>    <span class="token punctuation">&#123;</span>         <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清除中断标志位 </span>        <span class="token function">TIM_CtrlPWMOutputs</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//主输出使能</span>        <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭定时器 </span>        <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭定时器 </span>        <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定时器3主模式，定时器1从模式-，这个代码由于是高级定时器1为从稍有不同"><a href="#定时器3主模式，定时器1从模式-，这个代码由于是高级定时器1为从稍有不同" class="headerlink" title="/定时器3主模式，定时器1从模式/，这个代码由于是高级定时器1为从稍有不同"></a>/<em><strong>定时器3主模式，定时器1从模式</strong></em>/，这个代码由于是高级定时器1为从稍有不同</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//定时器3主模式,定时器1从模式</span><span class="token comment">//PWM输出</span><span class="token keyword">void</span> <span class="token function">TIM3_config</span><span class="token punctuation">(</span>u32 Cycle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span><span class="token comment">//GPIO设置，创建结构体</span>    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span><span class="token comment">//定时器设置结构体</span>    TIM_OCInitTypeDef  TIM_OCInitStructure<span class="token punctuation">;</span> <span class="token comment">//pwm波对应设置结构体</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//开启时钟</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//开启时钟</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_6<span class="token operator">|</span>GPIO_Pin_7<span class="token punctuation">;</span> <span class="token comment">//TIM_CH1和T</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>             <span class="token comment">//复用推挽输出</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>     TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> Cycle<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                                                       TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span><span class="token number">71</span><span class="token punctuation">;</span>                    <span class="token comment">//设置用来作为TIMx时钟频率除数的预分频值                                                     </span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> TIM_CKD_DIV1<span class="token punctuation">;</span>     <span class="token comment">//设置时钟分割：TDTS= Tck_tim            </span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span> <span class="token comment">//TIM向上计数模式</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OCMode <span class="token operator">=</span> TIM_OCMode_PWM1<span class="token punctuation">;</span>          <span class="token comment">//选择定时器模式：TIM脉冲宽度调制模式1       </span>    TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OutputState <span class="token operator">=</span> TIM_OutputState_Enable<span class="token punctuation">;</span> <span class="token comment">//比较输出使能</span>    TIM_OCInitStructure<span class="token punctuation">.</span>TIM_Pulse <span class="token operator">=</span> Cycle<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token comment">//设置待装入捕获寄存器的脉冲值                                   </span>    TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OCPolarity <span class="token operator">=</span> TIM_OCPolarity_Low<span class="token punctuation">;</span>      <span class="token comment">//输出极性       </span>    <span class="token function">TIM_OC1Init</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_OCInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//通道      </span>    <span class="token function">TIM_OC2Init</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_OCInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//通道   </span>         <span class="token comment">///*///定时器3主模式设置///*/</span>    <span class="token function">TIM_SelectMasterSlaveMode</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_MasterSlaveMode_Enable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置或者重置 TIMx 主/从模式</span>    <span class="token comment">//TIMx： x 可以是 2， 3 或者 4，来选择 TIM 外设</span>    <span class="token comment">//TIM_MasterSlaveMode：定时器主/从模式，TIM 主/从模式使能</span>        <span class="token function">TIM_SelectOutputTrigger</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_TRGOSource_Update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//选择 TIMx 触发输出模式</span>    <span class="token comment">//TIMx： x 可以是 2， 3 或者 4，来选择 TIM 外设</span>    <span class="token comment">//TIM_TRGOSource：触发输出模式</span>    <span class="token comment">//TIM_TRGOSource_Update：使用更新事件作为触发输出</span>          <span class="token comment">///*///定时器1从模式设置///*/</span>    <span class="token function">TIM_SelectInputTrigger</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> TIM_TS_ITR2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//TIM3主连接TIM1,TIM_TS_ITR2</span>    <span class="token function">TIM_SelectSlaveMode</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span>TIM_SlaveMode_External1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等同 TIM1->SMCR|=0x07 //设置从模式寄存器 </span>    <span class="token comment">//   TIM2->SMCR|=0x07;        </span>              <span class="token function">TIM_OC1PreloadConfig</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_OCPreload_Enable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通道1使能 </span>    <span class="token function">TIM_OC2PreloadConfig</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_OCPreload_Enable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通道2使能 </span>    <span class="token function">TIM_ARRPreloadConfig</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//使能或者失能 TIMx 在 ARR 上的预装载寄存器                                                        </span><span class="token punctuation">&#125;</span> <span class="token comment">/***定时器1从模式***/</span><span class="token keyword">void</span> <span class="token function">TIM1_config</span><span class="token punctuation">(</span>u32 PulseNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span><span class="token comment">//TIMx初始化结构体</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span> <span class="token comment">//NVIC结构体</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_TIM1 <span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使能TIM1时钟</span>     TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> PulseNum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//设置自动重装载周期值</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_RepetitionCounter<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//tim1必须加这句不然没反应</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//      </span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">,</span>DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使能中断</span>     <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_3<span class="token punctuation">)</span><span class="token punctuation">;</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> TIM1_UP_IRQn <span class="token punctuation">;</span>  <span class="token comment">//全局中断          </span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>     <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token comment">//入口函数</span><span class="token keyword">void</span> <span class="token function">Pulse_output</span><span class="token punctuation">(</span>u32 Cycle<span class="token punctuation">,</span>u32 PulseNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">TIM1_config</span><span class="token punctuation">(</span>PulseNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM3_config</span><span class="token punctuation">(</span>Cycle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//中断函数</span><span class="token keyword">void</span> <span class="token function">TIM1_UP_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment">//tim的中断函数比较特殊，注意区别比其他多个UP</span><span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>     <span class="token comment">// TIM_IT_CC1</span>    <span class="token punctuation">&#123;</span>         <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清除中断标志位 </span>        <span class="token function">TIM_CtrlPWMOutputs</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//主输出使能</span>        <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭定时器 </span>        <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭定时器 </span>        <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//关闭        </span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定时器3主模式，定时器4从模式"><a href="#定时器3主模式，定时器4从模式" class="headerlink" title="/定时器3主模式，定时器4从模式/"></a>/<em>定时器3主模式，定时器4从模式</em>/</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//定时器3主模式,定时器4从模式</span><span class="token comment">//PWM输出</span><span class="token keyword">void</span> <span class="token function">TIM3_config</span><span class="token punctuation">(</span>u32 Cycle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span><span class="token comment">//GPIO设置，创建结构体</span>    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span><span class="token comment">//定时器设置结构体</span>    TIM_OCInitTypeDef  TIM_OCInitStructure<span class="token punctuation">;</span> <span class="token comment">//pwm波对应设置结构体</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//开启时钟</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//开启时钟</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_6<span class="token operator">|</span>GPIO_Pin_7<span class="token punctuation">;</span> <span class="token comment">//TIM_CH1和T</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>             <span class="token comment">//复用推挽输出</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>     TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> Cycle<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                                                       TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span><span class="token number">71</span><span class="token punctuation">;</span>                    <span class="token comment">//设置用来作为TIMx时钟频率除数的预分频值                                                     </span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> TIM_CKD_DIV1<span class="token punctuation">;</span>     <span class="token comment">//设置时钟分割：TDTS= Tck_tim            </span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span> <span class="token comment">//TIM向上计数模式</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OCMode <span class="token operator">=</span> TIM_OCMode_PWM1<span class="token punctuation">;</span>          <span class="token comment">//选择定时器模式：TIM脉冲宽度调制模式1       </span>    TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OutputState <span class="token operator">=</span> TIM_OutputState_Enable<span class="token punctuation">;</span> <span class="token comment">//比较输出使能</span>    TIM_OCInitStructure<span class="token punctuation">.</span>TIM_Pulse <span class="token operator">=</span> Cycle<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token comment">//设置待装入捕获寄存器的脉冲值                                   </span>    TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OCPolarity <span class="token operator">=</span> TIM_OCPolarity_Low<span class="token punctuation">;</span>      <span class="token comment">//输出极性       </span>    <span class="token function">TIM_OC1Init</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_OCInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//通道      </span>    <span class="token function">TIM_OC2Init</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_OCInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//通道   </span>        <span class="token comment">/*///定时器3主模式设置///*/</span>    <span class="token function">TIM_SelectMasterSlaveMode</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_MasterSlaveMode_Enable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置或者重置 TIMx 主/从模式</span>    <span class="token comment">//TIMx： x 可以是 2， 3 或者 4，来选择 TIM 外设</span>    <span class="token comment">//TIM_MasterSlaveMode：定时器主/从模式，TIM 主/从模式使能</span>        <span class="token function">TIM_SelectOutputTrigger</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_TRGOSource_Update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//选择 TIMx 触发输出模式</span>    <span class="token comment">//TIMx： x 可以是 2， 3 或者 4，来选择 TIM 外设</span>    <span class="token comment">//TIM_TRGOSource：触发输出模式</span>    <span class="token comment">//TIM_TRGOSource_Update：使用更新事件作为触发输出（TRG</span>            <span class="token comment">/*///定时器4从模式设置///*/</span>    <span class="token function">TIM_SelectInputTrigger</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> TIM_TS_ITR2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//TIM3主连接TIM4,TIM_TS_ITR2</span>    <span class="token function">TIM_SelectSlaveMode</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span>TIM_SlaveMode_External1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等同 TIM2->SMCR|=0x07 //设置从模式寄存器 </span>    <span class="token comment">//   TIM2->SMCR|=0x07;        </span>              <span class="token function">TIM_OC1PreloadConfig</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_OCPreload_Enable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通道1使能 </span>    <span class="token function">TIM_OC2PreloadConfig</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_OCPreload_Enable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通道2使能 </span>    <span class="token function">TIM_ARRPreloadConfig</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//使能或者失能 TIMx 在 ARR 上的预装载寄存器                                                        </span><span class="token punctuation">&#125;</span> <span class="token comment">/***定时器4从模式***/</span><span class="token keyword">void</span> <span class="token function">TIM4_config</span><span class="token punctuation">(</span>u32 PulseNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>     <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM4<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>     TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> PulseNum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//设置自动重装载周期值</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span>      <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//    TIM_SelectInputTrigger(TIM4, TIM_TS_ITR2);//TIM3主连接TIM4,TIM_TS_ITR2</span><span class="token comment">//    TIM_SelectSlaveMode(TIM4,TIM_SlaveMode_External1);// 等同 TIM2->SMCR|=0x07 //设置从模式寄存器 </span><span class="token comment">//    //   TIM2->SMCR|=0x07;        </span>        <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">,</span>DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_3<span class="token punctuation">)</span><span class="token punctuation">;</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> TIM4_IRQn<span class="token punctuation">;</span>  <span class="token comment">//全局中断      </span>        NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>     <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">Pulse_output</span><span class="token punctuation">(</span>u32 Cycle<span class="token punctuation">,</span>u32 PulseNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">TIM4_config</span><span class="token punctuation">(</span>PulseNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM3_config</span><span class="token punctuation">(</span>Cycle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">TIM4_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>     <span class="token comment">// TIM_IT_CC1</span>    <span class="token punctuation">&#123;</span>         <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清除中断标志位 </span>        <span class="token function">TIM_CtrlPWMOutputs</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//主输出使能</span>        <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭定时器 </span>        <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭定时器 </span>        <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定时器4主模式，定时器3从模式"><a href="#定时器4主模式，定时器3从模式" class="headerlink" title="/定时器4主模式，定时器3从模式/"></a>/<em><strong>定时器4主模式，定时器3从模式</strong></em>/</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//定时器4主模式,定时器3从模式</span><span class="token comment">//PWM输出</span><span class="token keyword">void</span> <span class="token function">TIM4_config</span><span class="token punctuation">(</span>u32 Cycle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span><span class="token comment">//GPIO设置，创建结构体</span>    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span><span class="token comment">//定时器设置结构体</span>    TIM_OCInitTypeDef  TIM_OCInitStructure<span class="token punctuation">;</span> <span class="token comment">//pwm波对应设置结构体</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM4<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//开启时钟</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB <span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//开启时钟</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_7<span class="token punctuation">;</span>                   <span class="token comment">//TIM2_CH2 PB7</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>             <span class="token comment">//复用推挽输出</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>     TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> Cycle<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                                                       TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span><span class="token number">71</span><span class="token punctuation">;</span>                    <span class="token comment">//设置用来作为TIMx时钟频率除数的预分频值                                                     </span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> TIM_CKD_DIV1<span class="token punctuation">;</span>     <span class="token comment">//设置时钟分割：TDTS= Tck_tim            </span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span> <span class="token comment">//TIM向上计数模式</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OCMode <span class="token operator">=</span> TIM_OCMode_PWM1<span class="token punctuation">;</span>          <span class="token comment">//选择定时器模式：TIM脉冲宽度调制模式1       </span>    TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OutputState <span class="token operator">=</span> TIM_OutputState_Enable<span class="token punctuation">;</span> <span class="token comment">//比较输出使能</span>    TIM_OCInitStructure<span class="token punctuation">.</span>TIM_Pulse <span class="token operator">=</span> Cycle<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token comment">//设置待装入捕获寄存器的脉冲值                                   </span>    TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OCPolarity <span class="token operator">=</span> TIM_OCPolarity_Low<span class="token punctuation">;</span>      <span class="token comment">//输出极性       </span>    <span class="token function">TIM_OC2Init</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_OCInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                              <span class="token function">TIM_SelectMasterSlaveMode</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> TIM_MasterSlaveMode_Enable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_SelectOutputTrigger</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> TIM_TRGOSource_Update<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">TIM_OC2PreloadConfig</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> TIM_OCPreload_Enable<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token function">TIM_ARRPreloadConfig</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                          <span class="token punctuation">&#125;</span>  <span class="token comment">/***定时器3从模式***/</span><span class="token keyword">void</span> <span class="token function">TIM3_config</span><span class="token punctuation">(</span>u32 PulseNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>     <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>     TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> PulseNum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//设置自动重装载周期值</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span>      <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">TIM_SelectInputTrigger</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_TS_ITR3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_SelectSlaveMode</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span>TIM_SlaveMode_External1 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等同 TIM2->SMCR|=0x07 //设置从模式寄存器 </span>    <span class="token comment">//   TIM2->SMCR|=0x07;            </span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">,</span>DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_3<span class="token punctuation">)</span><span class="token punctuation">;</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> TIM3_IRQn<span class="token punctuation">;</span>            NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>     <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">Pulse_output</span><span class="token punctuation">(</span>u32 Cycle<span class="token punctuation">,</span>u32 PulseNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">TIM3_config</span><span class="token punctuation">(</span>PulseNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM4_config</span><span class="token punctuation">(</span>Cycle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">TIM3_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>     <span class="token comment">// TIM_IT_CC1</span>    <span class="token punctuation">&#123;</span>         <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清除中断标志位 </span>        <span class="token function">TIM_CtrlPWMOutputs</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//主输出使能</span>        <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭定时器 </span>        <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭定时器 </span>        <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 步进电机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对内聚和耦合的理解</title>
      <link href="/2023/02/15/%E5%AF%B9%E5%86%85%E8%81%9A%E5%92%8C%E8%80%A6%E5%90%88%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2023/02/15/%E5%AF%B9%E5%86%85%E8%81%9A%E5%92%8C%E8%80%A6%E5%90%88%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是模块？"><a href="#什么是模块？" class="headerlink" title="什么是模块？"></a>什么是模块？</h2><p>模块就是从逻辑上将系统分解为更细微的部分， 分而治之， 复杂问题拆解为若干简单问题， 逐个解决。</p><p>耦合主要描述模块之间的关系， 内聚主要描述模块内部。 模块的粒度可大可小， 可以是函数， 类， 功能块等等</p><h2 id="耦合？"><a href="#耦合？" class="headerlink" title="耦合？"></a>耦合？</h2><p>模块之间存在依赖， 导致改动可能会互相影响， 关系越紧密， 耦合越强， 模块独立性越差。</p><p>比如模块A直接操作了模块B中数据， 则视为强耦合， 若A只是通过数据与模块B交互， 则视为弱耦合。</p><p>独立的模块便于扩展， 维护， 写单元测试， 如果模块之间重重依赖， 会极大降低开发效率。</p><p><img src="/2023/02/15/%E5%AF%B9%E5%86%85%E8%81%9A%E5%92%8C%E8%80%A6%E5%90%88%E7%9A%84%E7%90%86%E8%A7%A3/oe54ueazta.gif" alt="img"></p><h2 id="内聚？"><a href="#内聚？" class="headerlink" title="内聚？"></a>内聚？</h2><p>模块内部的元素， 关联性越强， 则内聚越高， 模块单一性更强。 一个模块应当尽可能独立完成某个功能，</p><p>如果有各种场景需要被引入到当前模块， 代码质量将变得非常脆弱， 这种情况建议拆分为多个模块。</p><p>低内聚的模块代码， 不管是维护， 扩展还是重构都相当麻烦， 难以下手。</p><p><img src="/2023/02/15/%E5%AF%B9%E5%86%85%E8%81%9A%E5%92%8C%E8%80%A6%E5%90%88%E7%9A%84%E7%90%86%E8%A7%A3/j6lrii18j0.gif" alt="img"></p><h2 id="接口设计原则"><a href="#接口设计原则" class="headerlink" title="接口设计原则"></a>接口设计原则</h2><p>好的接口应当满足设计模式六大原则， 很多设计模式， 框架都是基于高内聚低耦合这个出发点的。</p><ul><li>单一职责原则：一个类只负责一个功能领域中的相应职责。</li><li>开闭原则：一个软件实体应当对扩展开放，对修改关闭。</li><li>里氏代换原则：所有引用基类（父类）的地方必须能透明地使用其子类的对象。</li><li>依赖倒转原则：抽象不应该依赖于细节， 细节应当依赖于抽象。 换言之， 要针对接口编程， 而不是针对实现编程。</li><li>接口隔离原则：使用多个专门的接口， 而不使用单一的总接口， 即客户端不应该依赖那些它不需要的接口。</li><li>迪米特法则： 一个软件实体应当尽可能少地与其他实体发生相互作用， 例如外观模式， 对外暴露统一接口。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 软件工程知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪吃蛇终版</title>
      <link href="/2023/02/15/%E8%B4%AA%E5%90%83%E8%9B%87%E7%BB%88%E7%89%88/"/>
      <url>/2023/02/15/%E8%B4%AA%E5%90%83%E8%9B%87%E7%BB%88%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/02/15/%E8%B4%AA%E5%90%83%E8%9B%87%E7%BB%88%E7%89%88/image-20230215145433086.png" alt="image-20230215145433086"></p><p>游戏画面，自己玩玩还可以。贪吃蛇的基本功能都已经实现。地图可能太大了点，不撞墙基本上是死不了了。</p><p><img src="/2023/02/15/%E8%B4%AA%E5%90%83%E8%9B%87%E7%BB%88%E7%89%88/image-20230215145623874.png" alt="image-20230215145623874"></p><p>死亡的提示 在上方 当撞到墙壁的时候判定为死亡，至于自己吃自己的情况没有写。</p><p>大概思路就是对蛇这个链表进行遍历去判断如果蛇头的位置和蛇身子的位置有重和的情况那么判断自己吃自己，死亡。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;iostream&gt;#include &lt;windows.h&gt;#include &lt;conio.h&gt;#include &lt;ctime&gt;using namespace std;#define width  160#define height  40int init_len &#x3D; 3;void GameStart() &#123;    system(&quot;mode con cols&#x3D;180 lines&#x3D;50&quot;); &#x2F;&#x2F;设置窗口命令&#125;void Welcome() &#123;    printf(&quot;\n\n\n\n\n\t\t\t\t\t\t&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&quot;);    printf(&quot;\t\t\t\t\t\t&#x3D;&#x3D;      欢迎来到Wyt贪吃蛇       &#x3D;&#x3D;\n&quot;);    printf(&quot;\n\n\n\n\n\n\n\n\n\t\t\t\t\t\t&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&quot;);    &#x2F;&#x2F;暂停    system(&quot;pause&quot;);    &#x2F;&#x2F;清屏    system(&quot;cls&quot;);&#125;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F; \param x  x坐标&#x2F;&#x2F;&#x2F; \param y  y坐标&#x2F;&#x2F;设置光标位置void gotoxy(int x, int y) &#123;    COORD pos &#x3D; &#123;static_cast&lt;SHORT&gt;(x), static_cast&lt;SHORT&gt;(y)&#125;;    HANDLE hOut &#x3D; GetStdHandle(STD_OUTPUT_HANDLE);    SetConsoleCursorPosition(hOut, pos);&#125;&#x2F;&#x2F;创建地图void Create_Map() &#123;    for (int i &#x3D; 2; i &lt;&#x3D; width; i +&#x3D; 2) &#123;        gotoxy(i, 3);        printf(&quot;■&quot;);        gotoxy(i, height);        printf(&quot;■&quot;);    &#125;    for (int j &#x3D; 3; j &lt; height; j++) &#123;        gotoxy(2, j);        printf(&quot;■&quot;);        gotoxy(width, j);        printf(&quot;■&quot;);    &#125;&#125;&#x2F;&#x2F;设置蛇身子 使用链表实现typedef struct SNAKE &#123;    int x;    int y;    struct SNAKE *next;&#125; Snake;&#x2F;&#x2F;初始化蛇Snake *g_head &#x3D; nullptr;int snake_len &#x3D; 0; &#x2F;&#x2F;蛇的长度void InitSnake() &#123;    Snake *temp &#x3D; (Snake *) malloc(sizeof(Snake)); &#x2F;&#x2F;定义蛇初始位置 最左边的点    temp-&gt;x &#x3D; 20;    temp-&gt;y &#x3D; 15;    temp-&gt;next &#x3D; nullptr;    g_head &#x3D; temp;  &#x2F;&#x2F;将蛇尾巴赋值给g_head    for (int i &#x3D; 1; i &lt;&#x3D; init_len; i++) &#123;        Snake *p &#x3D; (Snake *) malloc(sizeof(Snake));        p-&gt;x &#x3D; 20 + 2 * i;        p-&gt;y &#x3D; 15;        p-&gt;next &#x3D; nullptr;        temp-&gt;next &#x3D; p; &#x2F;&#x2F;将指针向右传        temp &#x3D; p; &#x2F;&#x2F;    &#125;    &#x2F;&#x2F;输出显示    temp &#x3D; g_head;    while (temp !&#x3D; nullptr) &#123;        gotoxy(temp-&gt;x, temp-&gt;y);        printf(&quot;■&quot;);        temp &#x3D; temp-&gt;next;    &#125;&#125;int foodx, foody;int food_flag &#x3D; 0;void sjcsswhs()      &#x2F;&#x2F;随机产生一个食物&#123;    srand(time(NULL));    foodx &#x3D; rand() % (width - 3) + 5; &#x2F;&#x2F;从5 到 width-3 之间的任意一个数    while (foodx % 2) &#123;        foodx &#x3D; rand() % (width - 3) + 5; &#x2F;&#x2F;从5 到 width-3 之间的任意一个数    &#125;    foody &#x3D; rand() % (height - 1) + 5;    gotoxy(foodx, foody);    printf(&quot;★&quot;);    food_flag &#x3D; 1;&#125;void MoveSnake(int dir) &#123;    &#x2F;&#x2F;得到蛇的链表    Snake *p &#x3D; g_head;    &#x2F;&#x2F;得到蛇头  链表尾    while (p-&gt;next !&#x3D; nullptr &amp;&amp; p !&#x3D; nullptr) &#123;        p &#x3D; p-&gt;next;    &#125;    Snake *temp &#x3D; (Snake *) malloc(sizeof(Snake));    temp-&gt;x &#x3D; p-&gt;x;    temp-&gt;y &#x3D; p-&gt;y - 1;    temp-&gt;next &#x3D; nullptr;    if (dir &#x3D;&#x3D; 72) &#123;        temp-&gt;x &#x3D; p-&gt;x;        temp-&gt;y &#x3D; p-&gt;y - 1;    &#125; else if (dir &#x3D;&#x3D; 80) &#123;        temp-&gt;x &#x3D; p-&gt;x;        temp-&gt;y &#x3D; p-&gt;y + 1;    &#125; else if (dir &#x3D;&#x3D; 75) &#123;        temp-&gt;x &#x3D; p-&gt;x - 2;        temp-&gt;y &#x3D; p-&gt;y;    &#125; else if (dir &#x3D;&#x3D; 77) &#123;        temp-&gt;x &#x3D; p-&gt;x + 2;        temp-&gt;y &#x3D; p-&gt;y;    &#125;    p-&gt;next &#x3D; temp;    gotoxy(temp-&gt;x, temp-&gt;y);    if (snake_len &lt;&#x3D; 5)        printf(&quot;♀&quot;);    else if (snake_len &lt; 7)        printf(&quot;蛇&quot;);    else if (snake_len &lt; 10)        printf(&quot;▦&quot;);    else        printf(&quot;■&quot;);    gotoxy(g_head-&gt;x, g_head-&gt;y);    printf(&quot;  &quot;);    &#x2F;&#x2F;释放蛇尾    temp &#x3D; g_head-&gt;next;    delete g_head;    g_head &#x3D; temp;&#125;&#x2F;&#x2F;得到蛇的长度void Change_Color() &#123;    int len &#x3D; 0;    Snake *p &#x3D; g_head;    while (p-&gt;next !&#x3D; nullptr) &#123;        p &#x3D; p-&gt;next;        len++;    &#125;    snake_len &#x3D; len; &#x2F;&#x2F;得到蛇的具体数值    gotoxy(90, 1);    printf(&quot;现在的分数为 %d&quot;, len - 3);    gotoxy(90, 2);    printf(&quot;现在的长度为 %d&quot;, len + 1);&#125;&#x2F;&#x2F;运行游戏 蛇动起来void RunGame() &#123;    char ch &#x3D; 0;    int dir1 &#x3D; 0;    while (1) &#123;        &#x2F;&#x2F;刷新食物        if (food_flag &#x3D;&#x3D; 0) &#123;            sjcsswhs();        &#125;        Snake *p &#x3D; g_head;        while (p-&gt;next !&#x3D; nullptr) &#123; &#x2F;&#x2F;找到g_head的最后一个            p &#x3D; p-&gt;next; &#x2F;&#x2F;链表头        &#125;        if (p-&gt;x &#x3D;&#x3D; foodx &amp;&amp; p-&gt;y &#x3D;&#x3D; foody) &#123;   &#x2F;&#x2F;吃到食物了            food_flag &#x3D; 0; &#x2F;&#x2F;实物标志置0 重新生成实物            &#x2F;&#x2F;长度变化 +1            Snake *temp &#x3D; (Snake *) malloc(sizeof(Snake)); &#x2F;&#x2F;重新开辟地址            temp-&gt;x &#x3D; foodx;            temp-&gt;y &#x3D; foody;            temp-&gt;next &#x3D; nullptr;            p-&gt;next &#x3D; temp;        &#125;        Change_Color();        &#x2F;&#x2F;判断是否有输出        if (_kbhit()) &#123;            &#x2F;&#x2F;得到输入            ch &#x3D; getch();            switch (ch) &#123;                &#x2F;&#x2F;控制方向                case 72:                    dir1 &#x3D; 72;                    break; &#x2F;&#x2F;上                case 75:                    dir1 &#x3D; 75;                    break; &#x2F;&#x2F;左                case 77:                    dir1 &#x3D; 77;                    break; &#x2F;&#x2F;右                case 80:                    dir1 &#x3D; 80;                    break; &#x2F;&#x2F;下            &#125;        &#125;        &#x2F;&#x2F;移动蛇        MoveSnake(dir1);        Sleep(100);&#x2F;&#x2F;            &#x2F;&#x2F;判断死亡 如果蛇的头碰到墙壁则判定为死亡        Snake *snake &#x3D; g_head;        while (snake-&gt;next !&#x3D; nullptr) &#123;            snake &#x3D; snake-&gt;next; &#x2F;&#x2F;找到蛇头        &#125;        if (snake-&gt;x &#x3D;&#x3D; 4 || snake-&gt;x &#x3D;&#x3D; 159 || snake-&gt;y &#x3D;&#x3D; 40 || snake-&gt;y &#x3D;&#x3D; 4)            break;    &#125;    gotoxy(0, 0);    printf(&quot;游戏结束 死了死了死了死了死了死了死了死了死了死了！！！！！！！！！！！！！！！！！！！&quot;);&#125;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F; \param ForeColor  printf的字体的颜色&#x2F;&#x2F;&#x2F; \param BackGroundColor  图像的背景色&#x2F;&#x2F;背景颜色：&#x2F;&#x2F;0 黑色&#x2F;&#x2F;1 蓝色&#x2F;&#x2F;2 绿色&#x2F;&#x2F;3 湖蓝色&#x2F;&#x2F;4 红色&#x2F;&#x2F;5 紫色&#x2F;&#x2F;6 黄色&#x2F;&#x2F;7 白色&#x2F;&#x2F;8 灰色&#x2F;&#x2F;9 淡蓝色void BackGround(unsigned int ForeColor, unsigned int BackGroundColor) &#123;    HANDLE handle &#x3D; GetStdHandle(STD_OUTPUT_HANDLE);    SetConsoleTextAttribute(handle, ForeColor + BackGroundColor * 0x10);&#125;int main() &#123;    GameStart(); &#x2F;&#x2F;游戏开始    Welcome(); &#x2F;&#x2F;欢迎界面    BackGround(5, 0);    Create_Map();    InitSnake();    RunGame();    getchar();    getchar();    return 1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 游戏开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪吃蛇--不会增加长度版本</title>
      <link href="/2023/02/14/%E8%B4%AA%E5%90%83%E8%9B%87-%E4%B8%8D%E4%BC%9A%E5%A2%9E%E5%8A%A0%E9%95%BF%E5%BA%A6%E7%89%88%E6%9C%AC/"/>
      <url>/2023/02/14/%E8%B4%AA%E5%90%83%E8%9B%87-%E4%B8%8D%E4%BC%9A%E5%A2%9E%E5%8A%A0%E9%95%BF%E5%BA%A6%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>突发奇想 ，想做一个游戏。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;iostream&gt;#include &lt;windows.h&gt;#include &lt;conio.h&gt;#include &lt;ctime&gt;using namespace std;#define width  160#define height  40void GameStart()&#123;    system(&quot;mode con cols&#x3D;180 lines&#x3D;50&quot;); &#x2F;&#x2F;设置窗口命令&#125;void Welcome()&#123;    printf(&quot;\n\n\n\n\n\t\t\t\t\t\t&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&quot;);    printf(&quot;\t\t\t\t\t\t&#x3D;&#x3D;      欢迎来到Wyt贪吃蛇       &#x3D;&#x3D;\n&quot;);    printf(&quot;\n\n\n\n\n\n\n\n\n\t\t\t\t\t\t&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&quot;);    &#x2F;&#x2F;暂停    system(&quot;pause&quot;);    &#x2F;&#x2F;清屏    system(&quot;cls&quot;);&#125;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F; \param x  x坐标&#x2F;&#x2F;&#x2F; \param y  y坐标&#x2F;&#x2F;设置光标位置void gotoxy(int x, int y)&#123;    COORD pos &#x3D; &#123;static_cast&lt;SHORT&gt;(x),static_cast&lt;SHORT&gt;(y)&#125;;    HANDLE hOut &#x3D; GetStdHandle(STD_OUTPUT_HANDLE);    SetConsoleCursorPosition(hOut,pos);&#125;&#x2F;&#x2F;创建地图void Create_Map()&#123;    for(int i &#x3D; 2; i &lt;&#x3D; width; i +&#x3D; 2)&#123;        gotoxy(i, 3);        printf(&quot;■&quot;);        gotoxy(i,height);        printf(&quot;■&quot;);    &#125;    for(int j&#x3D;3; j &lt; height; j++)&#123;        gotoxy(2, j);        printf(&quot;■&quot;);        gotoxy(width, j);        printf(&quot;■&quot;);    &#125;&#125;&#x2F;&#x2F;设置蛇身子 使用链表实现typedef struct SNAKE&#123;    int x;    int y;    struct SNAKE *next;&#125;Snake;&#x2F;&#x2F;初始化蛇Snake *g_head &#x3D; nullptr;void InitSnake()&#123;    Snake *temp &#x3D;  (Snake*)malloc(sizeof(Snake)); &#x2F;&#x2F;定义蛇初始位置 最左边的点        temp-&gt;x &#x3D; 20;        temp-&gt;y &#x3D; 15;        temp-&gt;next &#x3D; nullptr;    g_head &#x3D; temp;  &#x2F;&#x2F;将蛇尾巴赋值给g_head    for(int i &#x3D; 1; i &lt;&#x3D; 3; i++)&#123;        Snake  *p &#x3D; (Snake*)malloc(sizeof(Snake));        p-&gt;x &#x3D; 20 + 2 * i;        p-&gt;y &#x3D; 15;        p-&gt;next &#x3D; nullptr;        temp-&gt;next &#x3D; p; &#x2F;&#x2F;将指针向右传        temp &#x3D; p; &#x2F;&#x2F;    &#125;    &#x2F;&#x2F;输出显示    temp &#x3D; g_head;    while(temp !&#x3D; nullptr)&#123;        gotoxy(temp-&gt;x,temp-&gt;y);        printf(&quot;■&quot;);        temp &#x3D; temp-&gt;next;    &#125;&#125;void MoveSnake(int dir)&#123;        &#x2F;&#x2F;得到蛇的链表        Snake *p &#x3D; g_head;        &#x2F;&#x2F;得到蛇头  链表尾        while (p-&gt;next !&#x3D; nullptr &amp;&amp; p !&#x3D; nullptr) &#123;            p &#x3D; p-&gt;next;        &#125;        &#x2F;&#x2F;添加一个新蛇头        Snake *temp &#x3D;(Snake*)malloc(sizeof(Snake));        temp-&gt;x &#x3D; p-&gt;x;        temp-&gt;y &#x3D; p-&gt;y - 1;        temp-&gt;next &#x3D; nullptr;        if(dir &#x3D;&#x3D; 72)&#123;            temp-&gt;x &#x3D; p-&gt;x;            temp-&gt;y &#x3D; p-&gt;y - 1;        &#125;        else if(dir &#x3D;&#x3D; 80)&#123;            temp-&gt;x &#x3D; p-&gt;x;            temp-&gt;y &#x3D; p-&gt;y + 1;        &#125;        else if(dir &#x3D;&#x3D; 75)&#123;            temp-&gt;x &#x3D; p-&gt;x - 2;            temp-&gt;y &#x3D; p-&gt;y;        &#125;        else if(dir &#x3D;&#x3D; 77)&#123;            temp-&gt;x &#x3D; p-&gt;x + 2;            temp-&gt;y &#x3D; p-&gt;y;        &#125;        p-&gt;next &#x3D; temp;        gotoxy(temp-&gt;x, temp-&gt;y);        printf(&quot;■&quot;);        gotoxy(g_head-&gt;x, g_head-&gt;y);        printf(&quot;  &quot;);        &#x2F;&#x2F;释放蛇尾        temp &#x3D; g_head-&gt;next;        delete g_head;        g_head &#x3D; temp;&#125;int foodx,foody;int food_flag &#x3D; 0;void sjcsswhs()             &#x2F;&#x2F;随机产生一个食物&#123;    srand(time(NULL));    foodx &#x3D; rand() % (width - 4) + 2;       &#x2F;&#x2F;使用宏运算随机数最大值需要加括号    while (foodx % 2)                       &#x2F;&#x2F;如果食物的x坐标不是偶数，再获取一个x坐标    &#123;        foodx &#x3D; rand() % (width - 4) + 2;   &#x2F;&#x2F;宽度    &#125;    foody &#x3D; rand() % (height - 7) + 3;      &#x2F;&#x2F;高度    gotoxy(foodx, foody);    printf(&quot;★&quot;);    food_flag &#x3D; 1;&#125;&#x2F;&#x2F;运行游戏 蛇动起来void RunGame()&#123;    char ch &#x3D; 0;    int dir1 &#x3D; 0;    while(1)&#123;        &#x2F;&#x2F;判断是否有输出        if(_kbhit())&#123;            &#x2F;&#x2F;得到输入            ch &#x3D; getch();           switch(ch)&#123;               &#x2F;&#x2F;控制方向               case 72:                    dir1 &#x3D; 72;                   break; &#x2F;&#x2F;上               case 75:                   dir1 &#x3D; 75;                   break; &#x2F;&#x2F;左               case 77:                   dir1 &#x3D; 77;                   break; &#x2F;&#x2F;右               case 80:                   dir1 &#x3D; 80;                   break; &#x2F;&#x2F;下           &#125;        &#125;        if(food_flag &#x3D;&#x3D; 0) &#123;            sjcsswhs();        &#125;        else&#123;            Snake *p &#x3D; g_head;            &#x2F;&#x2F;得到蛇头  链表尾            while (p-&gt;next !&#x3D; nullptr &amp;&amp; p !&#x3D; nullptr) &#123;                p &#x3D; p-&gt;next;                if(p-&gt;x &#x3D;&#x3D; foodx &amp;&amp; p-&gt;y &#x3D;&#x3D; foody)&#123;                    food_flag &#x3D; 0;                &#125;            &#125;        &#125;        &#x2F;&#x2F;移动蛇        MoveSnake(dir1);        Sleep(300);    &#125;&#125;int main()&#123;    GameStart(); &#x2F;&#x2F;游戏开始    Welcome(); &#x2F;&#x2F;欢迎界面    Create_Map();    InitSnake();    RunGame();    getchar();    getchar();    return 1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 游戏开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FreeRTOS学习（2）-创建和删除任务-静态方法</title>
      <link href="/2023/02/10/FreeRTOS%E5%AD%A6%E4%B9%A0%EF%BC%882%EF%BC%89-%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%A0%E9%99%A4%E4%BB%BB%E5%8A%A1-%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/"/>
      <url>/2023/02/10/FreeRTOS%E5%AD%A6%E4%B9%A0%EF%BC%882%EF%BC%89-%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%A0%E9%99%A4%E4%BB%BB%E5%8A%A1-%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> FreeRTOS学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32F1_SPI使用</title>
      <link href="/2023/02/09/STM32F1-SPI%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/02/09/STM32F1-SPI%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在做小车过程中，由于需要控制4个步进电机，4个直流电机，步进电机采用主从定时器的方式（比较精确）控制，那么一个步进电机则需要2个定时器资源，但是一个<code>stm32精英版</code>单片机也就8个定时器，不可能全都用来控制步进电机，所以外加了两个<code>stm32c8t6</code>单片机来完成对步进电机的控制，而直流电机则采用高级定时器的<code>pwm</code>功能，很简单的完成对直流电机的控制。而它们之间的通信选择使用<code>主从spi通信</code>的方式来完成。<code>精英版</code>作为<code>spi</code>主机来控制两个<code>c8t6从机</code>完成整套系统的驱动控制。大概思路就是这样。</p><p>他们之间的配置简单做个记录</p><p><img src="/2023/02/09/STM32F1-SPI%E4%BD%BF%E7%94%A8/image-20230209220615241.png" alt="image-20230209220615241"></p><p><img src="/2023/02/09/STM32F1-SPI%E4%BD%BF%E7%94%A8/image-20230209220627759.png" alt="image-20230209220627759"></p><h5 id="主机控制-SPI-1"><a href="#主机控制-SPI-1" class="headerlink" title="主机控制 SPI_1"></a>主机控制 <code>SPI_1</code></h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SPI1_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化SPI口</span><span class="token keyword">void</span> <span class="token function">SPI1_SetSpeed</span><span class="token punctuation">(</span>u8 SPI_BaudRatePrescaler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置SPI速度   </span>u8 <span class="token function">SPI1_ReadWriteByte</span><span class="token punctuation">(</span>u8 TxData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//SPI总线读写一个字节</span>SPI_InitTypeDef  SPI_InitStructure<span class="token punctuation">;</span><span class="token comment">//由于前两个函数都用到了SPI所以就在外面定义</span><span class="token keyword">void</span> <span class="token function">SPI1_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span><span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token operator">|</span>RCC_APB2Periph_SPI1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_5 <span class="token operator">|</span>GPIO_Pin_6<span class="token operator">|</span> GPIO_Pin_7<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token comment">//50MHz</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_Direction <span class="token operator">=</span> SPI_Direction_2Lines_FullDuplex<span class="token punctuation">;</span>  <span class="token comment">//设置SPI单向或者双向的数据模式:SPI设置为双线双向全双工</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_Mode <span class="token operator">=</span> SPI_Mode_Master<span class="token punctuation">;</span><span class="token comment">//设置SPI工作模式:设置为主SPI</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_DataSize <span class="token operator">=</span> SPI_DataSize_8b<span class="token punctuation">;</span><span class="token comment">//设置SPI的数据大小:SPI发送接收8位帧结构</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_CPOL <span class="token operator">=</span> SPI_CPOL_High<span class="token punctuation">;</span><span class="token comment">//选择了串行时钟的稳态:时钟悬空高</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_CPHA <span class="token operator">=</span> SPI_CPHA_2Edge<span class="token punctuation">;</span><span class="token comment">//数据捕获于第二个时钟沿</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_NSS <span class="token operator">=</span> SPI_NSS_Soft<span class="token punctuation">;</span><span class="token comment">//NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理:内部NSS信号有SSI位控制</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_BaudRatePrescaler <span class="token operator">=</span> SPI_BaudRatePrescaler_256<span class="token punctuation">;</span><span class="token comment">//定义波特率预分频的值:波特率预分频值为256</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_FirstBit <span class="token operator">=</span> SPI_FirstBit_MSB<span class="token punctuation">;</span><span class="token comment">//指定数据传输从MSB位还是LSB位开始:数据传输从MSB位开始</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_CRCPolynomial <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token comment">//CRC值计算的多项式</span><span class="token function">SPI_Init</span><span class="token punctuation">(</span>SPI1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>SPI_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//根据SPI_InitStruct中指定的参数初始化外设SPIx寄存器</span> <span class="token function">SPI_Cmd</span><span class="token punctuation">(</span>SPI1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使能SPI外设</span> <span class="token comment">/*至于你们看到的有些程序这里写 SPI1_ReadWriteByte(0xff); 这里加不加都无所谓的。 */</span><span class="token punctuation">&#125;</span> <span class="token comment">//SPI 速度设置函数</span><span class="token comment">//SpeedSet:</span><span class="token comment">//SPI_BaudRatePrescaler_2   2分频   (SPI 36M@sys 72M)</span><span class="token comment">//SPI_BaudRatePrescaler_8   8分频   (SPI 9M@sys 72M)</span><span class="token comment">//SPI_BaudRatePrescaler_16  16分频  (SPI 4.5M@sys 72M)</span><span class="token comment">//SPI_BaudRatePrescaler_256 256分频 (SPI 281.25K@sys 72M)</span>  <span class="token keyword">void</span> <span class="token function">SPI1_SetSpeed</span><span class="token punctuation">(</span>u8 SPI_BaudRatePrescaler<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">assert_param</span><span class="token punctuation">(</span><span class="token function">IS_SPI_BAUDRATE_PRESCALER</span><span class="token punctuation">(</span>SPI_BaudRatePrescaler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断有效性</span>SPI1<span class="token operator">-></span>CR1<span class="token operator">&amp;=</span><span class="token number">0XFFC7</span><span class="token punctuation">;</span><span class="token comment">//位3-5清零，用来设置波特率</span>SPI1<span class="token operator">-></span>CR1<span class="token operator">|=</span>SPI_BaudRatePrescaler<span class="token punctuation">;</span><span class="token comment">//设置SPI1速度 </span><span class="token function">SPI_Cmd</span><span class="token punctuation">(</span>SPI1<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使能SPI1</span><span class="token punctuation">&#125;</span> <span class="token comment">//SPIx 读写一个字节</span><span class="token comment">//TxData:要写入的字节</span><span class="token comment">//返回值:读取到的字节</span>u8 <span class="token function">SPI1_ReadWriteByte</span><span class="token punctuation">(</span>u8 TxData<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">SPI_I2S_GetFlagStatus</span><span class="token punctuation">(</span>SPI1<span class="token punctuation">,</span> SPI_I2S_FLAG_TXE<span class="token punctuation">)</span> <span class="token operator">==</span> RESET<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//等待发送区空  </span><span class="token function">SPI_I2S_SendData</span><span class="token punctuation">(</span>SPI1<span class="token punctuation">,</span> TxData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过外设SPIx发送一个byte  数据</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">SPI_I2S_GetFlagStatus</span><span class="token punctuation">(</span>SPI1<span class="token punctuation">,</span> SPI_I2S_FLAG_RXNE<span class="token punctuation">)</span> <span class="token operator">==</span> RESET<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//等待接收完一个byte  </span> <span class="token keyword">return</span> <span class="token function">SPI_I2S_ReceiveData</span><span class="token punctuation">(</span>SPI1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回通过SPIx最近接收的数据</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="从机控制SPI-1"><a href="#从机控制SPI-1" class="headerlink" title="从机控制SPI_1"></a>从机控制<code>SPI_1</code></h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SPI1_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化SPI口</span><span class="token keyword">void</span> <span class="token function">SPI1_SetSpeed</span><span class="token punctuation">(</span>u8 SpeedSet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置SPI速度   </span>u8 <span class="token function">SPI1_ReadWriteByte</span><span class="token punctuation">(</span>u8 TxData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//SPI总线读写一个字节</span><span class="token comment">//以下是SPI模块的初始化代码，配置成主机模式，访问SD Card/W25X16/24L01/JF24C  </span><span class="token comment">//SPI口初始化</span><span class="token comment">//这里针是对SPI1的初始化</span>SPI_InitTypeDef  SPI_InitStructure<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">SPI1_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>  <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token operator">|</span>RCC_APB2Periph_SPI1<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span> GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_5 <span class="token operator">|</span>GPIO_Pin_6<span class="token operator">|</span> GPIO_Pin_7<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token comment">//100MHz</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置PA4成为从机SPI通信的片选管脚，我们在初始最后给他变成0就可以了，这样表示选中为从机</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span>  GPIO_Pin_4<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token comment">//100MHz</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span>GPIO_Pin_4<span class="token punctuation">)</span><span class="token punctuation">;</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_Direction <span class="token operator">=</span> SPI_Direction_2Lines_FullDuplex<span class="token punctuation">;</span>  <span class="token comment">//设置SPI单向或者双向的数据模式:SPI设置为双线双向全双工</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_Mode <span class="token operator">=</span> SPI_Mode_Slave<span class="token punctuation">;</span><span class="token comment">//设置SPI工作模式:设置为主SPI</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_DataSize <span class="token operator">=</span> SPI_DataSize_8b<span class="token punctuation">;</span><span class="token comment">//设置SPI的数据大小:SPI发送接收8位帧结构</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_CPOL <span class="token operator">=</span> SPI_CPOL_High<span class="token punctuation">;</span><span class="token comment">//选择了串行时钟的稳态:时钟悬空高</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_CPHA <span class="token operator">=</span> SPI_CPHA_2Edge<span class="token punctuation">;</span><span class="token comment">//数据捕获于第二个时钟沿</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_NSS <span class="token operator">=</span> SPI_NSS_Soft<span class="token punctuation">;</span><span class="token comment">//NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理:内部NSS信号有SSI位控制</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_BaudRatePrescaler <span class="token operator">=</span> SPI_BaudRatePrescaler_256<span class="token punctuation">;</span><span class="token comment">//定义波特率预分频的值:波特率预分频值为256</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_FirstBit <span class="token operator">=</span> SPI_FirstBit_MSB<span class="token punctuation">;</span><span class="token comment">//指定数据传输从MSB位还是LSB位开始:数据传输从MSB位开始</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_CRCPolynomial <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token comment">//CRC值计算的多项式</span><span class="token function">SPI_Init</span><span class="token punctuation">(</span>SPI1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>SPI_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//根据SPI_InitStruct中指定的参数初始化外设SPIx寄存器</span> <span class="token function">SPI_Cmd</span><span class="token punctuation">(</span>SPI1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使能SPI外设</span>  <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span>GPIO_Pin_4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">//SPIx 读写一个字节</span><span class="token comment">//TxData:要写入的字节</span><span class="token comment">//返回值:读取到的字节</span>u8 <span class="token function">SPI1_ReadWriteByte</span><span class="token punctuation">(</span>u8 TxData<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">SPI_I2S_GetFlagStatus</span><span class="token punctuation">(</span>SPI1<span class="token punctuation">,</span> SPI_I2S_FLAG_TXE<span class="token punctuation">)</span> <span class="token operator">==</span> RESET<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//等待发送区空  </span><span class="token function">SPI_I2S_SendData</span><span class="token punctuation">(</span>SPI1<span class="token punctuation">,</span> TxData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过外设SPIx发送一个byte  数据</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">SPI_I2S_GetFlagStatus</span><span class="token punctuation">(</span>SPI1<span class="token punctuation">,</span> SPI_I2S_FLAG_RXNE<span class="token punctuation">)</span> <span class="token operator">==</span> RESET<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//等待接收完一个byte  </span><span class="token keyword">return</span> <span class="token function">SPI_I2S_ReceiveData</span><span class="token punctuation">(</span>SPI1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回通过SPIx最近接收的数据  </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="主机控制SPI-2"><a href="#主机控制SPI-2" class="headerlink" title="主机控制SPI_2"></a>主机控制SPI_2</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SPI2_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>  SPI_InitTypeDef  SPI_InitStructure<span class="token punctuation">;</span><span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//PORTB时钟使能 </span><span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_SPI2<span class="token punctuation">,</span>  ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//SPI2时钟使能 </span> GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_13 <span class="token operator">|</span> GPIO_Pin_14 <span class="token operator">|</span> GPIO_Pin_15<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>  <span class="token comment">//PB13/14/15复用推挽输出 </span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化GPIOB</span> <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span>GPIO_Pin_13<span class="token operator">|</span>GPIO_Pin_14<span class="token operator">|</span>GPIO_Pin_15<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//PB13/14/15上拉</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_Direction <span class="token operator">=</span> SPI_Direction_2Lines_FullDuplex<span class="token punctuation">;</span>  <span class="token comment">//设置SPI单向或者双向的数据模式:SPI设置为双线双向全双工</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_Mode <span class="token operator">=</span> SPI_Mode_Master<span class="token punctuation">;</span><span class="token comment">//设置SPI工作模式:设置为主SPI</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_DataSize <span class="token operator">=</span> SPI_DataSize_8b<span class="token punctuation">;</span><span class="token comment">//设置SPI的数据大小:SPI发送接收8位帧结构</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_CPOL <span class="token operator">=</span> SPI_CPOL_High<span class="token punctuation">;</span><span class="token comment">//串行同步时钟的空闲状态为高电平</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_CPHA <span class="token operator">=</span> SPI_CPHA_2Edge<span class="token punctuation">;</span><span class="token comment">//串行同步时钟的第二个跳变沿（上升或下降）数据被采样</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_NSS <span class="token operator">=</span> SPI_NSS_Soft<span class="token punctuation">;</span><span class="token comment">//NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理:内部NSS信号有SSI位控制</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_BaudRatePrescaler <span class="token operator">=</span> SPI_BaudRatePrescaler_256<span class="token punctuation">;</span><span class="token comment">//定义波特率预分频的值:波特率预分频值为256</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_FirstBit <span class="token operator">=</span> SPI_FirstBit_MSB<span class="token punctuation">;</span><span class="token comment">//指定数据传输从MSB位还是LSB位开始:数据传输从MSB位开始</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_CRCPolynomial <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token comment">//CRC值计算的多项式</span><span class="token function">SPI_Init</span><span class="token punctuation">(</span>SPI2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>SPI_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//根据SPI_InitStruct中指定的参数初始化外设SPIx寄存器</span> <span class="token function">SPI_Cmd</span><span class="token punctuation">(</span>SPI2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使能SPI外设</span><span class="token function">SPI2_ReadWriteByte</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//启动传输 </span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">SPI2_SetSpeed</span><span class="token punctuation">(</span>u8 SPI_BaudRatePrescaler<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">assert_param</span><span class="token punctuation">(</span><span class="token function">IS_SPI_BAUDRATE_PRESCALER</span><span class="token punctuation">(</span>SPI_BaudRatePrescaler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断有效性</span>SPI2<span class="token operator">-></span>CR1<span class="token operator">&amp;=</span><span class="token number">0XFFC7</span><span class="token punctuation">;</span><span class="token comment">//位3-5清零，用来设置波特率</span>SPI2<span class="token operator">-></span>CR1<span class="token operator">|=</span>SPI_BaudRatePrescaler<span class="token punctuation">;</span><span class="token comment">//设置SPI1速度 </span><span class="token function">SPI_Cmd</span><span class="token punctuation">(</span>SPI2<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使能SPI1</span><span class="token punctuation">&#125;</span> u8 <span class="token function">SPI2_ReadWriteByte</span><span class="token punctuation">(</span>u8 TxData<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">SPI_I2S_GetFlagStatus</span><span class="token punctuation">(</span>SPI2<span class="token punctuation">,</span> SPI_I2S_FLAG_TXE<span class="token punctuation">)</span> <span class="token operator">==</span> RESET<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//等待发送区空  </span><span class="token function">SPI_I2S_SendData</span><span class="token punctuation">(</span>SPI2<span class="token punctuation">,</span> TxData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过外设SPIx发送一个byte  数据</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">SPI_I2S_GetFlagStatus</span><span class="token punctuation">(</span>SPI2<span class="token punctuation">,</span> SPI_I2S_FLAG_RXNE<span class="token punctuation">)</span> <span class="token operator">==</span> RESET<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//等待接收完一个byte  </span><span class="token keyword">return</span> <span class="token function">SPI_I2S_ReceiveData</span><span class="token punctuation">(</span>SPI2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回通过SPIx最近接收的数据</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="从机控制SPI-2"><a href="#从机控制SPI-2" class="headerlink" title="从机控制SPI_2"></a>从机控制<code>SPI_2</code></h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SPI2_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span><span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//PORTB时钟使能 </span><span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_SPI2<span class="token punctuation">,</span>  ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//SPI2时钟使能 </span> GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_13<span class="token punctuation">;</span>  <span class="token comment">//sck</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span> <span class="token comment">//浮空输入</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token comment">//50MHz</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_14<span class="token punctuation">;</span>  <span class="token comment">//miso</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span> <span class="token comment">//推挽复用输出</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token comment">//50MHz</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_15<span class="token punctuation">;</span>  <span class="token comment">//mosi</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span> <span class="token comment">//推挽复用输出</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token comment">//50MHz</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*GPIO_InitStructure.GPIO_Pin =GPIO_Pin_13|GPIO_Pin_14| GPIO_Pin_15;  //mosiGPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; //推挽复用输出GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;//50MHzGPIO_Init(GPIOB, &amp;GPIO_InitStructure);*/</span><span class="token comment">//设置PB12成为从机SPI通信的片选管脚，我们在初始最后给他变成0就可以了，这样表示选中为从机</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span>  GPIO_Pin_12<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token comment">//100MHz</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span>GPIO_Pin_12<span class="token punctuation">)</span><span class="token punctuation">;</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_Direction <span class="token operator">=</span> SPI_Direction_2Lines_FullDuplex<span class="token punctuation">;</span>  <span class="token comment">//设置SPI单向或者双向的数据模式:SPI设置为双线双向全双工</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_Mode <span class="token operator">=</span> SPI_Mode_Slave<span class="token punctuation">;</span><span class="token comment">//设置SPI工作模式:设置为主SPI</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_DataSize <span class="token operator">=</span> SPI_DataSize_8b<span class="token punctuation">;</span><span class="token comment">//设置SPI的数据大小:SPI发送接收8位帧结构</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_CPOL <span class="token operator">=</span> SPI_CPOL_High<span class="token punctuation">;</span><span class="token comment">//选择了串行时钟的稳态:时钟悬空高</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_CPHA <span class="token operator">=</span> SPI_CPHA_2Edge<span class="token punctuation">;</span><span class="token comment">//数据捕获于第二个时钟沿</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_NSS <span class="token operator">=</span> SPI_NSS_Soft<span class="token punctuation">;</span><span class="token comment">//NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理:内部NSS信号有SSI位控制</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_BaudRatePrescaler <span class="token operator">=</span> SPI_BaudRatePrescaler_256<span class="token punctuation">;</span><span class="token comment">//定义波特率预分频的值:波特率预分频值为256</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_FirstBit <span class="token operator">=</span> SPI_FirstBit_MSB<span class="token punctuation">;</span><span class="token comment">//指定数据传输从MSB位还是LSB位开始:数据传输从MSB位开始</span>SPI_InitStructure<span class="token punctuation">.</span>SPI_CRCPolynomial <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token comment">//CRC值计算的多项式</span><span class="token function">SPI_Init</span><span class="token punctuation">(</span>SPI2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>SPI_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//根据SPI_InitStruct中指定的参数初始化外设SPIx寄存器</span> <span class="token function">SPI_Cmd</span><span class="token punctuation">(</span>SPI2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使能SPI外设</span>  <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span>GPIO_Pin_12<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*这里没有SPI1_SetSpeed函数哦！*/</span>u8 <span class="token function">SPI2_ReadWriteByte</span><span class="token punctuation">(</span>u8 TxData<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">SPI_I2S_GetFlagStatus</span><span class="token punctuation">(</span>SPI2<span class="token punctuation">,</span> SPI_I2S_FLAG_TXE<span class="token punctuation">)</span> <span class="token operator">==</span> RESET<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//等待发送区空  </span><span class="token function">SPI_I2S_SendData</span><span class="token punctuation">(</span>SPI2<span class="token punctuation">,</span> TxData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过外设SPIx发送一个byte  数据</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">SPI_I2S_GetFlagStatus</span><span class="token punctuation">(</span>SPI2<span class="token punctuation">,</span> SPI_I2S_FLAG_RXNE<span class="token punctuation">)</span> <span class="token operator">==</span> RESET<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//等待接收完一个byte  </span><span class="token keyword">return</span> <span class="token function">SPI_I2S_ReceiveData</span><span class="token punctuation">(</span>SPI2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回通过SPIx最近接收的数据</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> SPI使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结构体学习</title>
      <link href="/2023/02/09/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/02/09/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h5 id="结构体最基本定义"><a href="#结构体最基本定义" class="headerlink" title="结构体最基本定义"></a>结构体最基本定义</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 1。定义结构体</span><span class="token keyword">struct</span> <span class="token class-name">Structure_name</span> <span class="token comment">// 结构体名称</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> a<span class="token punctuation">;</span> <span class="token comment">// 成员</span>    <span class="token keyword">short</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">;</span>    <span class="token keyword">float</span> d<span class="token punctuation">;</span>    <span class="token keyword">double</span> e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 成员列表</span><span class="token comment">// 结构体类型名  相当于 int float</span><span class="token comment">// struct taStructure_nameg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="创建结构体变量"><a href="#创建结构体变量" class="headerlink" title="创建结构体变量"></a>创建结构体变量</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 2.结构体创建变量</span><span class="token keyword">struct</span> <span class="token class-name">book</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> id<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> b1<span class="token punctuation">,</span> b2<span class="token punctuation">;</span> <span class="token comment">// bi，b2 为全局变量</span>          <span class="token comment">// 不能使用这个b1 b2 去初始化结构体</span><span class="token comment">// b1 = &#123;&#123;'a', 'b', 'c'&#125;, &#123;'a', 'b', 'c'&#125;&#125;;</span><span class="token comment">//  b2 = &#123;"abcf", "id"&#125;; // 结构体初始化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>b1 b2 这种方式好像不能进行结构体的初始化</p><h5 id="使用typedt的方式创建结构体"><a href="#使用typedt的方式创建结构体" class="headerlink" title="使用typedt的方式创建结构体"></a>使用typedt的方式创建结构体</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 3.使用typedef定义结构体</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">human</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> sex<span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> hu<span class="token punctuation">;</span><span class="token comment">// hu = &#123;"man", "abc"&#125;; 这种方法是错误的 hu变成了一种结构体的类型 而不是一个结构体</span><span class="token keyword">struct</span> <span class="token class-name">human</span> man3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'m'</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 typedf </p><p>那么struct  human 可以简化为 hu </p><p>直接使用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">hu man <span class="token comment">//则创建了一个man结构体 类型 为hu  其中hu 相当于 struct human</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="结构体嵌套及初始化-三种变量访问方式"><a href="#结构体嵌套及初始化-三种变量访问方式" class="headerlink" title="结构体嵌套及初始化 三种变量访问方式"></a>结构体嵌套及初始化 三种变量访问方式</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 结构体嵌套初始化</span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">T</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">S</span> s<span class="token punctuation">;</span>    <span class="token keyword">char</span> d<span class="token punctuation">;</span>    <span class="token keyword">int</span> f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 嵌套结构体的初始化</span><span class="token keyword">struct</span> <span class="token class-name">T</span> T_1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 全局变量</span><span class="token comment">//嵌套结构体的三种访问方式</span><span class="token comment">// 访问嵌套结构体的成员</span><span class="token comment">// 结构体成员是通过操作符.进行访问的，.操作符具有两个操作数。左边是结构体变量名，右边是结构体成员名。</span><span class="token keyword">struct</span> <span class="token class-name">T</span> T_2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 全局变量</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%c,%c,%d\n"</span><span class="token punctuation">,</span> T_2<span class="token punctuation">.</span>s<span class="token punctuation">.</span>a<span class="token punctuation">,</span> T_2<span class="token punctuation">.</span>s<span class="token punctuation">.</span>c<span class="token punctuation">,</span> T_2<span class="token punctuation">.</span>d<span class="token punctuation">,</span> T_2<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s,%s\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>name<span class="token punctuation">,</span> b<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s,%s\n"</span><span class="token punctuation">,</span> b1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> b1<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以直接访问结构体 没赋值所以输出 ，</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="操作符-和-gt-和-的区别"><a href="#操作符-和-gt-和-的区别" class="headerlink" title="操作符  .   和   -&gt;   和  *  的区别"></a>操作符  .   和   -&gt;   和  *  的区别</h5><h6 id="是直接访问结构体的成员"><a href="#是直接访问结构体的成员" class="headerlink" title=".是直接访问结构体的成员"></a>.是直接访问结构体的成员</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 结构体嵌套初始化</span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">T</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">S</span> s<span class="token punctuation">;</span>    <span class="token keyword">char</span> d<span class="token punctuation">;</span>    <span class="token keyword">int</span> f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 嵌套结构体的初始化</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">T</span> T_2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 全局变量</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%c,%c,%d\n"</span><span class="token punctuation">,</span> T_2<span class="token punctuation">.</span>s<span class="token punctuation">.</span>a<span class="token punctuation">,</span> T_2<span class="token punctuation">.</span>s<span class="token punctuation">.</span>c<span class="token punctuation">,</span> T_2<span class="token punctuation">.</span>d<span class="token punctuation">,</span> T_2<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="gt-如果传入的结构体是指向一个结构体的指针-那么使用-gt-可以直接访问-这个指针-指向的结构体的成员"><a href="#gt-如果传入的结构体是指向一个结构体的指针-那么使用-gt-可以直接访问-这个指针-指向的结构体的成员" class="headerlink" title="-&gt;  如果传入的结构体是指向一个结构体的指针  那么使用 -&gt; 可以直接访问 这个指针 指向的结构体的成员"></a>-&gt;  如果传入的结构体是指向一个结构体的指针  那么使用 -&gt; 可以直接访问 这个指针 指向的结构体的成员</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 结构体嵌套初始化</span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">T</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">S</span> s<span class="token punctuation">;</span>    <span class="token keyword">char</span> d<span class="token punctuation">;</span>    <span class="token keyword">int</span> f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 嵌套结构体的初始化</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">T</span> T_2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 全局变量</span>    <span class="token keyword">struct</span> <span class="token class-name">T</span> <span class="token operator">*</span>pt <span class="token operator">=</span> <span class="token operator">&amp;</span>T_2<span class="token punctuation">;</span>    <span class="token comment">//简单的对指针的解引用    T_2这个结构体地址 赋值到 指针 pt</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%c,%c,%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">.</span>s<span class="token punctuation">.</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">.</span>s<span class="token punctuation">.</span>c<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">.</span>d<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="是-我们在访问嵌套结构体时-直接定义一个指针指向被嵌套的那个结构体-之后-可以直接使用这个指针访问被嵌套的结构体的成员变量"><a href="#是-我们在访问嵌套结构体时-直接定义一个指针指向被嵌套的那个结构体-之后-可以直接使用这个指针访问被嵌套的结构体的成员变量" class="headerlink" title="*是 我们在访问嵌套结构体时   直接定义一个指针指向被嵌套的那个结构体 之后  可以直接使用这个指针访问被嵌套的结构体的成员变量"></a>*是 我们在访问嵌套结构体时   直接定义一个指针指向被嵌套的那个结构体 之后  可以直接使用这个指针访问被嵌套的结构体的成员变量</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 结构体嵌套初始化</span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">T</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">S</span> s<span class="token punctuation">;</span>    <span class="token keyword">char</span> d<span class="token punctuation">;</span>    <span class="token keyword">int</span> f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 嵌套结构体的初始化</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">T</span> T_2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 全局变量</span>    <span class="token keyword">struct</span> <span class="token class-name">T</span> <span class="token operator">*</span>pt <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>T_2<span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//同样也是简单的对指针的解引用    T_2.s这个 直接指向被嵌套的结构体的地址 赋值到 指针 pt  </span>    <span class="token comment">//简单粗暴的直接访问方式</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%c,%c,%d\n"</span><span class="token punctuation">,</span> pt<span class="token operator">-></span>a<span class="token punctuation">,</span> pt<span class="token operator">-></span>c<span class="token punctuation">,</span> T_2<span class="token punctuation">.</span>d<span class="token punctuation">,</span> T_2<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结构体作为参数"><a href="#结构体作为参数" class="headerlink" title="结构体作为参数"></a>结构体作为参数</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 结构体作为参数</span><span class="token keyword">struct</span> <span class="token class-name">stru</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Print1</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stru</span> ss<span class="token punctuation">)</span> <span class="token comment">//注意定义函数时 参数不要错</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %d\n"</span><span class="token punctuation">,</span> ss<span class="token punctuation">.</span>a<span class="token punctuation">,</span> ss<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Print2</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stru</span> <span class="token operator">*</span>ps<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %d\n"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>a<span class="token punctuation">,</span> ps<span class="token operator">-></span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">mian</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 初始化结构体参数</span>    <span class="token keyword">struct</span> <span class="token class-name">stru</span> sss <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"abcde"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 注意数组不要越界</span>    <span class="token function">Print1</span><span class="token punctuation">(</span>sss<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">stru</span> <span class="token operator">*</span>pt1 <span class="token operator">=</span> <span class="token operator">&amp;</span>sss<span class="token punctuation">;</span>    <span class="token function">Print2</span><span class="token punctuation">(</span>pt1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上述代码，我们直接<code>sss</code>把传过去，显然是传值调用，但<code>sss</code>本身就占用了非常大的空间，然后又创建了一份一样大的形参临时拷贝，时间空间上浪费的问题非常严重。这样的话，很明显我们还是传址调用最好，无论<code>s</code>的占用有多大，我们只传了4个字节的地址。</p><p>所以<strong>结构体传参通常使用传址调用</strong>。</p><h5 id="学习结构体的整体代码"><a href="#学习结构体的整体代码" class="headerlink" title="学习结构体的整体代码"></a>学习结构体的整体代码</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">// 1。定义结构体</span><span class="token keyword">struct</span> <span class="token class-name">Structure_name</span> <span class="token comment">// 结构体名称</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> a<span class="token punctuation">;</span> <span class="token comment">// 成员</span>    <span class="token keyword">short</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">;</span>    <span class="token keyword">float</span> d<span class="token punctuation">;</span>    <span class="token keyword">double</span> e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 成员列表</span><span class="token comment">// 结构体类型名  相当于 int float</span><span class="token comment">// struct taStructure_nameg</span><span class="token comment">// 2.结构体创建变量</span><span class="token keyword">struct</span> <span class="token class-name">book</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> id<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> b1<span class="token punctuation">,</span> b2<span class="token punctuation">;</span> <span class="token comment">// bi，b2 为全局变量</span>          <span class="token comment">// 不能使用这个b1 b2 去初始化结构体</span><span class="token comment">// b1 = &#123;&#123;'a', 'b', 'c'&#125;, &#123;'a', 'b', 'c'&#125;&#125;;</span><span class="token comment">//  b2 = &#123;"abcf", "id"&#125;; // 结构体初始化</span><span class="token comment">// 3.使用typedef定义结构体</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">human</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> sex<span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> hu<span class="token punctuation">;</span><span class="token comment">// hu = &#123;"man", "abc"&#125;; 这种方法是错误的 hu变成了一种结构体的类型 而不是一个结构体</span><span class="token keyword">struct</span> <span class="token class-name">human</span> man3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'m'</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 结构体嵌套初始化</span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">T</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">S</span> s<span class="token punctuation">;</span>    <span class="token keyword">char</span> d<span class="token punctuation">;</span>    <span class="token keyword">int</span> f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 嵌套结构体的初始化</span><span class="token keyword">struct</span> <span class="token class-name">T</span> T_1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 全局变量</span><span class="token comment">// 结构体作为参数</span><span class="token keyword">struct</span> <span class="token class-name">stru</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Print1</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stru</span> ss<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %d\n"</span><span class="token punctuation">,</span> ss<span class="token punctuation">.</span>a<span class="token punctuation">,</span> ss<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Print2</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stru</span> <span class="token operator">*</span>ps<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %d\n"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>a<span class="token punctuation">,</span> ps<span class="token operator">-></span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">book</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 局部变量</span>    <span class="token comment">// 使用typedef方法定义的结构体初始化</span>    <span class="token comment">// 1.   这个仍然和没有typeef一样</span>    <span class="token keyword">struct</span> <span class="token class-name">human</span> man1<span class="token punctuation">;</span>    <span class="token comment">// 2. 使用typedef</span>    hu man2<span class="token punctuation">;</span>    <span class="token comment">// 结构体成员访问</span>    <span class="token comment">// . 操作符</span>    <span class="token comment">// 访问嵌套结构体的成员</span>    <span class="token comment">// 结构体成员是通过操作符.进行访问的，.操作符具有两个操作数。左边是结构体变量名，右边是结构体成员名。</span>    <span class="token keyword">struct</span> <span class="token class-name">T</span> T_2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 全局变量</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%c,%c,%d\n"</span><span class="token punctuation">,</span> T_2<span class="token punctuation">.</span>s<span class="token punctuation">.</span>a<span class="token punctuation">,</span> T_2<span class="token punctuation">.</span>s<span class="token punctuation">.</span>c<span class="token punctuation">,</span> T_2<span class="token punctuation">.</span>d<span class="token punctuation">,</span> T_2<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s,%s\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>name<span class="token punctuation">,</span> b<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s,%s\n"</span><span class="token punctuation">,</span> b1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> b1<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以直接访问结构体 没赋值所以输出  ，</span>    <span class="token comment">//  ->&amp;*操作符</span>    <span class="token comment">// 有的时候我们得到的是一个指向该结构体的指针。这时候我们就需要操作符->，同样也是两个操作数</span>    <span class="token keyword">struct</span> <span class="token class-name">T</span> t <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token char">'x'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">T</span> <span class="token operator">*</span>pt <span class="token operator">=</span> <span class="token operator">&amp;</span>t<span class="token punctuation">;</span> <span class="token comment">// 定义一个结构体T类型的 指针 pt 并将结构体 t 的地址 赋值给 pt</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%c,%c,%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">.</span>s<span class="token punctuation">.</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">.</span>s<span class="token punctuation">.</span>c<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">.</span>d<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对指针解引用  此处仍然用的  . 操作符</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%c,%c,%d\n"</span><span class="token punctuation">,</span> pt<span class="token operator">-></span>s<span class="token punctuation">.</span>a<span class="token punctuation">,</span> pt<span class="token operator">-></span>s<span class="token punctuation">.</span>c<span class="token punctuation">,</span> pt<span class="token operator">-></span>d<span class="token punctuation">,</span> pt<span class="token operator">-></span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对指针解引用  此处用的  -> 操作符  如果是指针类型的结构体 则使用  -> 访问结构体成员</span>    <span class="token keyword">struct</span> <span class="token class-name">T</span> n <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token char">'x'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">S</span> <span class="token operator">*</span>ps <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%c,%c,%d\n"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>a<span class="token punctuation">,</span> ps<span class="token operator">-></span>c<span class="token punctuation">,</span> t<span class="token punctuation">.</span>d<span class="token punctuation">,</span> t<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 简单粗暴 直接 创建一个指针 指向 t.s</span>    <span class="token comment">// 初始化结构体参数</span>    <span class="token keyword">struct</span> <span class="token class-name">stru</span> sss <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"abcde"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 注意数组不要越界</span>    <span class="token function">Print1</span><span class="token punctuation">(</span>sss<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">stru</span> <span class="token operator">*</span>pt1 <span class="token operator">=</span> <span class="token operator">&amp;</span>sss<span class="token punctuation">;</span>    <span class="token function">Print2</span><span class="token punctuation">(</span>pt1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 结构体学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆内存和栈内存的区别</title>
      <link href="/2023/02/07/%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E6%A0%88%E5%86%85%E5%AD%98%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/02/07/%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E6%A0%88%E5%86%85%E5%AD%98%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="堆内存和栈内存有什么区别？平时开发应该使用堆内存还是栈内存？"><a href="#堆内存和栈内存有什么区别？平时开发应该使用堆内存还是栈内存？" class="headerlink" title="堆内存和栈内存有什么区别？平时开发应该使用堆内存还是栈内存？"></a>堆内存和栈内存有什么区别？平时开发应该使用堆内存还是栈内存？</h3><p>栈内存：为编译器自动分配和释放，如函数参数、局部变量、临时变量等等<br>堆内存：为成员分配和释放，由程序员自己申请、自己释放。否则发生内存泄露。典型为使用malloc申请的堆内容。</p><p>除了栈内存和堆内存外还有一部分叫</p><p>静态存储区：内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都存在。它主要存放静态数据、全局数据和常量。</p><h4 id="1-程序的内存分配"><a href="#1-程序的内存分配" class="headerlink" title="1.程序的内存分配"></a>1.程序的内存分配</h4><p>栈（stack）：有编译器自动分配和释放，存放函数的参数、局部变量、临时变量、函数返回地址等；</p><p>堆（heap）：一般有程序员分配和释放，如果没有手动释放，在程序结束时可能由操作系统自动释放（这个可能针对Java那样的有回收机制的语言，对于c/c++,这样的必须要手动释放开辟的堆内存），否则会引起内存泄漏。</p><h4 id="2-申请后系统的响应"><a href="#2-申请后系统的响应" class="headerlink" title="2.申请后系统的响应"></a>2.申请后系统的响应</h4><p>栈：只要栈的剩余空间大于所申请的空间，系统将为程序提供内存，否则将报异常提示栈溢出。<strong>比如曾经做摄像头图像传输时遇到的爆栈情况，数组过大内存直接溢出。</strong></p><p>堆：在记录空闲内存地址的链表中寻找一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。另外，对于大多数系统会在这块内存空间的首地址出记录本次分配空间的大小，这样代码中的delete 才能正确释放本内存空间。系统会将多余的那部分重新空闲链表中。</p><h4 id="3、申请大小限制"><a href="#3、申请大小限制" class="headerlink" title="3、申请大小限制"></a>3、申请大小限制</h4><p>栈：在Windows下,栈是向低地址扩展的数据结构，压入栈，是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，在 WINDOWS下，栈的大小是2M（也有的说是1M，总之是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。<br>堆：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于<strong>系统是用链表来存储的空闲内存地址</strong>的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的<a href="https://so.csdn.net/so/search?q=%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">虚拟内存</a>。由此可见，堆获得的空间比较灵活，也比较大。</p><h4 id="4、分配效率"><a href="#4、分配效率" class="headerlink" title="4、分配效率"></a>4、分配效率</h4><p>栈：由系统自动分配，速度较快。但程序员是无法控制的。<br>堆：由new分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便. 另外，在WINDOWS下，最好的方式是用VirtualAlloc（c++的内存分配函数）分配内存，不是在堆，也不是在栈是直接在进程的地址空间中保留一快内存，虽然用起来最不方便。但是速度快，也最灵活</p><h4 id="5、存储内容"><a href="#5、存储内容" class="headerlink" title="5、存储内容"></a>5、存储内容</h4><p>栈：在栈中，第一个进栈的是主函数下一条指令的地址，然后是函数的各个参数，在大多数编译器中，参数是由右往左入栈，然后是函数中的局部变量。注意，静态变量不入栈。出栈则刚好顺序相反。</p><p>堆：一般在堆的头部用一个字节存放堆的大小，具体内容由程序而定。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 堆内存和栈内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FreeRTOS学习（1）---创建和删除任务 动态方法</title>
      <link href="/2023/02/07/FreeRTOS%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89-%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A1-%E5%8A%A8%E6%80%81%E6%96%B9%E6%B3%95/"/>
      <url>/2023/02/07/FreeRTOS%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89-%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A1-%E5%8A%A8%E6%80%81%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h5 id="FreeRTOS任务创建和删除API函数"><a href="#FreeRTOS任务创建和删除API函数" class="headerlink" title="FreeRTOS任务创建和删除API函数"></a>FreeRTOS任务创建和删除API函数</h5><p><img src="/2023/02/07/FreeRTOS%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89-%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A1-%E5%8A%A8%E6%80%81%E6%96%B9%E6%B3%95/image-20230207154809873.png"></p><p>其中遇到的一个问题  开始配置的两个任务的优先级<code>test1_task</code>优先级为2，但是<code>test2_task</code>优先级为3，所以就造成每次执行任务都是<code>test2_task</code>先执行发现串口助手 在执行第5次<code>test1_task</code>是<code>test2_task</code>多执行一次。</p><p>最终发现是两个任务的优先级导致的。</p><p>优先级越大，优先程度越高。</p><h5 id="任务创建–不可少的就是开始任务"><a href="#任务创建–不可少的就是开始任务" class="headerlink" title="任务创建–不可少的就是开始任务"></a>任务创建–不可少的就是开始任务</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//创建开始任务</span>   <span class="token function">xTaskCreate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TaskFunction_t <span class="token punctuation">)</span> start_task<span class="token punctuation">,</span>            <span class="token comment">//任务函数</span>               <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span>    <span class="token punctuation">)</span> <span class="token string">"start_task"</span><span class="token punctuation">,</span>          <span class="token comment">//任务名称</span>               <span class="token punctuation">(</span><span class="token class-name">uint16_t</span>       <span class="token punctuation">)</span> START_STK_SIZE<span class="token punctuation">,</span>        <span class="token comment">//任务堆栈大小</span>               <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span>          <span class="token punctuation">)</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>                  <span class="token comment">//传递给任务函数的参数</span>               <span class="token punctuation">(</span>UBaseType_t    <span class="token punctuation">)</span> START_TASK_PRIO<span class="token punctuation">,</span>       <span class="token comment">//任务优先级</span>               <span class="token punctuation">(</span>TaskHandle_t<span class="token operator">*</span>  <span class="token punctuation">)</span> <span class="token operator">&amp;</span>StartTask_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//任务句柄    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="每个任务都要有的相关配置–这是开始任务的配置"><a href="#每个任务都要有的相关配置–这是开始任务的配置" class="headerlink" title="每个任务都要有的相关配置–这是开始任务的配置"></a>每个任务都要有的相关配置–这是开始任务的配置</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//开始任务配置</span><span class="token keyword">void</span> <span class="token function">start_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//任务函数</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">START_TASK_PRIO</span>  <span class="token expression"><span class="token number">1</span>  </span><span class="token comment">//任务优先级   //优先级为 0 是 开启任务调度使用 优先级31也是系统所用 所以此处不能使用优先级0和31</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">START_STK_SIZE</span> <span class="token expression"><span class="token number">120</span> </span><span class="token comment">//任务堆栈大小</span></span>TaskHandle_t StartTask_Handler<span class="token punctuation">;</span> <span class="token comment">//任务句柄</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="在开始任务中创建任务函数"><a href="#在开始任务中创建任务函数" class="headerlink" title="在开始任务中创建任务函数"></a>在开始任务中创建任务函数</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">start_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//任务1</span>    <span class="token function">xTaskCreate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TaskFunction_t <span class="token punctuation">)</span> test1_task<span class="token punctuation">,</span>            <span class="token comment">//任务函数</span>                <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span>    <span class="token punctuation">)</span> <span class="token string">"test1_task"</span><span class="token punctuation">,</span>          <span class="token comment">//任务名称</span>                <span class="token punctuation">(</span><span class="token class-name">uint16_t</span>       <span class="token punctuation">)</span> TEST1_STK_SIZE<span class="token punctuation">,</span>        <span class="token comment">//任务堆栈大小</span>                <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span>          <span class="token punctuation">)</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>                  <span class="token comment">//传递给任务函数的参数</span>                <span class="token punctuation">(</span>UBaseType_t    <span class="token punctuation">)</span> TEST1_TASK_PRIO<span class="token punctuation">,</span>       <span class="token comment">//任务优先级</span>                <span class="token punctuation">(</span>TaskHandle_t<span class="token operator">*</span>  <span class="token punctuation">)</span> <span class="token operator">&amp;</span>Test1Task_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//任务句柄         </span><span class="token comment">//任务2</span>    <span class="token function">xTaskCreate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TaskFunction_t <span class="token punctuation">)</span> test2_task<span class="token punctuation">,</span>            <span class="token comment">//任务函数</span>                <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span>    <span class="token punctuation">)</span> <span class="token string">"test2_task"</span><span class="token punctuation">,</span>          <span class="token comment">//任务名称</span>                <span class="token punctuation">(</span><span class="token class-name">uint16_t</span>       <span class="token punctuation">)</span> TEST2_STK_SIZE<span class="token punctuation">,</span>        <span class="token comment">//任务堆栈大小</span>                <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span>          <span class="token punctuation">)</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>                  <span class="token comment">//传递给任务函数的参数</span>                <span class="token punctuation">(</span>UBaseType_t    <span class="token punctuation">)</span> TEST2_TASK_PRIO<span class="token punctuation">,</span>       <span class="token comment">//任务优先级</span>                <span class="token punctuation">(</span>TaskHandle_t<span class="token operator">*</span>  <span class="token punctuation">)</span> <span class="token operator">&amp;</span>Test2Task_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//任务句柄    </span><span class="token function">vTaskDelete</span><span class="token punctuation">(</span>StartTask_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//传入要删除函数的句柄   如果要删除开始任务本身 则传入NULL</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="当然任务函数也是要有配置"><a href="#当然任务函数也是要有配置" class="headerlink" title="当然任务函数也是要有配置"></a>当然任务函数也是要有配置</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//任务函数1配置</span><span class="token keyword">void</span> <span class="token function">test1_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST1_TASK_PRIO</span> <span class="token expression"><span class="token number">3</span>  </span><span class="token comment">//数越大 越优先  越大越快</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST1_STK_SIZE</span> <span class="token expression"><span class="token number">120</span></span></span>TaskHandle_t Test1Task_Handler<span class="token punctuation">;</span><span class="token comment">//任务函数2配置</span><span class="token keyword">void</span> <span class="token function">test2_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST2_TASK_PRIO</span> <span class="token expression"><span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST2_STK_SIZE</span> <span class="token expression"><span class="token number">120</span></span></span>TaskHandle_t Test2Task_Handler<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="任务函数"><a href="#任务函数" class="headerlink" title="任务函数"></a>任务函数</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//测试函数1</span><span class="token keyword">void</span> <span class="token function">test1_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i<span class="token operator">++</span><span class="token punctuation">;</span>LED0 <span class="token operator">=</span> <span class="token operator">~</span>LED0<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"TASK1..... %d\r\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">vTaskDelete</span><span class="token punctuation">(</span>Test2Task_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//传入要删除函数的句柄</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"TASK2 shanchu\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//测试函数2</span><span class="token keyword">void</span> <span class="token function">test2_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num<span class="token operator">++</span><span class="token punctuation">;</span>LED1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LED1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"TASK2.....%d\r\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="必须要有的一定要开启任务调度器"><a href="#必须要有的一定要开启任务调度器" class="headerlink" title="必须要有的一定要开启任务调度器"></a>必须要有的一定要开启任务调度器</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">vTaskStartScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//开启任务调度</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="任务删除"><a href="#任务删除" class="headerlink" title="任务删除"></a>任务删除</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">vTaskDelete</span><span class="token punctuation">(</span>StartTask_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//传入要删除函数的句柄   如果要删除开始任务本身 则传入NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> FreeRTOS学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何显示图片</title>
      <link href="/2023/02/01/%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/"/>
      <url>/2023/02/01/%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>选择要插入的本地图片（这个看不到 是因为路径问题）</p><p><img src="/%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/VCG211381881418.webp"></p><p>可以看到上述图片的路径为<a href="%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/VCG211381881418.webp"></a></p><p>之后直接</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">ctrl<span class="token operator">+</span>f    <span class="token comment">//搜索之后替换</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在全文搜索本文章的文章名+/ </p><p>在此示例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">为如何显示图片<span class="token operator">/</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将本文所有的 替换为空格</p><p>之后保存 发布即可</p><p>修改路径图片显示成功</p><p><img src="/2023/02/01/%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/VCG211381881418.webp"></p><p>这个是可以看到的图片</p><p><img src="/2023/02/01/%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/ganyukeqing.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 图片显示方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章发布流程</title>
      <link href="/2023/01/31/hello-world/"/>
      <url>/2023/01/31/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 文章发布 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码高亮测试</title>
      <link href="/2023/01/31/%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/01/31/%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;#include &lt;pthread.h&gt;#include &lt;windows.h&gt;#define N 100#define true 1#define producerNum  10#define consumerNum  5#define sleepTime 1000typedef int semaphore;typedef int item;item buffer[N] &#x3D; &#123;0&#125;;int in &#x3D; 0;int out &#x3D; 0;int proCount &#x3D; 0;semaphore mutex &#x3D; 1, empty &#x3D; N, full &#x3D; 0, proCmutex &#x3D; 1;void * producer(void * a)&#123;    while(true)&#123;        while(proCmutex &lt;&#x3D; 0);        proCmutex--;        proCount++;        printf(&quot;生产一个产品ID%d, 缓冲区位置为%d\n&quot;,proCount,in);        proCmutex++;        while(empty &lt;&#x3D; 0)&#123;            printf(&quot;缓冲区已满！\n&quot;);        &#125;        empty--;        while(mutex &lt;&#x3D; 0);        mutex--;        buffer[in] &#x3D; proCount;        in &#x3D; (in + 1) % N;        mutex++;        full++;        Sleep(sleepTime);    &#125;&#125;void * consumer(void *b)&#123;    while(true)&#123;        while(full &lt;&#x3D; 0)&#123;            printf(&quot;缓冲区为空！\n&quot;);        &#125;        full--;        while(mutex &lt;&#x3D; 0);        mutex--;        int nextc &#x3D; buffer[out];        buffer[out] &#x3D; 0;&#x2F;&#x2F;消费完将缓冲区设置为0        out &#x3D; (out + 1) % N;        mutex++;        empty++;        printf(&quot;\t\t\t\t消费一个产品ID%d,缓冲区位置为%d\n&quot;, nextc,out);        Sleep(sleepTime);    &#125;&#125;int main()&#123;    pthread_t threadPool[producerNum+consumerNum];    int i;    for(i &#x3D; 0; i &lt; producerNum; i++)&#123;        pthread_t temp;        if(pthread_create(&amp;temp, NULL, producer, NULL) &#x3D;&#x3D; -1)&#123;            printf(&quot;ERROR, fail to create producer%d\n&quot;, i);            exit(1);        &#125;        threadPool[i] &#x3D; temp;    &#125;&#x2F;&#x2F;创建生产者进程放入线程池    for(i &#x3D; 0; i &lt; consumerNum; i++)&#123;        pthread_t temp;        if(pthread_create(&amp;temp, NULL, consumer, NULL) &#x3D;&#x3D; -1)&#123;            printf(&quot;ERROR, fail to create consumer%d\n&quot;, i);            exit(1);        &#125;        threadPool[i+producerNum] &#x3D; temp;    &#125;&#x2F;&#x2F;创建消费者进程放入线程池    void * result;    for(i &#x3D; 0; i &lt; producerNum+consumerNum; i++)&#123;        if(pthread_join(threadPool[i], &amp;result) &#x3D;&#x3D; -1)&#123;            printf(&quot;fail to recollect\n&quot;);            exit(1);        &#125;    &#125;&#x2F;&#x2F;运行线程池    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/01/31/%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E6%B5%8B%E8%AF%95/ganyukeqing.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 网站部署测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站部署</title>
      <link href="/2023/01/31/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2/"/>
      <url>/2023/01/31/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>记录一下</p><h3 id="2023年1月31日12：17-网站部署成功"><a href="#2023年1月31日12：17-网站部署成功" class="headerlink" title="2023年1月31日12：17  网站部署成功"></a>2023年1月31日12：17  网站部署成功</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 网站部署测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
